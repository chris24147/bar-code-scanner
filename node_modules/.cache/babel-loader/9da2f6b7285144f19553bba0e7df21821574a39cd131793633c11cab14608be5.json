{"ast":null,"code":"/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env, concat, slice, stack, tensor, tidy, unstack, util, io, Tensor, add, addN, mod, mul, div, floorDiv, sub, minimum, maximum, pow, squaredDifference, abs, acos, acosh, asin, asinh, atan, atan2, atanh, ceil, complex, cos, cosh, elu, erf, exp, expm1, floor, log, log1p, imag, neg, reciprocal, real, relu, round, selu, sigmoid, sin, sign, sinh, softplus, sqrt, square, tanh, tan, clipByValue, rsqrt, prod, leakyRelu, scalar, conv1d, conv2d, fused, conv2dTranspose, depthwiseConv2d, conv3d, avgPool, maxPool, avgPool3d, maxPool3d, fill, linspace, multinomial, oneHot, ones, onesLike, randomUniform, range, truncatedNormal, zeros, zerosLike, image, whereAsync, setdiff1dAsync, topk, tensor1d, equal, notEqual, greater, greaterEqual, less, lessEqual, logicalAnd, logicalNot, logicalOr, where, matMul, transpose, batchNorm, localResponseNormalization, softmax, logSoftmax, sparseToDense, max, mean, min, sum, all, any, argMax, argMin, gather, reverse, stridedSlice, tile, split, scatterND, gatherND, fft, ifft, rfft, irfft, cast, expandDims, squeeze, reshape, pad, spaceToBatchND, batchToSpaceND, depthToSpace } from \"@tensorflow/tfjs-core\";\nvar DataType,\n  SaverDef,\n  __assign = function () {\n    return (__assign = Object.assign || function (e) {\n      for (var t, a = 1, r = arguments.length; a < r; a++) for (var n in t = arguments[a]) Object.prototype.hasOwnProperty.call(t, n) && (e[n] = t[n]);\n      return e;\n    }).apply(this, arguments);\n  };\nfunction __awaiter(e, t, a, r) {\n  return new (a || (a = Promise))(function (n, s) {\n    function o(e) {\n      try {\n        u(r.next(e));\n      } catch (e) {\n        s(e);\n      }\n    }\n    function p(e) {\n      try {\n        u(r.throw(e));\n      } catch (e) {\n        s(e);\n      }\n    }\n    function u(e) {\n      e.done ? n(e.value) : new a(function (t) {\n        t(e.value);\n      }).then(o, p);\n    }\n    u((r = r.apply(e, t || [])).next());\n  });\n}\nfunction __generator(e, t) {\n  var a,\n    r,\n    n,\n    s,\n    o = {\n      label: 0,\n      sent: function () {\n        if (1 & n[0]) throw n[1];\n        return n[1];\n      },\n      trys: [],\n      ops: []\n    };\n  return s = {\n    next: p(0),\n    throw: p(1),\n    return: p(2)\n  }, \"function\" == typeof Symbol && (s[Symbol.iterator] = function () {\n    return this;\n  }), s;\n  function p(s) {\n    return function (p) {\n      return function (s) {\n        if (a) throw new TypeError(\"Generator is already executing.\");\n        for (; o;) try {\n          if (a = 1, r && (n = 2 & s[0] ? r.return : s[0] ? r.throw || ((n = r.return) && n.call(r), 0) : r.next) && !(n = n.call(r, s[1])).done) return n;\n          switch (r = 0, n && (s = [2 & s[0], n.value]), s[0]) {\n            case 0:\n            case 1:\n              n = s;\n              break;\n            case 4:\n              return o.label++, {\n                value: s[1],\n                done: !1\n              };\n            case 5:\n              o.label++, r = s[1], s = [0];\n              continue;\n            case 7:\n              s = o.ops.pop(), o.trys.pop();\n              continue;\n            default:\n              if (!(n = (n = o.trys).length > 0 && n[n.length - 1]) && (6 === s[0] || 2 === s[0])) {\n                o = 0;\n                continue;\n              }\n              if (3 === s[0] && (!n || s[1] > n[0] && s[1] < n[3])) {\n                o.label = s[1];\n                break;\n              }\n              if (6 === s[0] && o.label < n[1]) {\n                o.label = n[1], n = s;\n                break;\n              }\n              if (n && o.label < n[2]) {\n                o.label = n[2], o.ops.push(s);\n                break;\n              }\n              n[2] && o.ops.pop(), o.trys.pop();\n              continue;\n          }\n          s = t.call(e, o);\n        } catch (e) {\n          s = [6, e], r = 0;\n        } finally {\n          a = n = 0;\n        }\n        if (5 & s[0]) throw s[1];\n        return {\n          value: s[0] ? s[1] : void 0,\n          done: !0\n        };\n      }([s, p]);\n    };\n  }\n}\n!function (e) {\n  e[e.DT_INVALID = 0] = \"DT_INVALID\", e[e.DT_FLOAT = 1] = \"DT_FLOAT\", e[e.DT_DOUBLE = 2] = \"DT_DOUBLE\", e[e.DT_INT32 = 3] = \"DT_INT32\", e[e.DT_UINT8 = 4] = \"DT_UINT8\", e[e.DT_INT16 = 5] = \"DT_INT16\", e[e.DT_INT8 = 6] = \"DT_INT8\", e[e.DT_STRING = 7] = \"DT_STRING\", e[e.DT_COMPLEX64 = 8] = \"DT_COMPLEX64\", e[e.DT_INT64 = 9] = \"DT_INT64\", e[e.DT_BOOL = 10] = \"DT_BOOL\", e[e.DT_QINT8 = 11] = \"DT_QINT8\", e[e.DT_QUINT8 = 12] = \"DT_QUINT8\", e[e.DT_QINT32 = 13] = \"DT_QINT32\", e[e.DT_BFLOAT16 = 14] = \"DT_BFLOAT16\", e[e.DT_FLOAT_REF = 101] = \"DT_FLOAT_REF\", e[e.DT_DOUBLE_REF = 102] = \"DT_DOUBLE_REF\", e[e.DT_INT32_REF = 103] = \"DT_INT32_REF\", e[e.DT_UINT8_REF = 104] = \"DT_UINT8_REF\", e[e.DT_INT16_REF = 105] = \"DT_INT16_REF\", e[e.DT_INT8_REF = 106] = \"DT_INT8_REF\", e[e.DT_STRING_REF = 107] = \"DT_STRING_REF\", e[e.DT_COMPLEX64_REF = 108] = \"DT_COMPLEX64_REF\", e[e.DT_INT64_REF = 109] = \"DT_INT64_REF\", e[e.DT_BOOL_REF = 110] = \"DT_BOOL_REF\", e[e.DT_QINT8_REF = 111] = \"DT_QINT8_REF\", e[e.DT_QUINT8_REF = 112] = \"DT_QUINT8_REF\", e[e.DT_QINT32_REF = 113] = \"DT_QINT32_REF\", e[e.DT_BFLOAT16_REF = 114] = \"DT_BFLOAT16_REF\";\n}(DataType || (DataType = {})), function (e) {\n  !function (e) {\n    e[e.LEGACY = 0] = \"LEGACY\", e[e.V1 = 1] = \"V1\", e[e.V2 = 2] = \"V2\";\n  }(e.CheckpointFormatVersion || (e.CheckpointFormatVersion = {}));\n}(SaverDef || (SaverDef = {}));\nvar CUSTOM_OPS = {};\nfunction registerOp(e, t) {\n  var a = {\n    tfOpName: e,\n    category: \"custom\",\n    inputs: [],\n    attrs: [],\n    customExecutor: t\n  };\n  CUSTOM_OPS[e] = a;\n}\nfunction getRegisteredOp(e) {\n  return CUSTOM_OPS[e];\n}\nfunction deregisterOp(e) {\n  delete CUSTOM_OPS[e];\n}\nfunction getParamValue(e, t, a, r) {\n  var n = t.inputParams[e];\n  if (n && void 0 !== n.inputIndexStart) {\n    var s = n.inputIndexStart,\n      o = 0 === n.inputIndexEnd ? void 0 : void 0 === n.inputIndexEnd ? s + 1 : n.inputIndexEnd;\n    if (\"tensor\" === n.type) return getTensor(t.inputNames[n.inputIndexStart], a, r);\n    if (\"tensors\" === n.type) return t.inputNames.slice(s, o).map(function (e) {\n      return getTensor(e, a, r);\n    });\n    var p = Array.prototype.slice.call(getTensor(t.inputNames.slice(s)[0], a, r).dataSync());\n    return \"number\" === n.type ? p[0] : p;\n  }\n  var u = t.attrParams[e];\n  return u && u.value;\n}\nfunction getTensor(e, t, a) {\n  var r = parseNodeName(e),\n    n = r[0],\n    s = r[1],\n    o = a.currentContextIds.find(function (e) {\n      return !!t[getNodeNameWithContextId(n, e)];\n    });\n  return void 0 !== o ? t[getNodeNameWithContextId(n, o)][s] : void 0;\n}\nfunction getTensorsForCurrentContenxt(e, t, a) {\n  return t[getNodeNameWithContextId(e, a.currentContextId)];\n}\nfunction getNodeNameAndIndex(e, t) {\n  var a = parseNodeName(e),\n    r = a[0],\n    n = a[1];\n  return [getNodeNameWithContextId(r, t && t.currentContextId), n];\n}\nfunction getNodeNameWithContextId(e, t) {\n  return t ? e + \"-\" + t : e;\n}\nfunction parseNodeName(e) {\n  var t = e.lastIndexOf(\":\");\n  return -1 === t ? [e, 0] : [e.substring(0, t), Number(e.substring(t + 1))];\n}\nfunction split$1(e, t) {\n  for (var a = [], r = 0; r < e.length; r += t) a.push(e.slice(r, r + t));\n  return a;\n}\nvar json = [{\n    tfOpName: \"Add\",\n    category: \"arithmetic\",\n    inputs: [{\n      start: 0,\n      name: \"a\",\n      type: \"tensor\"\n    }, {\n      start: 1,\n      name: \"b\",\n      type: \"tensor\"\n    }],\n    attrs: [{\n      tfName: \"T\",\n      name: \"dtype\",\n      type: \"dtype\",\n      notSupported: !0\n    }]\n  }, {\n    tfOpName: \"AddV2\",\n    category: \"arithmetic\",\n    inputs: [{\n      start: 0,\n      name: \"a\",\n      type: \"tensor\"\n    }, {\n      start: 1,\n      name: \"b\",\n      type: \"tensor\"\n    }],\n    attrs: [{\n      tfName: \"T\",\n      name: \"dtype\",\n      type: \"dtype\",\n      notSupported: !0\n    }]\n  }, {\n    tfOpName: \"AddN\",\n    category: \"arithmetic\",\n    inputs: [{\n      start: 0,\n      end: 0,\n      name: \"tensors\",\n      type: \"tensors\"\n    }]\n  }, {\n    tfOpName: \"BiasAdd\",\n    category: \"arithmetic\",\n    inputs: [{\n      start: 0,\n      name: \"a\",\n      type: \"tensor\"\n    }, {\n      start: 1,\n      name: \"b\",\n      type: \"tensor\"\n    }],\n    attrs: [{\n      tfName: \"T\",\n      name: \"dtype\",\n      type: \"dtype\",\n      notSupported: !0\n    }]\n  }, {\n    tfOpName: \"Sub\",\n    category: \"arithmetic\",\n    inputs: [{\n      start: 0,\n      name: \"a\",\n      type: \"tensor\"\n    }, {\n      start: 1,\n      name: \"b\",\n      type: \"tensor\"\n    }],\n    attrs: [{\n      tfName: \"T\",\n      name: \"dtype\",\n      type: \"dtype\",\n      notSupported: !0\n    }]\n  }, {\n    tfOpName: \"RealDiv\",\n    category: \"arithmetic\",\n    inputs: [{\n      start: 0,\n      name: \"a\",\n      type: \"tensor\"\n    }, {\n      start: 1,\n      name: \"b\",\n      type: \"tensor\"\n    }],\n    attrs: [{\n      tfName: \"T\",\n      name: \"dtype\",\n      type: \"dtype\",\n      notSupported: !0\n    }]\n  }, {\n    tfOpName: \"Div\",\n    category: \"arithmetic\",\n    inputs: [{\n      start: 0,\n      name: \"a\",\n      type: \"tensor\"\n    }, {\n      start: 1,\n      name: \"b\",\n      type: \"tensor\"\n    }],\n    attrs: [{\n      tfName: \"T\",\n      name: \"dtype\",\n      type: \"dtype\",\n      notSupported: !0\n    }]\n  }, {\n    tfOpName: \"FloorDiv\",\n    category: \"arithmetic\",\n    inputs: [{\n      start: 0,\n      name: \"a\",\n      type: \"tensor\"\n    }, {\n      start: 1,\n      name: \"b\",\n      type: \"tensor\"\n    }],\n    attrs: [{\n      tfName: \"T\",\n      name: \"dtype\",\n      type: \"dtype\",\n      notSupported: !0\n    }]\n  }, {\n    tfOpName: \"Mul\",\n    category: \"arithmetic\",\n    inputs: [{\n      start: 0,\n      name: \"a\",\n      type: \"tensor\"\n    }, {\n      start: 1,\n      name: \"b\",\n      type: \"tensor\"\n    }],\n    attrs: [{\n      tfName: \"T\",\n      name: \"dtype\",\n      type: \"dtype\",\n      notSupported: !0\n    }]\n  }, {\n    tfOpName: \"Maximum\",\n    category: \"arithmetic\",\n    inputs: [{\n      start: 0,\n      name: \"a\",\n      type: \"tensor\"\n    }, {\n      start: 1,\n      name: \"b\",\n      type: \"tensor\"\n    }]\n  }, {\n    tfOpName: \"Minimum\",\n    category: \"arithmetic\",\n    inputs: [{\n      start: 0,\n      name: \"a\",\n      type: \"tensor\"\n    }, {\n      start: 1,\n      name: \"b\",\n      type: \"tensor\"\n    }]\n  }, {\n    tfOpName: \"Pow\",\n    category: \"arithmetic\",\n    inputs: [{\n      start: 0,\n      name: \"a\",\n      type: \"tensor\"\n    }, {\n      start: 1,\n      name: \"b\",\n      type: \"tensor\"\n    }],\n    attrs: [{\n      tfName: \"T\",\n      name: \"dtype\",\n      type: \"dtype\",\n      notSupported: !0\n    }]\n  }, {\n    tfOpName: \"SquaredDifference\",\n    category: \"arithmetic\",\n    inputs: [{\n      start: 0,\n      name: \"a\",\n      type: \"tensor\"\n    }, {\n      start: 1,\n      name: \"b\",\n      type: \"tensor\"\n    }],\n    attrs: [{\n      tfName: \"T\",\n      name: \"dtype\",\n      type: \"dtype\",\n      notSupported: !0\n    }]\n  }, {\n    tfOpName: \"Mod\",\n    category: \"arithmetic\",\n    inputs: [{\n      start: 0,\n      name: \"a\",\n      type: \"tensor\"\n    }, {\n      start: 1,\n      name: \"b\",\n      type: \"tensor\"\n    }],\n    attrs: [{\n      tfName: \"T\",\n      name: \"dtype\",\n      type: \"dtype\",\n      notSupported: !0\n    }]\n  }, {\n    tfOpName: \"FloorMod\",\n    category: \"arithmetic\",\n    inputs: [{\n      start: 0,\n      name: \"a\",\n      type: \"tensor\"\n    }, {\n      start: 1,\n      name: \"b\",\n      type: \"tensor\"\n    }],\n    attrs: [{\n      tfName: \"T\",\n      name: \"dtype\",\n      type: \"dtype\",\n      notSupported: !0\n    }]\n  }],\n  arithmetic = Object.freeze({\n    json: json\n  }),\n  json$1 = [{\n    tfOpName: \"Abs\",\n    category: \"basic_math\",\n    inputs: [{\n      start: 0,\n      name: \"x\",\n      type: \"tensor\"\n    }],\n    attrs: [{\n      tfName: \"T\",\n      name: \"dtype\",\n      type: \"dtype\",\n      notSupported: !0\n    }]\n  }, {\n    tfOpName: \"Acos\",\n    category: \"basic_math\",\n    inputs: [{\n      start: 0,\n      name: \"x\",\n      type: \"tensor\"\n    }],\n    attrs: [{\n      tfName: \"T\",\n      name: \"dtype\",\n      type: \"dtype\",\n      notSupported: !0\n    }]\n  }, {\n    tfOpName: \"Asin\",\n    category: \"basic_math\",\n    inputs: [{\n      start: 0,\n      name: \"x\",\n      type: \"tensor\"\n    }],\n    attrs: [{\n      tfName: \"T\",\n      name: \"dtype\",\n      type: \"dtype\",\n      notSupported: !0\n    }]\n  }, {\n    tfOpName: \"Atan\",\n    category: \"basic_math\",\n    inputs: [{\n      start: 0,\n      name: \"x\",\n      type: \"tensor\"\n    }],\n    attrs: [{\n      tfName: \"T\",\n      name: \"dtype\",\n      type: \"dtype\",\n      notSupported: !0\n    }]\n  }, {\n    tfOpName: \"Atan2\",\n    category: \"basic_math\",\n    inputs: [{\n      start: 0,\n      name: \"x\",\n      type: \"tensor\"\n    }, {\n      start: 1,\n      name: \"y\",\n      type: \"tensor\"\n    }],\n    attrs: [{\n      tfName: \"T\",\n      name: \"dtype\",\n      type: \"dtype\",\n      notSupported: !0\n    }]\n  }, {\n    tfOpName: \"Ceil\",\n    category: \"basic_math\",\n    inputs: [{\n      start: 0,\n      name: \"x\",\n      type: \"tensor\"\n    }],\n    attrs: [{\n      tfName: \"T\",\n      name: \"dtype\",\n      type: \"dtype\",\n      notSupported: !0\n    }]\n  }, {\n    tfOpName: \"ClipByValue\",\n    category: \"basic_math\",\n    inputs: [{\n      start: 0,\n      name: \"x\",\n      type: \"tensor\"\n    }],\n    attrs: [{\n      tfName: \"clip_value_min\",\n      name: \"clipValueMin\",\n      type: \"number\"\n    }, {\n      tfName: \"clip_value_max\",\n      name: \"clipValueMax\",\n      type: \"number\"\n    }]\n  }, {\n    tfOpName: \"Complex\",\n    category: \"basic_math\",\n    inputs: [{\n      start: 0,\n      name: \"real\",\n      type: \"tensor\"\n    }, {\n      start: 1,\n      name: \"imag\",\n      type: \"tensor\"\n    }],\n    attrs: [{\n      tfName: \"T\",\n      name: \"dtype\",\n      type: \"dtype\",\n      notSupported: !0\n    }]\n  }, {\n    tfOpName: \"ComplexAbs\",\n    category: \"basic_math\",\n    inputs: [{\n      start: 0,\n      name: \"x\",\n      type: \"tensor\"\n    }],\n    attrs: [{\n      tfName: \"T\",\n      name: \"dtype\",\n      type: \"dtype\",\n      notSupported: !0\n    }]\n  }, {\n    tfOpName: \"Cos\",\n    category: \"basic_math\",\n    inputs: [{\n      start: 0,\n      name: \"x\",\n      type: \"tensor\"\n    }],\n    attrs: [{\n      tfName: \"T\",\n      name: \"dtype\",\n      type: \"dtype\",\n      notSupported: !0\n    }]\n  }, {\n    tfOpName: \"Cosh\",\n    category: \"basic_math\",\n    inputs: [{\n      start: 0,\n      name: \"x\",\n      type: \"tensor\"\n    }],\n    attrs: [{\n      tfName: \"T\",\n      name: \"dtype\",\n      type: \"dtype\",\n      notSupported: !0\n    }]\n  }, {\n    tfOpName: \"Elu\",\n    category: \"basic_math\",\n    inputs: [{\n      start: 0,\n      name: \"x\",\n      type: \"tensor\"\n    }],\n    attrs: [{\n      tfName: \"T\",\n      name: \"dtype\",\n      type: \"dtype\",\n      notSupported: !0\n    }]\n  }, {\n    tfOpName: \"Exp\",\n    category: \"basic_math\",\n    inputs: [{\n      start: 0,\n      name: \"x\",\n      type: \"tensor\"\n    }],\n    attrs: [{\n      tfName: \"T\",\n      name: \"dtype\",\n      type: \"dtype\",\n      notSupported: !0\n    }]\n  }, {\n    tfOpName: \"Floor\",\n    category: \"basic_math\",\n    inputs: [{\n      start: 0,\n      name: \"x\",\n      type: \"tensor\"\n    }],\n    attrs: [{\n      tfName: \"T\",\n      name: \"dtype\",\n      type: \"dtype\",\n      notSupported: !0\n    }]\n  }, {\n    tfOpName: \"Log\",\n    category: \"basic_math\",\n    inputs: [{\n      start: 0,\n      name: \"x\",\n      type: \"tensor\"\n    }],\n    attrs: [{\n      tfName: \"T\",\n      name: \"dtype\",\n      type: \"dtype\",\n      notSupported: !0\n    }]\n  }, {\n    tfOpName: \"Imag\",\n    category: \"basic_math\",\n    inputs: [{\n      start: 0,\n      name: \"x\",\n      type: \"tensor\"\n    }],\n    attrs: [{\n      tfName: \"T\",\n      name: \"dtype\",\n      type: \"dtype\",\n      notSupported: !0\n    }, {\n      tfName: \"Tout\",\n      name: \"outputType\",\n      type: \"dtype\",\n      notSupported: !0\n    }]\n  }, {\n    tfOpName: \"Neg\",\n    category: \"basic_math\",\n    inputs: [{\n      start: 0,\n      name: \"x\",\n      type: \"tensor\"\n    }],\n    attrs: [{\n      tfName: \"T\",\n      name: \"dtype\",\n      type: \"dtype\",\n      notSupported: !0\n    }]\n  }, {\n    tfOpName: \"Real\",\n    category: \"basic_math\",\n    inputs: [{\n      start: 0,\n      name: \"x\",\n      type: \"tensor\"\n    }],\n    attrs: [{\n      tfName: \"T\",\n      name: \"dtype\",\n      type: \"dtype\",\n      notSupported: !0\n    }, {\n      tfName: \"Tout\",\n      name: \"outputType\",\n      type: \"dtype\",\n      notSupported: !0\n    }]\n  }, {\n    tfOpName: \"Prelu\",\n    category: \"basic_math\",\n    inputs: [{\n      start: 0,\n      name: \"x\",\n      type: \"tensor\"\n    }, {\n      start: 1,\n      name: \"alpha\",\n      type: \"tensor\"\n    }],\n    attrs: [{\n      tfName: \"T\",\n      name: \"dtype\",\n      type: \"dtype\",\n      notSupported: !0\n    }]\n  }, {\n    tfOpName: \"Relu\",\n    category: \"basic_math\",\n    inputs: [{\n      start: 0,\n      name: \"x\",\n      type: \"tensor\"\n    }],\n    attrs: [{\n      tfName: \"T\",\n      name: \"dtype\",\n      type: \"dtype\",\n      notSupported: !0\n    }]\n  }, {\n    tfOpName: \"Relu6\",\n    category: \"basic_math\",\n    inputs: [{\n      start: 0,\n      name: \"x\",\n      type: \"tensor\"\n    }],\n    attrs: [{\n      tfName: \"T\",\n      name: \"dtype\",\n      type: \"dtype\",\n      notSupported: !0\n    }, {\n      tfName: \"clipValueMin\",\n      name: \"clipValueMin\",\n      type: \"number\",\n      defaultValue: 0\n    }, {\n      tfName: \"clipValueMax\",\n      name: \"clipValueMax\",\n      type: \"number\",\n      defaultValue: 6\n    }]\n  }, {\n    tfOpName: \"Selu\",\n    category: \"basic_math\",\n    inputs: [{\n      start: 0,\n      name: \"x\",\n      type: \"tensor\"\n    }],\n    attrs: [{\n      tfName: \"T\",\n      name: \"dtype\",\n      type: \"dtype\",\n      notSupported: !0\n    }]\n  }, {\n    tfOpName: \"Sigmoid\",\n    category: \"basic_math\",\n    inputs: [{\n      start: 0,\n      name: \"x\",\n      type: \"tensor\"\n    }],\n    attrs: [{\n      tfName: \"T\",\n      name: \"dtype\",\n      type: \"dtype\",\n      notSupported: !0\n    }]\n  }, {\n    tfOpName: \"Sin\",\n    category: \"basic_math\",\n    inputs: [{\n      start: 0,\n      name: \"x\",\n      type: \"tensor\"\n    }],\n    attrs: [{\n      tfName: \"T\",\n      name: \"dtype\",\n      type: \"dtype\",\n      notSupported: !0\n    }]\n  }, {\n    tfOpName: \"Sinh\",\n    category: \"basic_math\",\n    inputs: [{\n      start: 0,\n      name: \"x\",\n      type: \"tensor\"\n    }],\n    attrs: [{\n      tfName: \"T\",\n      name: \"dtype\",\n      type: \"dtype\",\n      notSupported: !0\n    }]\n  }, {\n    tfOpName: \"Sqrt\",\n    category: \"basic_math\",\n    inputs: [{\n      start: 0,\n      name: \"x\",\n      type: \"tensor\"\n    }],\n    attrs: [{\n      tfName: \"T\",\n      name: \"dtype\",\n      type: \"dtype\",\n      notSupported: !0\n    }]\n  }, {\n    tfOpName: \"Rsqrt\",\n    category: \"basic_math\",\n    inputs: [{\n      start: 0,\n      name: \"x\",\n      type: \"tensor\"\n    }],\n    attrs: [{\n      tfName: \"T\",\n      name: \"dtype\",\n      type: \"dtype\",\n      notSupported: !0\n    }]\n  }, {\n    tfOpName: \"Square\",\n    category: \"basic_math\",\n    inputs: [{\n      start: 0,\n      name: \"x\",\n      type: \"tensor\"\n    }],\n    attrs: [{\n      tfName: \"T\",\n      name: \"dtype\",\n      type: \"dtype\",\n      notSupported: !0\n    }]\n  }, {\n    tfOpName: \"Tan\",\n    category: \"basic_math\",\n    inputs: [{\n      start: 0,\n      name: \"x\",\n      type: \"tensor\"\n    }],\n    attrs: [{\n      tfName: \"T\",\n      name: \"dtype\",\n      type: \"dtype\",\n      notSupported: !0\n    }]\n  }, {\n    tfOpName: \"Tanh\",\n    category: \"basic_math\",\n    inputs: [{\n      start: 0,\n      name: \"x\",\n      type: \"tensor\"\n    }],\n    attrs: [{\n      tfName: \"T\",\n      name: \"dtype\",\n      type: \"dtype\",\n      notSupported: !0\n    }]\n  }, {\n    tfOpName: \"Sign\",\n    category: \"basic_math\",\n    inputs: [{\n      start: 0,\n      name: \"x\",\n      type: \"tensor\"\n    }],\n    attrs: [{\n      tfName: \"T\",\n      name: \"dtype\",\n      type: \"dtype\",\n      notSupported: !0\n    }]\n  }, {\n    tfOpName: \"Round\",\n    category: \"basic_math\",\n    inputs: [{\n      start: 0,\n      name: \"x\",\n      type: \"tensor\"\n    }],\n    attrs: [{\n      tfName: \"T\",\n      name: \"dtype\",\n      type: \"dtype\",\n      notSupported: !0\n    }]\n  }, {\n    tfOpName: \"Expm1\",\n    category: \"basic_math\",\n    inputs: [{\n      start: 0,\n      name: \"x\",\n      type: \"tensor\"\n    }],\n    attrs: [{\n      tfName: \"T\",\n      name: \"dtype\",\n      type: \"dtype\",\n      notSupported: !0\n    }]\n  }, {\n    tfOpName: \"Log1p\",\n    category: \"basic_math\",\n    inputs: [{\n      start: 0,\n      name: \"x\",\n      type: \"tensor\"\n    }],\n    attrs: [{\n      tfName: \"T\",\n      name: \"dtype\",\n      type: \"dtype\",\n      notSupported: !0\n    }]\n  }, {\n    tfOpName: \"Reciprocal\",\n    category: \"basic_math\",\n    inputs: [{\n      start: 0,\n      name: \"x\",\n      type: \"tensor\"\n    }],\n    attrs: [{\n      tfName: \"T\",\n      name: \"dtype\",\n      type: \"dtype\",\n      notSupported: !0\n    }]\n  }, {\n    tfOpName: \"Softplus\",\n    category: \"basic_math\",\n    inputs: [{\n      start: 0,\n      name: \"x\",\n      type: \"tensor\"\n    }],\n    attrs: [{\n      tfName: \"T\",\n      name: \"dtype\",\n      type: \"dtype\",\n      notSupported: !0\n    }]\n  }, {\n    tfOpName: \"Asinh\",\n    category: \"basic_math\",\n    inputs: [{\n      start: 0,\n      name: \"x\",\n      type: \"tensor\"\n    }],\n    attrs: [{\n      tfName: \"T\",\n      name: \"dtype\",\n      type: \"dtype\",\n      notSupported: !0\n    }]\n  }, {\n    tfOpName: \"Acosh\",\n    category: \"basic_math\",\n    inputs: [{\n      start: 0,\n      name: \"x\",\n      type: \"tensor\"\n    }],\n    attrs: [{\n      tfName: \"T\",\n      name: \"dtype\",\n      type: \"dtype\",\n      notSupported: !0\n    }]\n  }, {\n    tfOpName: \"Atanh\",\n    category: \"basic_math\",\n    inputs: [{\n      start: 0,\n      name: \"x\",\n      type: \"tensor\"\n    }],\n    attrs: [{\n      tfName: \"T\",\n      name: \"dtype\",\n      type: \"dtype\",\n      notSupported: !0\n    }]\n  }, {\n    tfOpName: \"Erf\",\n    category: \"basic_math\",\n    inputs: [{\n      start: 0,\n      name: \"x\",\n      type: \"tensor\"\n    }],\n    attrs: [{\n      tfName: \"T\",\n      name: \"dtype\",\n      type: \"dtype\",\n      notSupported: !0\n    }]\n  }, {\n    tfOpName: \"Prod\",\n    category: \"basic_math\",\n    inputs: [{\n      start: 0,\n      name: \"x\",\n      type: \"tensor\"\n    }, {\n      start: 1,\n      name: \"axes\",\n      type: \"number[]\"\n    }],\n    attrs: [{\n      tfName: \"keep_dims\",\n      name: \"keepDims\",\n      type: \"bool\",\n      notSupported: !0\n    }, {\n      tfName: \"T\",\n      name: \"dtype\",\n      type: \"dtype\",\n      notSupported: !0\n    }]\n  }, {\n    tfOpName: \"LeakyRelu\",\n    category: \"basic_math\",\n    inputs: [{\n      start: 0,\n      name: \"x\",\n      type: \"tensor\"\n    }],\n    attrs: [{\n      tfName: \"alpha\",\n      name: \"alpha\",\n      type: \"number\",\n      defaultValue: .2\n    }, {\n      tfName: \"T\",\n      name: \"dtype\",\n      type: \"dtype\",\n      notSupported: !0\n    }]\n  }],\n  basicMath = Object.freeze({\n    json: json$1\n  }),\n  json$2 = [{\n    tfOpName: \"LoopCond\",\n    category: \"control\",\n    inputs: [{\n      start: 0,\n      name: \"pred\",\n      type: \"tensor\"\n    }]\n  }, {\n    tfOpName: \"Switch\",\n    category: \"control\",\n    inputs: [{\n      start: 0,\n      name: \"data\",\n      type: \"tensor\"\n    }, {\n      start: 1,\n      name: \"pred\",\n      type: \"tensor\"\n    }]\n  }, {\n    tfOpName: \"Merge\",\n    category: \"control\",\n    inputs: [{\n      start: 0,\n      end: 0,\n      name: \"tensors\",\n      type: \"tensors\"\n    }]\n  }, {\n    tfOpName: \"Enter\",\n    category: \"control\",\n    inputs: [{\n      start: 0,\n      name: \"tensor\",\n      type: \"tensor\"\n    }],\n    attrs: [{\n      tfName: \"T\",\n      name: \"dtype\",\n      type: \"dtype\",\n      notSupported: !0\n    }, {\n      tfName: \"frame_name\",\n      name: \"frameName\",\n      type: \"string\"\n    }, {\n      tfName: \"is_constant\",\n      name: \"isConstant\",\n      type: \"bool\"\n    }]\n  }, {\n    tfOpName: \"Exit\",\n    category: \"control\",\n    inputs: [{\n      start: 0,\n      name: \"tensor\",\n      type: \"tensor\"\n    }],\n    attrs: [{\n      tfName: \"T\",\n      name: \"dtype\",\n      type: \"dtype\",\n      notSupported: !0\n    }]\n  }, {\n    tfOpName: \"NextIteration\",\n    category: \"control\",\n    inputs: [{\n      start: 0,\n      name: \"tensor\",\n      type: \"tensor\"\n    }],\n    attrs: [{\n      tfName: \"T\",\n      name: \"dtype\",\n      type: \"dtype\",\n      notSupported: !0\n    }]\n  }, {\n    tfOpName: \"TensorArrayV3\",\n    category: \"control\",\n    inputs: [{\n      start: 0,\n      name: \"size\",\n      type: \"number\"\n    }],\n    attrs: [{\n      tfName: \"dtype\",\n      name: \"dtype\",\n      type: \"dtype\"\n    }, {\n      tfName: \"element_shape\",\n      name: \"elementShape\",\n      type: \"shape\"\n    }, {\n      tfName: \"dynamic_size\",\n      name: \"dynamicSize\",\n      type: \"bool\"\n    }, {\n      tfName: \"clear_after_read\",\n      name: \"clearAfterRead\",\n      type: \"bool\"\n    }, {\n      tfName: \"identical_element_shapes\",\n      name: \"identicalElementShapes\",\n      type: \"bool\"\n    }, {\n      tfName: \"tensor_array_name\",\n      name: \"name\",\n      type: \"string\"\n    }]\n  }, {\n    tfOpName: \"TensorArrayWriteV3\",\n    category: \"control\",\n    inputs: [{\n      start: 0,\n      name: \"tensorArrayId\",\n      type: \"number\"\n    }, {\n      start: 1,\n      name: \"index\",\n      type: \"number\"\n    }, {\n      start: 2,\n      name: \"tensor\",\n      type: \"tensor\"\n    }, {\n      start: 3,\n      name: \"flowIn\",\n      type: \"number\"\n    }],\n    attrs: [{\n      tfName: \"T\",\n      name: \"dtype\",\n      type: \"dtype\",\n      notSupported: !0\n    }]\n  }, {\n    tfOpName: \"TensorArrayReadV3\",\n    category: \"control\",\n    inputs: [{\n      start: 0,\n      name: \"tensorArrayId\",\n      type: \"number\"\n    }, {\n      start: 1,\n      name: \"index\",\n      type: \"number\"\n    }, {\n      start: 2,\n      name: \"flowIn\",\n      type: \"number\"\n    }],\n    attrs: [{\n      tfName: \"dtype\",\n      name: \"dtype\",\n      type: \"dtype\",\n      notSupported: !0\n    }]\n  }, {\n    tfOpName: \"TensorArrayGatherV3\",\n    category: \"control\",\n    inputs: [{\n      start: 0,\n      name: \"tensorArrayId\",\n      type: \"number\"\n    }, {\n      start: 1,\n      name: \"indices\",\n      type: \"number[]\"\n    }, {\n      start: 2,\n      name: \"flowIn\",\n      type: \"number\"\n    }],\n    attrs: [{\n      tfName: \"dtype\",\n      name: \"dtype\",\n      type: \"dtype\"\n    }, {\n      tfName: \"element_shape\",\n      name: \"elementShape\",\n      type: \"shape\"\n    }]\n  }, {\n    tfOpName: \"TensorArrayScatterV3\",\n    category: \"control\",\n    inputs: [{\n      start: 0,\n      name: \"tensorArrayId\",\n      type: \"number\"\n    }, {\n      start: 1,\n      name: \"indices\",\n      type: \"number[]\"\n    }, {\n      start: 2,\n      name: \"tensor\",\n      type: \"tensor\"\n    }, {\n      start: 3,\n      name: \"flowIn\",\n      type: \"number\"\n    }],\n    attrs: [{\n      tfName: \"T\",\n      name: \"dtype\",\n      type: \"dtype\"\n    }]\n  }, {\n    tfOpName: \"TensorArrayConcatV3\",\n    category: \"control\",\n    inputs: [{\n      start: 0,\n      name: \"tensorArrayId\",\n      type: \"number\"\n    }, {\n      start: 1,\n      name: \"flowIn\",\n      type: \"number\"\n    }],\n    attrs: [{\n      tfName: \"dtype\",\n      name: \"dtype\",\n      type: \"dtype\"\n    }, {\n      tfName: \"element_shape_except0\",\n      name: \"elementShapeExcept0\",\n      type: \"shape\",\n      notSupported: !0\n    }]\n  }, {\n    tfOpName: \"TensorArraySplitV3\",\n    category: \"control\",\n    inputs: [{\n      start: 0,\n      name: \"tensorArrayId\",\n      type: \"number\"\n    }, {\n      start: 1,\n      name: \"tensor\",\n      type: \"tensor\"\n    }, {\n      start: 2,\n      name: \"lengths\",\n      type: \"number[]\"\n    }, {\n      start: 3,\n      name: \"flowIn\",\n      type: \"number\"\n    }],\n    attrs: [{\n      tfName: \"T\",\n      name: \"dtype\",\n      type: \"dtype\"\n    }]\n  }, {\n    tfOpName: \"TensorArraySizeV3\",\n    category: \"control\",\n    inputs: [{\n      start: 0,\n      name: \"tensorArrayId\",\n      type: \"number\"\n    }, {\n      start: 1,\n      name: \"flowIn\",\n      type: \"number\"\n    }]\n  }, {\n    tfOpName: \"TensorArrayCloseV3\",\n    category: \"control\",\n    inputs: [{\n      start: 0,\n      name: \"tensorArrayId\",\n      type: \"number\"\n    }]\n  }],\n  control = Object.freeze({\n    json: json$2\n  }),\n  json$3 = [{\n    tfOpName: \"AvgPool\",\n    category: \"convolution\",\n    inputs: [{\n      start: 0,\n      name: \"x\",\n      type: \"tensor\"\n    }],\n    attrs: [{\n      tfName: \"strides\",\n      name: \"strides\",\n      type: \"number[]\"\n    }, {\n      tfName: \"padding\",\n      name: \"pad\",\n      type: \"string\"\n    }, {\n      tfName: \"data_format\",\n      name: \"dataFormat\",\n      type: \"string\",\n      notSupported: !0\n    }, {\n      tfName: \"ksize\",\n      name: \"kernelSize\",\n      type: \"number[]\"\n    }, {\n      tfName: \"T\",\n      name: \"dtype\",\n      type: \"dtype\",\n      notSupported: !0\n    }]\n  }, {\n    tfOpName: \"MaxPool\",\n    category: \"convolution\",\n    inputs: [{\n      start: 0,\n      name: \"x\",\n      type: \"tensor\"\n    }],\n    attrs: [{\n      tfName: \"strides\",\n      name: \"strides\",\n      type: \"number[]\"\n    }, {\n      tfName: \"padding\",\n      name: \"pad\",\n      type: \"string\"\n    }, {\n      tfName: \"data_format\",\n      name: \"dataFormat\",\n      type: \"string\",\n      notSupported: !0\n    }, {\n      tfName: \"ksize\",\n      name: \"kernelSize\",\n      type: \"number[]\"\n    }, {\n      tfName: \"T\",\n      name: \"dtype\",\n      type: \"dtype\",\n      notSupported: !0\n    }]\n  }, {\n    tfOpName: \"AvgPool3D\",\n    category: \"convolution\",\n    inputs: [{\n      start: 0,\n      name: \"x\",\n      type: \"tensor\"\n    }],\n    attrs: [{\n      tfName: \"strides\",\n      name: \"strides\",\n      type: \"number[]\"\n    }, {\n      tfName: \"padding\",\n      name: \"pad\",\n      type: \"string\"\n    }, {\n      tfName: \"data_format\",\n      name: \"dataFormat\",\n      type: \"string\",\n      notSupported: !0\n    }, {\n      tfName: \"ksize\",\n      name: \"kernelSize\",\n      type: \"number[]\"\n    }, {\n      tfName: \"T\",\n      name: \"dtype\",\n      type: \"dtype\",\n      notSupported: !0\n    }]\n  }, {\n    tfOpName: \"MaxPool3D\",\n    category: \"convolution\",\n    inputs: [{\n      start: 0,\n      name: \"x\",\n      type: \"tensor\"\n    }],\n    attrs: [{\n      tfName: \"strides\",\n      name: \"strides\",\n      type: \"number[]\"\n    }, {\n      tfName: \"padding\",\n      name: \"pad\",\n      type: \"string\"\n    }, {\n      tfName: \"data_format\",\n      name: \"dataFormat\",\n      type: \"string\",\n      notSupported: !0\n    }, {\n      tfName: \"ksize\",\n      name: \"kernelSize\",\n      type: \"number[]\"\n    }, {\n      tfName: \"T\",\n      name: \"dtype\",\n      type: \"dtype\",\n      notSupported: !0\n    }]\n  }, {\n    tfOpName: \"Conv1D\",\n    category: \"convolution\",\n    inputs: [{\n      start: 0,\n      name: \"x\",\n      type: \"tensor\"\n    }, {\n      start: 1,\n      name: \"filter\",\n      type: \"tensor\"\n    }],\n    attrs: [{\n      tfName: \"stride\",\n      name: \"stride\",\n      type: \"number\"\n    }, {\n      tfName: \"padding\",\n      name: \"pad\",\n      type: \"string\"\n    }, {\n      tfName: \"data_format\",\n      name: \"dataFormat\",\n      type: \"string\",\n      defaultValue: \"NWC\"\n    }, {\n      tfName: \"T\",\n      name: \"dtype\",\n      type: \"dtype\",\n      notSupported: !0\n    }, {\n      tfName: \"dilation\",\n      name: \"dilation\",\n      type: \"number\",\n      defaultValue: 1\n    }]\n  }, {\n    tfOpName: \"Conv2D\",\n    category: \"convolution\",\n    inputs: [{\n      start: 0,\n      name: \"x\",\n      type: \"tensor\"\n    }, {\n      start: 1,\n      name: \"filter\",\n      type: \"tensor\"\n    }],\n    attrs: [{\n      tfName: \"T\",\n      name: \"dtype\",\n      type: \"dtype\",\n      notSupported: !0\n    }, {\n      tfName: \"strides\",\n      name: \"strides\",\n      type: \"number[]\"\n    }, {\n      tfName: \"padding\",\n      name: \"pad\",\n      type: \"string\"\n    }, {\n      tfName: \"useCudnnOnGpu\",\n      name: \"useCudnnOnGpu\",\n      type: \"bool\"\n    }, {\n      tfName: \"data_format\",\n      name: \"dataFormat\",\n      type: \"string\",\n      defaultValue: \"NHWC\"\n    }, {\n      tfName: \"dilations\",\n      name: \"dilations\",\n      type: \"number[]\"\n    }]\n  }, {\n    tfOpName: \"_FusedConv2D\",\n    category: \"convolution\",\n    inputs: [{\n      start: 0,\n      name: \"x\",\n      type: \"tensor\"\n    }, {\n      start: 1,\n      name: \"filter\",\n      type: \"tensor\"\n    }, {\n      start: 2,\n      end: 0,\n      name: \"args\",\n      type: \"tensors\"\n    }],\n    attrs: [{\n      tfName: \"num_args\",\n      name: \"numArgs\",\n      type: \"number\"\n    }, {\n      tfName: \"T\",\n      name: \"dtype\",\n      type: \"dtype\",\n      notSupported: !0\n    }, {\n      tfName: \"strides\",\n      name: \"strides\",\n      type: \"number[]\"\n    }, {\n      tfName: \"padding\",\n      name: \"pad\",\n      type: \"string\"\n    }, {\n      tfName: \"explicit_paddings\",\n      name: \"explicitPaddings\",\n      type: \"number[]\",\n      defaultValue: []\n    }, {\n      tfName: \"use_cudnn_on_gpu\",\n      name: \"useCudnnOnGpu\",\n      type: \"bool\",\n      defaultValue: !0\n    }, {\n      tfName: \"data_format\",\n      name: \"dataFormat\",\n      type: \"string\",\n      defaultValue: \"NHWC\"\n    }, {\n      tfName: \"dilations\",\n      name: \"dilations\",\n      type: \"number[]\",\n      defaultValue: [1, 1, 1, 1]\n    }, {\n      tfName: \"fused_ops\",\n      name: \"fusedOps\",\n      type: \"string[]\",\n      defaultValue: []\n    }, {\n      tfName: \"epsilon\",\n      name: \"epsilon\",\n      type: \"number\",\n      defaultValue: 1e-4\n    }]\n  }, {\n    tfOpName: \"Conv2DBackpropInput\",\n    category: \"convolution\",\n    inputs: [{\n      start: 2,\n      name: \"x\",\n      type: \"tensor\"\n    }, {\n      start: 1,\n      name: \"filter\",\n      type: \"tensor\"\n    }, {\n      start: 0,\n      name: \"outputShape\",\n      type: \"number[]\"\n    }],\n    attrs: [{\n      tfName: \"strides\",\n      name: \"strides\",\n      type: \"number[]\"\n    }, {\n      tfName: \"padding\",\n      name: \"pad\",\n      type: \"string\"\n    }, {\n      tfName: \"data_format\",\n      name: \"dataFormat\",\n      type: \"string\",\n      notSupported: !0\n    }]\n  }, {\n    tfOpName: \"DepthwiseConv2d\",\n    category: \"convolution\",\n    inputs: [{\n      start: 0,\n      name: \"input\",\n      type: \"tensor\"\n    }, {\n      start: 1,\n      name: \"filter\",\n      type: \"tensor\"\n    }],\n    attrs: [{\n      tfName: \"strides\",\n      name: \"strides\",\n      type: \"number[]\"\n    }, {\n      tfName: \"padding\",\n      name: \"pad\",\n      type: \"string\"\n    }, {\n      tfName: \"data_format\",\n      name: \"dataFormat\",\n      type: \"string\",\n      defaultValue: \"NHWC\"\n    }, {\n      tfName: \"dilations\",\n      name: \"dilations\",\n      type: \"number[]\"\n    }]\n  }, {\n    tfOpName: \"DepthwiseConv2dNative\",\n    category: \"convolution\",\n    inputs: [{\n      start: 0,\n      name: \"input\",\n      type: \"tensor\"\n    }, {\n      start: 1,\n      name: \"filter\",\n      type: \"tensor\"\n    }],\n    attrs: [{\n      tfName: \"strides\",\n      name: \"strides\",\n      type: \"number[]\"\n    }, {\n      tfName: \"padding\",\n      name: \"pad\",\n      type: \"string\"\n    }, {\n      tfName: \"data_format\",\n      name: \"dataFormat\",\n      type: \"string\",\n      defaultValue: \"NHWC\"\n    }, {\n      tfName: \"dilations\",\n      name: \"dilations\",\n      type: \"number[]\"\n    }]\n  }, {\n    tfOpName: \"Conv3D\",\n    category: \"convolution\",\n    inputs: [{\n      start: 0,\n      name: \"x\",\n      type: \"tensor\"\n    }, {\n      start: 1,\n      name: \"filter\",\n      type: \"tensor\"\n    }],\n    attrs: [{\n      tfName: \"strides\",\n      name: \"strides\",\n      type: \"number[]\"\n    }, {\n      tfName: \"padding\",\n      name: \"pad\",\n      type: \"string\"\n    }, {\n      tfName: \"data_format\",\n      name: \"dataFormat\",\n      type: \"string\",\n      defaultValue: \"NHWC\"\n    }, {\n      tfName: \"dilations\",\n      name: \"dilations\",\n      type: \"number[]\"\n    }]\n  }],\n  convolution = Object.freeze({\n    json: json$3\n  }),\n  json$4 = [{\n    tfOpName: \"Fill\",\n    category: \"creation\",\n    inputs: [{\n      start: 0,\n      name: \"shape\",\n      type: \"number[]\"\n    }, {\n      start: 1,\n      name: \"value\",\n      type: \"number\"\n    }],\n    attrs: [{\n      tfName: \"T\",\n      name: \"dtype\",\n      type: \"dtype\"\n    }]\n  }, {\n    tfOpName: \"LinSpace\",\n    category: \"creation\",\n    inputs: [{\n      start: 0,\n      name: \"start\",\n      type: \"number\"\n    }, {\n      start: 1,\n      name: \"stop\",\n      type: \"number\"\n    }, {\n      start: 2,\n      name: \"num\",\n      type: \"number\"\n    }],\n    attrs: [{\n      tfName: \"T\",\n      name: \"dtype\",\n      type: \"dtype\",\n      notSupported: !0\n    }]\n  }, {\n    tfOpName: \"OneHot\",\n    category: \"creation\",\n    inputs: [{\n      start: 0,\n      name: \"indices\",\n      type: \"tensor\"\n    }, {\n      start: 1,\n      name: \"depth\",\n      type: \"number\"\n    }, {\n      start: 2,\n      name: \"onValue\",\n      type: \"number\",\n      defaultValue: 1\n    }, {\n      start: 3,\n      name: \"offValue\",\n      type: \"number\",\n      defaultValue: 0\n    }],\n    attrs: [{\n      tfName: \"axis\",\n      name: \"axis\",\n      type: \"number\",\n      notSupported: !0\n    }, {\n      tfName: \"T\",\n      name: \"dtype\",\n      type: \"dtype\",\n      notSupported: !0\n    }]\n  }, {\n    tfOpName: \"Ones\",\n    category: \"creation\",\n    inputs: [{\n      start: 0,\n      name: \"shape\",\n      type: \"number[]\"\n    }],\n    attrs: [{\n      tfName: \"T\",\n      name: \"dtype\",\n      type: \"dtype\"\n    }]\n  }, {\n    tfOpName: \"OnesLike\",\n    category: \"creation\",\n    inputs: [{\n      start: 0,\n      name: \"x\",\n      type: \"tensor\"\n    }],\n    attrs: [{\n      tfName: \"dtype\",\n      name: \"dtype\",\n      type: \"dtype\"\n    }]\n  }, {\n    tfOpName: \"RandomUniform\",\n    category: \"creation\",\n    inputs: [{\n      start: 0,\n      name: \"shape\",\n      type: \"number[]\"\n    }],\n    attrs: [{\n      tfName: \"minval\",\n      name: \"minval\",\n      type: \"number\",\n      defaultValue: 0\n    }, {\n      tfName: \"maxval\",\n      name: \"maxval\",\n      type: \"number\",\n      defaultValue: 1\n    }, {\n      tfName: \"dtype\",\n      name: \"dtype\",\n      type: \"dtype\"\n    }, {\n      tfName: \"seed\",\n      name: \"seed\",\n      type: \"number\",\n      defaultValue: 0\n    }, {\n      tfName: \"seed2\",\n      name: \"seed2\",\n      type: \"number\",\n      defaultValue: 0,\n      notSupported: !0\n    }, {\n      tfName: \"T\",\n      name: \"T\",\n      type: \"number\",\n      notSupported: !0\n    }]\n  }, {\n    tfOpName: \"Range\",\n    category: \"creation\",\n    inputs: [{\n      start: 0,\n      name: \"start\",\n      type: \"number\"\n    }, {\n      start: 1,\n      name: \"stop\",\n      type: \"number\"\n    }, {\n      start: 2,\n      name: \"step\",\n      type: \"number\",\n      defaultValue: 0\n    }],\n    attrs: [{\n      tfName: \"Tidx\",\n      name: \"dtype\",\n      type: \"dtype\"\n    }]\n  }, {\n    tfOpName: \"TruncatedNormal\",\n    category: \"creation\",\n    inputs: [{\n      start: 0,\n      name: \"shape\",\n      type: \"number[]\"\n    }],\n    attrs: [{\n      tfName: \"means\",\n      name: \"mean\",\n      type: \"number\",\n      defaultValue: 0\n    }, {\n      tfName: \"stddev\",\n      name: \"stdDev\",\n      type: \"number\",\n      defaultValue: 1\n    }, {\n      tfName: \"seed\",\n      name: \"seed\",\n      type: \"number\"\n    }, {\n      tfName: \"seed2\",\n      name: \"seed2\",\n      type: \"number\",\n      defaultValue: 0,\n      notSupported: !0\n    }, {\n      tfName: \"dtype\",\n      name: \"dtype\",\n      type: \"dtype\"\n    }, {\n      tfName: \"T\",\n      name: \"T\",\n      type: \"number\",\n      notSupported: !0\n    }]\n  }, {\n    tfOpName: \"Zeros\",\n    category: \"creation\",\n    inputs: [{\n      start: 0,\n      name: \"shape\",\n      type: \"number[]\"\n    }],\n    attrs: [{\n      tfName: \"T\",\n      name: \"dtype\",\n      type: \"dtype\"\n    }]\n  }, {\n    tfOpName: \"ZerosLike\",\n    category: \"creation\",\n    inputs: [{\n      start: 0,\n      name: \"x\",\n      type: \"tensor\"\n    }],\n    attrs: [{\n      tfName: \"T\",\n      name: \"dtype\",\n      type: \"dtype\"\n    }]\n  }, {\n    tfOpName: \"Multinomial\",\n    category: \"creation\",\n    inputs: [{\n      start: 0,\n      name: \"logits\",\n      type: \"tensor\"\n    }, {\n      start: 1,\n      name: \"numSamples\",\n      type: \"number\"\n    }],\n    attrs: [{\n      tfName: \"seed\",\n      name: \"seed\",\n      type: \"number\"\n    }, {\n      tfName: \"seed2\",\n      name: \"seed2\",\n      type: \"number\"\n    }, {\n      tfName: \"T\",\n      name: \"dtype\",\n      type: \"dtype\"\n    }, {\n      tfName: \"output_dtype\",\n      name: \"output_dtype\",\n      type: \"dtype\"\n    }]\n  }],\n  creation = Object.freeze({\n    json: json$4\n  }),\n  json$5 = [{\n    tfOpName: \"NonMaxSuppressionV2\",\n    category: \"dynamic\",\n    inputs: [{\n      start: 0,\n      name: \"boxes\",\n      type: \"tensor\"\n    }, {\n      start: 1,\n      name: \"scores\",\n      type: \"tensor\"\n    }, {\n      start: 2,\n      name: \"maxOutputSize\",\n      type: \"number\"\n    }, {\n      start: 3,\n      name: \"iouThreshold\",\n      type: \"number\"\n    }]\n  }, {\n    tfOpName: \"NonMaxSuppressionV3\",\n    category: \"dynamic\",\n    inputs: [{\n      start: 0,\n      name: \"boxes\",\n      type: \"tensor\"\n    }, {\n      start: 1,\n      name: \"scores\",\n      type: \"tensor\"\n    }, {\n      start: 2,\n      name: \"maxOutputSize\",\n      type: \"number\"\n    }, {\n      start: 3,\n      name: \"iouThreshold\",\n      type: \"number\"\n    }, {\n      start: 4,\n      name: \"scoreThreshold\",\n      type: \"number\"\n    }]\n  }, {\n    tfOpName: \"Where\",\n    category: \"dynamic\",\n    inputs: [{\n      start: 0,\n      name: \"condition\",\n      type: \"tensor\"\n    }],\n    attrs: [{\n      tfName: \"T\",\n      name: \"dtype\",\n      type: \"dtype\",\n      notSupported: !0\n    }]\n  }, {\n    tfOpName: \"ListDiff\",\n    category: \"dynamic\",\n    inputs: [{\n      start: 0,\n      name: \"x\",\n      type: \"tensor\"\n    }, {\n      start: 1,\n      name: \"y\",\n      type: \"tensor\"\n    }],\n    attrs: [{\n      tfName: \"T\",\n      name: \"dtype\",\n      type: \"dtype\",\n      notSupported: !0\n    }]\n  }],\n  dynamic = Object.freeze({\n    json: json$5\n  }),\n  json$6 = [{\n    tfOpName: \"TopKV2\",\n    category: \"evaluation\",\n    inputs: [{\n      start: 0,\n      name: \"x\",\n      type: \"tensor\"\n    }, {\n      start: 1,\n      name: \"k\",\n      type: \"number\"\n    }],\n    attrs: [{\n      tfName: \"sorted\",\n      name: \"sorted\",\n      type: \"bool\"\n    }]\n  }],\n  evaluation = Object.freeze({\n    json: json$6\n  }),\n  json$7 = [{\n    tfOpName: \"PlaceholderWithDefault\",\n    category: \"graph\",\n    inputs: [{\n      start: 0,\n      name: \"default\",\n      type: \"tensor\"\n    }],\n    attrs: [{\n      tfName: \"shape\",\n      name: \"shape\",\n      type: \"shape\"\n    }, {\n      tfName: \"dtype\",\n      name: \"dtype\",\n      type: \"dtype\"\n    }]\n  }, {\n    tfOpName: \"Placeholder\",\n    category: \"graph\",\n    attrs: [{\n      tfName: \"shape\",\n      name: \"shape\",\n      type: \"shape\"\n    }, {\n      tfName: \"dtype\",\n      name: \"dtype\",\n      type: \"dtype\"\n    }]\n  }, {\n    tfOpName: \"Const\",\n    category: \"graph\"\n  }, {\n    tfOpName: \"Identity\",\n    category: \"graph\",\n    inputs: [{\n      start: 0,\n      name: \"x\",\n      type: \"tensor\"\n    }]\n  }, {\n    tfOpName: \"IdentityN\",\n    category: \"graph\",\n    inputs: [{\n      start: 0,\n      end: 0,\n      name: \"x\",\n      type: \"tensors\"\n    }]\n  }, {\n    tfOpName: \"Snapshot\",\n    category: \"graph\",\n    inputs: [{\n      start: 0,\n      name: \"x\",\n      type: \"tensor\"\n    }]\n  }, {\n    tfOpName: \"Rank\",\n    category: \"graph\",\n    inputs: [{\n      start: 0,\n      name: \"x\",\n      type: \"tensor\"\n    }]\n  }, {\n    tfOpName: \"Size\",\n    category: \"graph\",\n    inputs: [{\n      start: 0,\n      name: \"x\",\n      type: \"tensor\"\n    }]\n  }, {\n    tfOpName: \"Shape\",\n    category: \"graph\",\n    inputs: [{\n      start: 0,\n      name: \"x\",\n      type: \"tensor\"\n    }]\n  }, {\n    tfOpName: \"ShapeN\",\n    category: \"graph\",\n    inputs: [{\n      start: 0,\n      end: 0,\n      name: \"x\",\n      type: \"tensors\"\n    }]\n  }, {\n    tfOpName: \"Print\",\n    category: \"graph\",\n    inputs: [{\n      start: 0,\n      name: \"x\",\n      type: \"tensor\"\n    }, {\n      start: 1,\n      name: \"data\",\n      type: \"tensors\"\n    }],\n    attrs: [{\n      tfName: \"message\",\n      name: \"message\",\n      type: \"string\"\n    }, {\n      tfName: \"first_n\",\n      name: \"firstN\",\n      type: \"number\",\n      notSupported: !0\n    }, {\n      tfName: \"summarize\",\n      name: \"summarize\",\n      type: \"number\",\n      defaultValue: 3\n    }]\n  }, {\n    tfOpName: \"NoOp\",\n    category: \"graph\",\n    inputs: []\n  }, {\n    tfOpName: \"StopGradient\",\n    category: \"graph\",\n    inputs: [{\n      start: 0,\n      name: \"x\",\n      type: \"tensor\"\n    }]\n  }, {\n    tfOpName: \"FakeQuantWithMinMaxVars\",\n    category: \"graph\",\n    inputs: [{\n      start: 0,\n      name: \"x\",\n      type: \"tensor\"\n    }],\n    attrs: [{\n      tfName: \"min\",\n      name: \"min\",\n      type: \"number\"\n    }, {\n      tfName: \"max\",\n      name: \"max\",\n      type: \"number\"\n    }]\n  }],\n  graph = Object.freeze({\n    json: json$7\n  }),\n  json$8 = [{\n    tfOpName: \"ResizeBilinear\",\n    category: \"image\",\n    inputs: [{\n      start: 0,\n      name: \"images\",\n      type: \"tensor\"\n    }, {\n      start: 1,\n      name: \"size\",\n      type: \"number[]\"\n    }],\n    attrs: [{\n      tfName: \"align_corners\",\n      name: \"alignCorners\",\n      type: \"bool\"\n    }, {\n      tfName: \"T\",\n      name: \"dtype\",\n      type: \"dtype\",\n      notSupported: !0\n    }]\n  }, {\n    tfOpName: \"ResizeNearestNeighbor\",\n    category: \"image\",\n    inputs: [{\n      start: 0,\n      name: \"images\",\n      type: \"tensor\"\n    }, {\n      start: 1,\n      name: \"size\",\n      type: \"number[]\"\n    }],\n    attrs: [{\n      tfName: \"align_corners\",\n      name: \"alignCorners\",\n      type: \"bool\"\n    }, {\n      tfName: \"T\",\n      name: \"dtype\",\n      type: \"dtype\",\n      notSupported: !0\n    }]\n  }, {\n    tfOpName: \"CropAndResize\",\n    category: \"image\",\n    inputs: [{\n      start: 0,\n      name: \"image\",\n      type: \"tensor\"\n    }, {\n      start: 1,\n      name: \"boxes\",\n      type: \"tensor\"\n    }, {\n      start: 2,\n      name: \"boxInd\",\n      type: \"tensor\"\n    }, {\n      start: 3,\n      name: \"cropSize\",\n      type: \"number[]\"\n    }],\n    attrs: [{\n      tfName: \"method\",\n      name: \"method\",\n      type: \"string\"\n    }, {\n      tfName: \"extrapolation_value\",\n      name: \"extrapolationValue\",\n      type: \"number\"\n    }]\n  }],\n  image$1 = Object.freeze({\n    json: json$8\n  }),\n  json$9 = [{\n    tfOpName: \"Equal\",\n    category: \"logical\",\n    inputs: [{\n      start: 0,\n      name: \"a\",\n      type: \"tensor\"\n    }, {\n      start: 1,\n      name: \"b\",\n      type: \"tensor\"\n    }],\n    attrs: [{\n      tfName: \"T\",\n      name: \"dtype\",\n      type: \"dtype\",\n      notSupported: !0\n    }]\n  }, {\n    tfOpName: \"NotEqual\",\n    category: \"logical\",\n    inputs: [{\n      start: 0,\n      name: \"a\",\n      type: \"tensor\"\n    }, {\n      start: 1,\n      name: \"b\",\n      type: \"tensor\"\n    }],\n    attrs: [{\n      tfName: \"T\",\n      name: \"dtype\",\n      type: \"dtype\",\n      notSupported: !0\n    }]\n  }, {\n    tfOpName: \"Greater\",\n    category: \"logical\",\n    inputs: [{\n      start: 0,\n      name: \"a\",\n      type: \"tensor\"\n    }, {\n      start: 1,\n      name: \"b\",\n      type: \"tensor\"\n    }],\n    attrs: [{\n      tfName: \"T\",\n      name: \"dtype\",\n      type: \"dtype\",\n      notSupported: !0\n    }]\n  }, {\n    tfOpName: \"GreaterEqual\",\n    category: \"logical\",\n    inputs: [{\n      start: 0,\n      name: \"a\",\n      type: \"tensor\"\n    }, {\n      start: 1,\n      name: \"b\",\n      type: \"tensor\"\n    }],\n    attrs: [{\n      tfName: \"T\",\n      name: \"dtype\",\n      type: \"dtype\",\n      notSupported: !0\n    }]\n  }, {\n    tfOpName: \"Less\",\n    category: \"logical\",\n    inputs: [{\n      start: 0,\n      name: \"a\",\n      type: \"tensor\"\n    }, {\n      start: 1,\n      name: \"b\",\n      type: \"tensor\"\n    }],\n    attrs: [{\n      tfName: \"T\",\n      name: \"dtype\",\n      type: \"dtype\",\n      notSupported: !0\n    }]\n  }, {\n    tfOpName: \"LessEqual\",\n    category: \"logical\",\n    inputs: [{\n      start: 0,\n      name: \"a\",\n      type: \"tensor\"\n    }, {\n      start: 1,\n      name: \"b\",\n      type: \"tensor\"\n    }],\n    attrs: [{\n      tfName: \"T\",\n      name: \"dtype\",\n      type: \"dtype\",\n      notSupported: !0\n    }]\n  }, {\n    tfOpName: \"LogicalAnd\",\n    category: \"logical\",\n    inputs: [{\n      start: 0,\n      name: \"a\",\n      type: \"tensor\"\n    }, {\n      start: 1,\n      name: \"b\",\n      type: \"tensor\"\n    }],\n    attrs: [{\n      tfName: \"T\",\n      name: \"dtype\",\n      type: \"dtype\",\n      notSupported: !0\n    }]\n  }, {\n    tfOpName: \"LogicalNot\",\n    category: \"logical\",\n    inputs: [{\n      start: 0,\n      name: \"a\",\n      type: \"tensor\"\n    }],\n    attrs: [{\n      tfName: \"T\",\n      name: \"dtype\",\n      type: \"dtype\",\n      notSupported: !0\n    }]\n  }, {\n    tfOpName: \"LogicalOr\",\n    category: \"logical\",\n    inputs: [{\n      start: 0,\n      name: \"a\",\n      type: \"tensor\"\n    }, {\n      start: 1,\n      name: \"b\",\n      type: \"tensor\"\n    }],\n    attrs: [{\n      tfName: \"T\",\n      name: \"dtype\",\n      type: \"dtype\",\n      notSupported: !0\n    }]\n  }, {\n    tfOpName: \"Select\",\n    category: \"logical\",\n    inputs: [{\n      start: 0,\n      name: \"condition\",\n      type: \"tensor\"\n    }, {\n      start: 1,\n      name: \"a\",\n      type: \"tensor\"\n    }, {\n      start: 2,\n      name: \"b\",\n      type: \"tensor\"\n    }],\n    attrs: [{\n      tfName: \"T\",\n      name: \"dtype\",\n      type: \"dtype\",\n      notSupported: !0\n    }]\n  }],\n  logical = Object.freeze({\n    json: json$9\n  }),\n  json$10 = [{\n    tfOpName: \"MatMul\",\n    category: \"matrices\",\n    inputs: [{\n      start: 0,\n      name: \"a\",\n      type: \"tensor\"\n    }, {\n      start: 1,\n      name: \"b\",\n      type: \"tensor\"\n    }],\n    attrs: [{\n      tfName: \"transpose_a\",\n      name: \"transposeA\",\n      type: \"bool\",\n      defaultValue: !1\n    }, {\n      tfName: \"transpose_b\",\n      name: \"transposeB\",\n      type: \"bool\",\n      defaultValue: !1\n    }, {\n      tfName: \"T\",\n      name: \"dtype\",\n      type: \"dtype\",\n      notSupported: !0\n    }]\n  }, {\n    tfOpName: \"BatchMatMul\",\n    category: \"matrices\",\n    inputs: [{\n      start: 0,\n      name: \"a\",\n      type: \"tensor\"\n    }, {\n      start: 1,\n      name: \"b\",\n      type: \"tensor\"\n    }],\n    attrs: [{\n      tfName: \"adj_x\",\n      name: \"transposeA\",\n      type: \"bool\",\n      defaultValue: !1\n    }, {\n      tfName: \"adj_y\",\n      name: \"transposeB\",\n      type: \"bool\",\n      defaultValue: !1\n    }, {\n      tfName: \"T\",\n      name: \"dtype\",\n      type: \"dtype\",\n      notSupported: !0\n    }]\n  }, {\n    tfOpName: \"BatchMatMulV2\",\n    category: \"matrices\",\n    inputs: [{\n      start: 0,\n      name: \"a\",\n      type: \"tensor\"\n    }, {\n      start: 1,\n      name: \"b\",\n      type: \"tensor\"\n    }],\n    attrs: [{\n      tfName: \"adj_x\",\n      name: \"transposeA\",\n      type: \"bool\",\n      defaultValue: !1\n    }, {\n      tfName: \"adj_y\",\n      name: \"transposeB\",\n      type: \"bool\",\n      defaultValue: !1\n    }, {\n      tfName: \"T\",\n      name: \"dtype\",\n      type: \"dtype\",\n      notSupported: !0\n    }]\n  }, {\n    tfOpName: \"Transpose\",\n    category: \"matrices\",\n    inputs: [{\n      start: 0,\n      name: \"x\",\n      type: \"tensor\"\n    }, {\n      start: 1,\n      name: \"perm\",\n      type: \"number[]\"\n    }],\n    attrs: [{\n      tfName: \"T\",\n      name: \"dtype\",\n      type: \"dtype\",\n      notSupported: !0\n    }]\n  }],\n  matrices = Object.freeze({\n    json: json$10\n  }),\n  json$11 = [{\n    tfOpName: \"FusedBatchNorm\",\n    category: \"normalization\",\n    inputs: [{\n      start: 0,\n      name: \"x\",\n      type: \"tensor\"\n    }, {\n      start: 1,\n      name: \"scale\",\n      type: \"tensor\"\n    }, {\n      start: 2,\n      name: \"offset\",\n      type: \"tensor\"\n    }, {\n      start: 3,\n      name: \"mean\",\n      type: \"tensor\"\n    }, {\n      start: 4,\n      name: \"variance\",\n      type: \"tensor\"\n    }],\n    attrs: [{\n      tfName: \"epsilon\",\n      name: \"epsilon\",\n      type: \"number\",\n      defaultValue: .001\n    }, {\n      tfName: \"data_format\",\n      name: \"dataFormat\",\n      type: \"string\",\n      notSupported: !0\n    }]\n  }, {\n    tfOpName: \"FusedBatchNormV2\",\n    category: \"normalization\",\n    inputs: [{\n      start: 0,\n      name: \"x\",\n      type: \"tensor\"\n    }, {\n      start: 1,\n      name: \"scale\",\n      type: \"tensor\"\n    }, {\n      start: 2,\n      name: \"offset\",\n      type: \"tensor\"\n    }, {\n      start: 3,\n      name: \"mean\",\n      type: \"tensor\"\n    }, {\n      start: 4,\n      name: \"variance\",\n      type: \"tensor\"\n    }],\n    attrs: [{\n      tfName: \"epsilon\",\n      name: \"epsilon\",\n      type: \"number\",\n      defaultValue: .001\n    }, {\n      tfName: \"data_format\",\n      name: \"dataFormat\",\n      type: \"string\",\n      notSupported: !0\n    }]\n  }, {\n    tfOpName: \"FusedBatchNormV3\",\n    category: \"normalization\",\n    inputs: [{\n      start: 0,\n      name: \"x\",\n      type: \"tensor\"\n    }, {\n      start: 1,\n      name: \"scale\",\n      type: \"tensor\"\n    }, {\n      start: 2,\n      name: \"offset\",\n      type: \"tensor\"\n    }, {\n      start: 3,\n      name: \"mean\",\n      type: \"tensor\"\n    }, {\n      start: 4,\n      name: \"variance\",\n      type: \"tensor\"\n    }],\n    attrs: [{\n      tfName: \"epsilon\",\n      name: \"epsilon\",\n      type: \"number\",\n      defaultValue: .001\n    }, {\n      tfName: \"data_format\",\n      name: \"dataFormat\",\n      type: \"string\",\n      notSupported: !0\n    }]\n  }, {\n    tfOpName: \"LRN\",\n    category: \"normalization\",\n    inputs: [{\n      start: 0,\n      name: \"x\",\n      type: \"tensor\"\n    }],\n    attrs: [{\n      tfName: \"depth_radius\",\n      name: \"radius\",\n      type: \"number\",\n      defaultValue: 5\n    }, {\n      tfName: \"bias\",\n      name: \"bias\",\n      type: \"number\",\n      defaultValue: 1\n    }, {\n      tfName: \"alpha\",\n      name: \"alpha\",\n      type: \"number\",\n      defaultValue: 1\n    }, {\n      tfName: \"beta\",\n      name: \"beta\",\n      type: \"number\",\n      defaultValue: .5\n    }]\n  }, {\n    tfOpName: \"Softmax\",\n    category: \"normalization\",\n    inputs: [{\n      start: 0,\n      name: \"x\",\n      type: \"tensor\"\n    }]\n  }, {\n    tfOpName: \"LogSoftmax\",\n    category: \"normalization\",\n    inputs: [{\n      start: 0,\n      name: \"x\",\n      type: \"tensor\"\n    }]\n  }, {\n    tfOpName: \"SparseToDense\",\n    category: \"normalization\",\n    inputs: [{\n      start: 0,\n      name: \"sparseIndices\",\n      type: \"tensor\"\n    }, {\n      start: 1,\n      name: \"outputShape\",\n      type: \"number[]\"\n    }, {\n      start: 2,\n      name: \"sparseValues\",\n      type: \"tensor\"\n    }, {\n      start: 3,\n      name: \"defaultValue\",\n      type: \"tensor\"\n    }],\n    attrs: [{\n      tfName: \"validate_indices\",\n      name: \"validateIndices\",\n      type: \"bool\",\n      defaultValue: !0,\n      notSupported: !0\n    }]\n  }],\n  normalization = Object.freeze({\n    json: json$11\n  }),\n  json$12 = [{\n    tfOpName: \"Max\",\n    category: \"reduction\",\n    inputs: [{\n      start: 0,\n      name: \"x\",\n      type: \"tensor\"\n    }, {\n      start: 1,\n      name: \"axis\",\n      type: \"number[]\"\n    }],\n    attrs: [{\n      tfName: \"keep_dims\",\n      name: \"keepDims\",\n      type: \"bool\"\n    }]\n  }, {\n    tfOpName: \"Mean\",\n    category: \"reduction\",\n    inputs: [{\n      start: 0,\n      name: \"x\",\n      type: \"tensor\"\n    }, {\n      start: 1,\n      name: \"axis\",\n      type: \"number[]\"\n    }],\n    attrs: [{\n      tfName: \"keep_dims\",\n      name: \"keepDims\",\n      type: \"bool\"\n    }]\n  }, {\n    tfOpName: \"Min\",\n    category: \"reduction\",\n    inputs: [{\n      start: 0,\n      name: \"x\",\n      type: \"tensor\"\n    }, {\n      start: 1,\n      name: \"axis\",\n      type: \"number[]\"\n    }],\n    attrs: [{\n      tfName: \"keep_dims\",\n      name: \"keepDims\",\n      type: \"bool\"\n    }]\n  }, {\n    tfOpName: \"Sum\",\n    category: \"reduction\",\n    inputs: [{\n      start: 0,\n      name: \"x\",\n      type: \"tensor\"\n    }, {\n      start: 1,\n      name: \"axis\",\n      type: \"number[]\"\n    }],\n    attrs: [{\n      tfName: \"keep_dims\",\n      name: \"keepDims\",\n      type: \"bool\"\n    }]\n  }, {\n    tfOpName: \"All\",\n    category: \"reduction\",\n    inputs: [{\n      start: 0,\n      name: \"x\",\n      type: \"tensor\"\n    }, {\n      start: 1,\n      name: \"axis\",\n      type: \"number[]\"\n    }],\n    attrs: [{\n      tfName: \"keep_dims\",\n      name: \"keepDims\",\n      type: \"bool\"\n    }]\n  }, {\n    tfOpName: \"Any\",\n    category: \"reduction\",\n    inputs: [{\n      start: 0,\n      name: \"x\",\n      type: \"tensor\"\n    }, {\n      start: 1,\n      name: \"axis\",\n      type: \"number[]\"\n    }],\n    attrs: [{\n      tfName: \"keep_dims\",\n      name: \"keepDims\",\n      type: \"bool\"\n    }]\n  }, {\n    tfOpName: \"ArgMax\",\n    category: \"reduction\",\n    inputs: [{\n      start: 0,\n      name: \"x\",\n      type: \"tensor\"\n    }, {\n      start: 1,\n      name: \"axis\",\n      type: \"number\"\n    }]\n  }, {\n    tfOpName: \"ArgMin\",\n    category: \"reduction\",\n    inputs: [{\n      start: 0,\n      name: \"x\",\n      type: \"tensor\"\n    }, {\n      start: 1,\n      name: \"axis\",\n      type: \"number\"\n    }]\n  }, {\n    tfOpName: \"Prod\",\n    category: \"reduction\",\n    inputs: [{\n      start: 0,\n      name: \"x\",\n      type: \"tensor\"\n    }, {\n      start: 1,\n      name: \"axis\",\n      type: \"number[]\"\n    }],\n    attrs: [{\n      tfName: \"keep_dims\",\n      name: \"keepDims\",\n      type: \"bool\"\n    }]\n  }],\n  reduction = Object.freeze({\n    json: json$12\n  }),\n  json$13 = [{\n    tfOpName: \"ConcatV2\",\n    category: \"slice_join\",\n    inputs: [{\n      start: 0,\n      end: -1,\n      name: \"tensors\",\n      type: \"tensors\"\n    }, {\n      start: -1,\n      name: \"axis\",\n      type: \"number\"\n    }]\n  }, {\n    tfOpName: \"Concat\",\n    category: \"slice_join\",\n    inputs: [{\n      start: 1,\n      end: 0,\n      name: \"tensors\",\n      type: \"tensors\"\n    }, {\n      start: 0,\n      name: \"axis\",\n      type: \"number\"\n    }]\n  }, {\n    tfOpName: \"GatherV2\",\n    category: \"slice_join\",\n    inputs: [{\n      start: 0,\n      name: \"x\",\n      type: \"tensor\"\n    }, {\n      start: 1,\n      name: \"indices\",\n      type: \"tensor\"\n    }, {\n      start: 2,\n      name: \"axis\",\n      type: \"number\",\n      defaultValue: 0\n    }]\n  }, {\n    tfOpName: \"Gather\",\n    category: \"slice_join\",\n    inputs: [{\n      start: 0,\n      name: \"x\",\n      type: \"tensor\"\n    }, {\n      start: 1,\n      name: \"indices\",\n      type: \"tensor\"\n    }],\n    attrs: [{\n      tfName: \"axis\",\n      name: \"axis\",\n      type: \"number\",\n      defaultValue: 0\n    }, {\n      tfName: \"validate_indices\",\n      name: \"validateIndices\",\n      type: \"bool\",\n      notSupported: !0\n    }]\n  }, {\n    tfOpName: \"Reverse\",\n    category: \"slice_join\",\n    inputs: [{\n      start: 0,\n      name: \"x\",\n      type: \"tensor\"\n    }, {\n      start: 1,\n      name: \"dims\",\n      type: \"bool\",\n      notSupported: !0\n    }]\n  }, {\n    tfOpName: \"ReverseV2\",\n    category: \"slice_join\",\n    inputs: [{\n      start: 0,\n      name: \"x\",\n      type: \"tensor\"\n    }, {\n      start: 1,\n      name: \"axis\",\n      type: \"number[]\"\n    }]\n  }, {\n    tfOpName: \"Slice\",\n    category: \"slice_join\",\n    inputs: [{\n      start: 0,\n      name: \"x\",\n      type: \"tensor\"\n    }, {\n      start: 1,\n      name: \"begin\",\n      type: \"number[]\"\n    }, {\n      start: 2,\n      name: \"size\",\n      type: \"number[]\"\n    }]\n  }, {\n    tfOpName: \"StridedSlice\",\n    category: \"slice_join\",\n    inputs: [{\n      start: 0,\n      name: \"x\",\n      type: \"tensor\"\n    }, {\n      start: 1,\n      name: \"begin\",\n      type: \"number[]\"\n    }, {\n      start: 2,\n      name: \"end\",\n      type: \"number[]\"\n    }, {\n      start: 3,\n      name: \"strides\",\n      type: \"number[]\"\n    }],\n    attrs: [{\n      tfName: \"begin_mask\",\n      name: \"beginMask\",\n      type: \"number\",\n      defaultValue: 0\n    }, {\n      tfName: \"end_mask\",\n      name: \"endMask\",\n      type: \"number\",\n      defaultValue: 0\n    }, {\n      tfName: \"new_axis_mask\",\n      name: \"newAxisMask\",\n      type: \"number\",\n      defaultValue: 0\n    }, {\n      tfName: \"ellipsis_mask\",\n      name: \"ellipsisMask\",\n      type: \"number\",\n      defaultValue: 0\n    }, {\n      tfName: \"shrink_axis_mask\",\n      name: \"shrinkAxisMask\",\n      type: \"number\",\n      defaultValue: 0\n    }]\n  }, {\n    tfOpName: \"Pack\",\n    category: \"slice_join\",\n    inputs: [{\n      start: 0,\n      end: 0,\n      name: \"tensors\",\n      type: \"tensors\"\n    }],\n    attrs: [{\n      tfName: \"axis\",\n      name: \"axis\",\n      type: \"number\",\n      defaultValue: 0\n    }]\n  }, {\n    tfOpName: \"Unpack\",\n    category: \"slice_join\",\n    inputs: [{\n      start: 0,\n      name: \"tensor\",\n      type: \"tensor\"\n    }],\n    attrs: [{\n      tfName: \"axis\",\n      name: \"axis\",\n      type: \"number\",\n      defaultValue: 0\n    }, {\n      tfName: \"num\",\n      name: \"num\",\n      type: \"number\",\n      defaultValue: 0,\n      notSupported: !0\n    }]\n  }, {\n    tfOpName: \"Tile\",\n    category: \"slice_join\",\n    inputs: [{\n      start: 0,\n      name: \"x\",\n      type: \"tensor\"\n    }, {\n      start: 1,\n      name: \"reps\",\n      type: \"number[]\"\n    }]\n  }, {\n    tfOpName: \"Split\",\n    category: \"slice_join\",\n    inputs: [{\n      start: 0,\n      name: \"axis\",\n      type: \"number\",\n      defaultValue: 0\n    }, {\n      start: 1,\n      name: \"x\",\n      type: \"tensor\"\n    }],\n    attrs: [{\n      tfName: \"num_split\",\n      name: \"numOrSizeSplits\",\n      type: \"number\",\n      defaultValue: 1\n    }]\n  }, {\n    tfOpName: \"SplitV\",\n    category: \"slice_join\",\n    inputs: [{\n      start: 0,\n      name: \"x\",\n      type: \"tensor\"\n    }, {\n      start: 1,\n      name: \"numOrSizeSplits\",\n      type: \"number[]\"\n    }, {\n      start: 2,\n      name: \"axis\",\n      type: \"number\",\n      defaultValue: 0\n    }]\n  }, {\n    tfOpName: \"ScatterNd\",\n    category: \"slice_join\",\n    inputs: [{\n      start: 0,\n      name: \"indices\",\n      type: \"tensor\"\n    }, {\n      start: 1,\n      name: \"values\",\n      type: \"tensor\"\n    }, {\n      start: 2,\n      name: \"shape\",\n      type: \"number[]\"\n    }]\n  }, {\n    tfOpName: \"GatherNd\",\n    category: \"slice_join\",\n    inputs: [{\n      start: 0,\n      name: \"x\",\n      type: \"tensor\"\n    }, {\n      start: 1,\n      name: \"indices\",\n      type: \"tensor\"\n    }]\n  }, {\n    tfOpName: \"SparseToDense\",\n    category: \"slice_join\",\n    inputs: [{\n      start: 0,\n      name: \"sparseIndices\",\n      type: \"tensor\"\n    }, {\n      start: 1,\n      name: \"outputShape\",\n      type: \"number[]\"\n    }, {\n      start: 2,\n      name: \"sparseValues\",\n      type: \"tensor\"\n    }, {\n      start: 3,\n      name: \"defaultValue\",\n      type: \"tensor\"\n    }],\n    attrs: [{\n      tfName: \"validate_indices\",\n      name: \"validateIndices\",\n      type: \"bool\",\n      defaultValue: !1,\n      notSupported: !0\n    }]\n  }],\n  sliceJoin = Object.freeze({\n    json: json$13\n  }),\n  json$14 = [{\n    tfOpName: \"FFT\",\n    category: \"spectral\",\n    inputs: [{\n      start: 0,\n      name: \"x\",\n      type: \"tensor\"\n    }]\n  }, {\n    tfOpName: \"IFFT\",\n    category: \"spectral\",\n    inputs: [{\n      start: 0,\n      name: \"x\",\n      type: \"tensor\"\n    }]\n  }, {\n    tfOpName: \"RFFT\",\n    category: \"spectral\",\n    inputs: [{\n      start: 0,\n      name: \"x\",\n      type: \"tensor\"\n    }, {\n      start: 1,\n      name: \"fft_length\",\n      type: \"number\",\n      notSupported: !0\n    }]\n  }, {\n    tfOpName: \"IRFFT\",\n    category: \"spectral\",\n    inputs: [{\n      start: 0,\n      name: \"x\",\n      type: \"tensor\"\n    }, {\n      start: 1,\n      name: \"fft_length\",\n      type: \"number\",\n      notSupported: !0\n    }]\n  }],\n  spectral = Object.freeze({\n    json: json$14\n  }),\n  json$15 = [{\n    tfOpName: \"Cast\",\n    category: \"transformation\",\n    inputs: [{\n      start: 0,\n      name: \"x\",\n      type: \"tensor\"\n    }],\n    attrs: [{\n      tfName: \"SrcT\",\n      name: \"sdtype\",\n      type: \"dtype\",\n      notSupported: !0\n    }, {\n      tfName: \"DstT\",\n      name: \"dtype\",\n      type: \"dtype\"\n    }]\n  }, {\n    tfOpName: \"ExpandDims\",\n    category: \"transformation\",\n    inputs: [{\n      start: 0,\n      name: \"x\",\n      type: \"tensor\"\n    }, {\n      start: 1,\n      name: \"axis\",\n      type: \"number\"\n    }]\n  }, {\n    tfOpName: \"Pad\",\n    category: \"transformation\",\n    inputs: [{\n      start: 0,\n      name: \"x\",\n      type: \"tensor\"\n    }, {\n      start: 1,\n      name: \"padding\",\n      type: \"number[]\"\n    }],\n    attrs: [{\n      tfName: \"constant_value\",\n      name: \"constantValue\",\n      type: \"number\",\n      defaultValue: 0\n    }]\n  }, {\n    tfOpName: \"PadV2\",\n    category: \"transformation\",\n    inputs: [{\n      start: 0,\n      name: \"x\",\n      type: \"tensor\"\n    }, {\n      start: 1,\n      name: \"padding\",\n      type: \"number[]\"\n    }, {\n      start: 2,\n      name: \"constantValue\",\n      type: \"number\",\n      defaultValue: 0\n    }]\n  }, {\n    tfOpName: \"Reshape\",\n    category: \"transformation\",\n    inputs: [{\n      start: 0,\n      name: \"x\",\n      type: \"tensor\"\n    }, {\n      start: 1,\n      name: \"shape\",\n      type: \"number[]\"\n    }]\n  }, {\n    tfOpName: \"Squeeze\",\n    category: \"transformation\",\n    inputs: [{\n      start: 0,\n      name: \"x\",\n      type: \"tensor\"\n    }],\n    attrs: [{\n      tfName: \"axis\",\n      tfDeprecatedName: \"squeeze_dims\",\n      name: \"axis\",\n      type: \"number[]\"\n    }]\n  }, {\n    tfOpName: \"SpaceToBatchND\",\n    category: \"transformation\",\n    inputs: [{\n      start: 0,\n      name: \"x\",\n      type: \"tensor\"\n    }, {\n      start: 1,\n      name: \"blockShape\",\n      type: \"number[]\"\n    }, {\n      start: 2,\n      name: \"paddings\",\n      type: \"number[]\"\n    }]\n  }, {\n    tfOpName: \"BatchToSpaceND\",\n    category: \"transformation\",\n    inputs: [{\n      start: 0,\n      name: \"x\",\n      type: \"tensor\"\n    }, {\n      start: 1,\n      name: \"blockShape\",\n      type: \"number[]\"\n    }, {\n      start: 2,\n      name: \"crops\",\n      type: \"number[]\"\n    }]\n  }, {\n    tfOpName: \"DepthToSpace\",\n    category: \"transformation\",\n    inputs: [{\n      start: 0,\n      name: \"x\",\n      type: \"tensor\"\n    }],\n    attrs: [{\n      tfName: \"block_size\",\n      name: \"blockSize\",\n      type: \"number\"\n    }, {\n      tfName: \"data_format\",\n      name: \"dataFormat\",\n      type: \"string\"\n    }]\n  }],\n  transformation = Object.freeze({\n    json: json$15\n  }),\n  OperationMapper = function () {\n    function e() {\n      var e = [arithmetic, basicMath, control, convolution, creation, dynamic, evaluation, logical, image$1, graph, matrices, normalization, reduction, sliceJoin, spectral, transformation],\n        t = [].concat.apply([], e.map(function (e) {\n          return e.json;\n        }));\n      this.opMappers = t.reduce(function (e, t) {\n        return e[t.tfOpName] = t, e;\n      }, {});\n    }\n    return Object.defineProperty(e, \"Instance\", {\n      get: function () {\n        return this._instance || (this._instance = new this());\n      },\n      enumerable: !0,\n      configurable: !0\n    }), e.prototype.transformGraph = function (e) {\n      var t = this,\n        a = [],\n        r = [],\n        n = e.node.reduce(function (e, n) {\n          return e[n.name] = t.mapNode(n), \"Placeholder\" === n.op && a.push(e[n.name]), \"Const\" === n.op && r.push(e[n.name]), e;\n        }, {}),\n        s = [],\n        o = [],\n        p = Object.keys(n);\n      return p.forEach(function (e) {\n        var t = n[e];\n        t.inputNames.forEach(function (e) {\n          var a = getNodeNameAndIndex(e)[0];\n          t.inputs.push(n[a]), n[a].children.push(t);\n        }), 0 === t.inputs.length && s.push(t);\n      }), p.forEach(function (e) {\n        var t = n[e];\n        0 === t.children.length && o.push(t);\n      }), {\n        nodes: n,\n        inputs: s,\n        outputs: o,\n        weights: r,\n        placeholders: a\n      };\n    }, e.prototype.mapNode = function (e) {\n      var t = getRegisteredOp(e.op) || this.opMappers[e.op] || {};\n      null == e.attr && (e.attr = {});\n      var a = {\n        name: e.name,\n        op: e.op,\n        category: t.category,\n        inputNames: (e.input || []).map(function (e) {\n          return e.startsWith(\"^\") ? e.substr(1) : e;\n        }),\n        inputs: [],\n        children: [],\n        inputParams: {},\n        attrParams: {},\n        rawAttrs: e.attr\n      };\n      return null != t.inputs && (a.inputParams = t.inputs.reduce(function (e, t) {\n        return e[t.name] = {\n          type: t.type,\n          inputIndexStart: t.start,\n          inputIndexEnd: t.end\n        }, e;\n      }, {})), null != t.attrs && (a.attrParams = t.attrs.reduce(function (t, a) {\n        var r = a.type,\n          n = void 0;\n        switch (a.type) {\n          case \"string\":\n            void 0 === (n = getStringParam(e.attr, a.tfName, a.defaultValue)) && a.tfDeprecatedName && (n = getStringParam(e.attr, a.tfDeprecatedName, a.defaultValue));\n            break;\n          case \"string[]\":\n            void 0 === (n = getStringArrayParam(e.attr, a.tfName, a.defaultValue)) && a.tfDeprecatedName && (n = getStringArrayParam(e.attr, a.tfDeprecatedName, a.defaultValue));\n            break;\n          case \"number\":\n            void 0 === (n = getNumberParam(e.attr, a.tfName, a.defaultValue || 0)) && a.tfDeprecatedName && (n = getNumberParam(e.attr, a.tfDeprecatedName, a.defaultValue));\n            break;\n          case \"number[]\":\n            void 0 === (n = getNumericArrayParam(e.attr, a.tfName, a.defaultValue)) && a.tfDeprecatedName && (n = getNumericArrayParam(e.attr, a.tfDeprecatedName, a.defaultValue));\n            break;\n          case \"bool\":\n            void 0 === (n = getBoolParam(e.attr, a.tfName, a.defaultValue)) && a.tfDeprecatedName && (n = getBoolParam(e.attr, a.tfDeprecatedName, a.defaultValue));\n            break;\n          case \"bool[]\":\n            void 0 === (n = getBoolArrayParam(e.attr, a.tfName, a.defaultValue)) && a.tfDeprecatedName && (n = getBoolArrayParam(e.attr, a.tfDeprecatedName, a.defaultValue));\n            break;\n          case \"shape\":\n            void 0 === (n = getTensorShapeParam(e.attr, a.tfName, a.defaultValue)) && a.tfDeprecatedName && (n = getTensorShapeParam(e.attr, a.tfDeprecatedName, a.defaultValue));\n            break;\n          case \"shape[]\":\n            void 0 === (n = getTensorShapeArrayParam(e.attr, a.tfName, a.defaultValue)) && a.tfDeprecatedName && (n = getTensorShapeArrayParam(e.attr, a.tfDeprecatedName, a.defaultValue));\n            break;\n          case \"dtype\":\n            void 0 === (n = getDtypeParam(e.attr, a.tfName, a.defaultValue)) && a.tfDeprecatedName && (n = getDtypeParam(e.attr, a.tfDeprecatedName, a.defaultValue));\n            break;\n          case \"dtype[]\":\n            void 0 === (n = getDtypeArrayParam(e.attr, a.tfName, a.defaultValue)) && a.tfDeprecatedName && (n = getDtypeArrayParam(e.attr, a.tfDeprecatedName, a.defaultValue));\n            break;\n          case \"tensor\":\n          case \"tensors\":\n            break;\n          default:\n            throw new Error(\"Unsupported param type: \" + a.type + \" for op: \" + e.op);\n        }\n        return t[a.name] = {\n          value: n,\n          type: r\n        }, t;\n      }, {})), a;\n    }, e;\n  }();\nfunction decodeBase64(e) {\n  var t = env().global;\n  if (void 0 !== t.atob) return t.atob(e);\n  if (\"undefined\" != typeof Buffer) return new Buffer(e, \"base64\").toString();\n  throw new Error(\"Unable to decode base64 in this environment. Missing built-in atob() or Buffer()\");\n}\nfunction parseStringParam(e, t) {\n  var a = Array.isArray(e) ? String.fromCharCode.apply(null, e) : decodeBase64(e);\n  return t ? a : a.toLowerCase();\n}\nfunction getStringParam(e, t, a, r) {\n  void 0 === r && (r = !1);\n  var n = e[t];\n  return null != n ? parseStringParam(n.s, r) : a;\n}\nfunction getBoolParam(e, t, a) {\n  var r = e[t];\n  return r ? r.b : a;\n}\nfunction getNumberParam(e, t, a) {\n  var r = e[t] || {},\n    n = null != r.i ? r.i : null != r.f ? r.f : a;\n  return \"number\" == typeof n ? n : parseInt(n, 10);\n}\nfunction parseDtypeParam(e) {\n  switch (\"string\" == typeof e && (e = DataType[e]), e) {\n    case DataType.DT_FLOAT:\n      return \"float32\";\n    case DataType.DT_INT32:\n    case DataType.DT_INT64:\n      return \"int32\";\n    case DataType.DT_BOOL:\n      return \"bool\";\n    case DataType.DT_DOUBLE:\n      return \"float32\";\n    case DataType.DT_STRING:\n      return \"string\";\n    default:\n      return null;\n  }\n}\nfunction getDtypeParam(e, t, a) {\n  var r = e[t];\n  return r && r.type ? parseDtypeParam(r.type) : a;\n}\nfunction getDtypeArrayParam(e, t, a) {\n  var r = e[t];\n  return r && r.list && r.list.type ? r.list.type.map(function (e) {\n    return parseDtypeParam(e);\n  }) : a;\n}\nfunction parseTensorShapeParam(e) {\n  if (!e.unknownRank) return null != e.dim ? e.dim.map(function (e) {\n    return \"number\" == typeof e.size ? e.size : parseInt(e.size, 10);\n  }) : [];\n}\nfunction getTensorShapeParam(e, t, a) {\n  var r = e[t];\n  return r && r.shape ? parseTensorShapeParam(r.shape) : a;\n}\nfunction getNumericArrayParam(e, t, a) {\n  var r = e[t];\n  return r ? ((r.list.f && r.list.f.length ? r.list.f : r.list.i) || []).map(function (e) {\n    return \"number\" == typeof e ? e : parseInt(e, 10);\n  }) : a;\n}\nfunction getStringArrayParam(e, t, a, r) {\n  void 0 === r && (r = !1);\n  var n = e[t];\n  return n && n.list && n.list.s ? n.list.s.map(function (e) {\n    return parseStringParam(e, r);\n  }) : a;\n}\nfunction getTensorShapeArrayParam(e, t, a) {\n  var r = e[t];\n  return r && r.list && r.list.shape ? r.list.shape.map(function (e) {\n    return parseTensorShapeParam(e);\n  }) : a;\n}\nfunction getBoolArrayParam(e, t, a) {\n  var r = e[t];\n  return r && r.list && r.list.b ? r.list.b : a;\n}\nvar NodeValueImpl = function () {\n    function e(e, t, a) {\n      var r = this;\n      this.node = e, this.tensorMap = t, this.context = a, this.inputs = [], this.attrs = {}, this.inputs = e.inputNames.map(function (e) {\n        return r.getInput(e);\n      }), null != e.rawAttrs && (this.attrs = Object.keys(e.rawAttrs).reduce(function (e, t) {\n        return e[t] = r.getAttr(t), e;\n      }, {}));\n    }\n    return e.prototype.getInput = function (e) {\n      return getTensor(e, this.tensorMap, this.context);\n    }, e.prototype.getAttr = function (e, t) {\n      var a = this.node.rawAttrs[e];\n      if (null != a.tensor) return getTensor(e, this.tensorMap, this.context);\n      if (null != a.i || null != a.f) return getNumberParam(this.node.rawAttrs, e, t);\n      if (null != a.s) return getStringParam(this.node.rawAttrs, e, t);\n      if (null != a.b) return getBoolParam(this.node.rawAttrs, e, t);\n      if (null != a.shape) return getTensorShapeParam(this.node.rawAttrs, e, t);\n      if (null != a.type) return getDtypeParam(this.node.rawAttrs, e, t);\n      if (null != a.list) {\n        if (null != a.list.i || null != a.list.f) return getNumericArrayParam(this.node.rawAttrs, e, t);\n        if (null != a.list.s) return getStringArrayParam(this.node.rawAttrs, e, t);\n        if (null != a.list.shape) return getTensorShapeArrayParam(this.node.rawAttrs, e, t);\n        if (null != a.list.b) return getBoolArrayParam(this.node.rawAttrs, e, t);\n        if (null != a.list.type) return getDtypeArrayParam(this.node.rawAttrs, e, t);\n      }\n      return t;\n    }, e;\n  }(),\n  executeOp = function (e, t, a) {\n    switch (e.op) {\n      case \"BiasAdd\":\n      case \"AddV2\":\n      case \"Add\":\n        return [add(getParamValue(\"a\", e, t, a), getParamValue(\"b\", e, t, a))];\n      case \"AddN\":\n        return [addN(getParamValue(\"tensors\", e, t, a))];\n      case \"FloorMod\":\n      case \"Mod\":\n        return [mod(getParamValue(\"a\", e, t, a), getParamValue(\"b\", e, t, a))];\n      case \"Mul\":\n        return [mul(getParamValue(\"a\", e, t, a), getParamValue(\"b\", e, t, a))];\n      case \"RealDiv\":\n      case \"Div\":\n        return [div(getParamValue(\"a\", e, t, a), getParamValue(\"b\", e, t, a))];\n      case \"FloorDiv\":\n        return [floorDiv(getParamValue(\"a\", e, t, a), getParamValue(\"b\", e, t, a))];\n      case \"Sub\":\n        return [sub(getParamValue(\"a\", e, t, a), getParamValue(\"b\", e, t, a))];\n      case \"Minimum\":\n        return [minimum(getParamValue(\"a\", e, t, a), getParamValue(\"b\", e, t, a))];\n      case \"Maximum\":\n        return [maximum(getParamValue(\"a\", e, t, a), getParamValue(\"b\", e, t, a))];\n      case \"Pow\":\n        return [pow(getParamValue(\"a\", e, t, a), getParamValue(\"b\", e, t, a))];\n      case \"SquaredDifference\":\n        return [squaredDifference(getParamValue(\"a\", e, t, a), getParamValue(\"b\", e, t, a))];\n      default:\n        throw TypeError(\"Node type \" + e.op + \" is not implemented\");\n    }\n  },\n  executeOp$1 = function (e, t, a) {\n    switch (e.op) {\n      case \"Abs\":\n      case \"ComplexAbs\":\n        return [abs(getParamValue(\"x\", e, t, a))];\n      case \"Acos\":\n        return [acos(getParamValue(\"x\", e, t, a))];\n      case \"Acosh\":\n        return [acosh(getParamValue(\"x\", e, t, a))];\n      case \"Asin\":\n        return [asin(getParamValue(\"x\", e, t, a))];\n      case \"Asinh\":\n        return [asinh(getParamValue(\"x\", e, t, a))];\n      case \"Atan\":\n        return [atan(getParamValue(\"x\", e, t, a))];\n      case \"Atan2\":\n        return [atan2(getParamValue(\"x\", e, t, a), getParamValue(\"y\", e, t, a))];\n      case \"Atanh\":\n        return [atanh(getParamValue(\"x\", e, t, a))];\n      case \"Ceil\":\n        return [ceil(getParamValue(\"x\", e, t, a))];\n      case \"Complex\":\n        return [complex(getParamValue(\"real\", e, t, a), getParamValue(\"imag\", e, t, a))];\n      case \"Cos\":\n        return [cos(getParamValue(\"x\", e, t, a))];\n      case \"Cosh\":\n        return [cosh(getParamValue(\"x\", e, t, a))];\n      case \"Elu\":\n        return [elu(getParamValue(\"x\", e, t, a))];\n      case \"Erf\":\n        return [erf(getParamValue(\"x\", e, t, a))];\n      case \"Exp\":\n        return [exp(getParamValue(\"x\", e, t, a))];\n      case \"Expm1\":\n        return [expm1(getParamValue(\"x\", e, t, a))];\n      case \"Floor\":\n        return [floor(getParamValue(\"x\", e, t, a))];\n      case \"Log\":\n        return [log(getParamValue(\"x\", e, t, a))];\n      case \"Log1p\":\n        return [log1p(getParamValue(\"x\", e, t, a))];\n      case \"Imag\":\n        return [imag(getParamValue(\"x\", e, t, a))];\n      case \"Neg\":\n        return [neg(getParamValue(\"x\", e, t, a))];\n      case \"Reciprocal\":\n        return [reciprocal(getParamValue(\"x\", e, t, a))];\n      case \"Real\":\n        return [real(getParamValue(\"x\", e, t, a))];\n      case \"Relu\":\n        return [relu(getParamValue(\"x\", e, t, a))];\n      case \"Round\":\n        return [round(getParamValue(\"x\", e, t, a))];\n      case \"Selu\":\n        return [selu(getParamValue(\"x\", e, t, a))];\n      case \"Sigmoid\":\n        return [sigmoid(getParamValue(\"x\", e, t, a))];\n      case \"Sin\":\n        return [sin(getParamValue(\"x\", e, t, a))];\n      case \"Sign\":\n        return [sign(getParamValue(\"x\", e, t, a))];\n      case \"Sinh\":\n        return [sinh(getParamValue(\"x\", e, t, a))];\n      case \"Softplus\":\n        return [softplus(getParamValue(\"x\", e, t, a))];\n      case \"Sqrt\":\n        return [sqrt(getParamValue(\"x\", e, t, a))];\n      case \"Square\":\n        return [square(getParamValue(\"x\", e, t, a))];\n      case \"Tanh\":\n        return [tanh(getParamValue(\"x\", e, t, a))];\n      case \"Tan\":\n        return [tan(getParamValue(\"x\", e, t, a))];\n      case \"Relu6\":\n      case \"ClipByValue\":\n        return [clipByValue(getParamValue(\"x\", e, t, a), getParamValue(\"clipValueMin\", e, t, a), getParamValue(\"clipValueMax\", e, t, a))];\n      case \"Rsqrt\":\n        return [rsqrt(getTensor(e.inputNames[0], t, a))];\n      case \"Prod\":\n        return [prod(getParamValue(\"x\", e, t, a), getParamValue(\"axes\", e, t, a))];\n      case \"LeakyRelu\":\n        return [leakyRelu(getParamValue(\"x\", e, t, a), getParamValue(\"alpha\", e, t, a))];\n      default:\n        throw TypeError(\"Node type \" + e.op + \" is not implemented\");\n    }\n  },\n  TensorArray = function () {\n    function e(t, a, r, n, s, o, p) {\n      this.name = t, this.dtype = a, this.maxSize = r, this.elementShape = n, this.identicalElementShapes = s, this.dynamicSize = o, this.clearAfterRead = p, this.tensors = [], this.closed_ = !1, this.id = e.nextId++;\n    }\n    return Object.defineProperty(e.prototype, \"closed\", {\n      get: function () {\n        return this.closed_;\n      },\n      enumerable: !0,\n      configurable: !0\n    }), e.prototype.clearAndClose = function () {\n      this.tensors.forEach(function (e) {\n        return e.tensor.dispose();\n      }), this.tensors = [], this.closed_ = !0;\n    }, e.prototype.size = function () {\n      return this.tensors.length;\n    }, e.prototype.read = function (e) {\n      if (this.closed_) throw new Error(\"TensorArray \" + this.name + \" has already been closed.\");\n      if (e < 0 || e >= this.tensors.length) throw new Error(\"Tried to read from index \" + e + \", but array size is: \" + this.tensors.length);\n      var t = this.tensors[e];\n      if (t.cleared) throw new Error(\"TensorArray \" + this.name + \": Could not read index \" + e + \" twice because it was cleared after a previous read (perhaps try setting clear_after_read = false?).\");\n      return this.clearAfterRead && (t.cleared = !0), t.read = !0, t.tensor;\n    }, e.prototype.readMany = function (e) {\n      var t = this;\n      return e.map(function (e) {\n        return t.read(e);\n      });\n    }, e.prototype.write = function (e, t) {\n      if (this.closed_) throw new Error(\"TensorArray \" + this.name + \" has already been closed.\");\n      if (e < 0 || !this.dynamicSize && e >= this.maxSize) throw new Error(\"Tried to write to index \" + e + \", but array is not resizeable and size is: \" + this.maxSize);\n      var a = this.tensors[e] || {};\n      if (t.dtype !== this.dtype) throw new Error(\"TensorArray \" + this.name + \": Could not write to TensorArray index \" + e + \",\\n          because the value dtype is \" + t.dtype + \", but TensorArray dtype is \" + this.dtype + \".\");\n      if (0 !== this.size() || null != this.elementShape && 0 !== this.elementShape.length || (this.elementShape = t.shape), this.assertShapesMatchAllowUndefinedSize(this.elementShape, t.shape, \"TensorArray \" + this.name + \": Could not write to TensorArray index \" + e + \".\"), a && a.read) throw new Error(\"TensorArray \" + this.name + \": Could not write to TensorArray index \" + e + \", because it has already been read.\");\n      if (a && a.written) throw new Error(\"TensorArray \" + this.name + \": Could not write to TensorArray index \" + e + \", because it has already been written.\");\n      a.tensor = t, a.written = !0, this.tensors[e] = a;\n    }, e.prototype.writeMany = function (e, t) {\n      var a = this;\n      if (e.length !== t.length) throw new Error(\"TensorArray \" + this.name + \": could not write multiple tensors,because the index size: \" + e.length + \" is not the same as tensors size: \" + t.length + \".\");\n      e.forEach(function (e, r) {\n        return a.write(e, t[r]);\n      });\n    }, e.prototype.gather = function (e, t) {\n      if (t && t !== this.dtype) throw new Error(\"TensorArray dtype is \" + this.dtype + \" but gather requested dtype \" + t);\n      if (!e) {\n        e = [];\n        for (var a = 0; a < this.size(); a++) e.push(a);\n      }\n      if (0 === e.length) return tensor([], [0].concat(this.elementShape));\n      var r = this.readMany(e);\n      return this.assertShapesMatchAllowUndefinedSize(this.elementShape, r[0].shape, \"TensorArray shape mismatch: \"), stack(r, 0);\n    }, e.prototype.concat = function (e) {\n      if (e && e !== this.dtype) throw new Error(\"TensorArray dtype is \" + this.dtype + \" but concat requested dtype \" + e);\n      if (0 === this.size()) return tensor([], [0].concat(this.elementShape));\n      for (var t = [], a = 0; a < this.size(); a++) t.push(a);\n      var r = this.readMany(t);\n      return this.assertShapesMatchAllowUndefinedSize(this.elementShape, r[0].shape, \"TensorArray shape mismatch: tensor array shape (\" + this.elementShape + \") vs first tensor shape (\" + r[0].shape + \")\"), concat(r, 0);\n    }, e.prototype.scatter = function (e, t) {\n      if (t.dtype !== this.dtype) throw new Error(\"TensorArray dtype is \" + this.dtype + \" but tensor has dtype \" + t.dtype);\n      if (e.length !== t.shape[0]) throw new Error(\"Expected len(indices) == tensor.shape[0], but saw: \" + e.length + \" vs. \" + t.shape[0]);\n      var a = Math.max.apply(Math, e);\n      if (!this.dynamicSize && a >= this.maxSize) throw new Error(\"Max index must be < array size (\" + a + \"  vs. \" + this.maxSize + \")\");\n      this.writeMany(e, unstack(t, 0));\n    }, e.prototype.split = function (e, t) {\n      var a = this;\n      if (t.dtype !== this.dtype) throw new Error(\"TensorArray dtype is \" + this.dtype + \" but tensor has dtype \" + t.dtype);\n      var r = 0,\n        n = e.map(function (e) {\n          return r += e;\n        });\n      if (r !== t.shape[0]) throw new Error(\"Expected sum of lengths to be equal to\\n          tensor.shape[0], but sum of lengths is\\n        \" + r + \", and tensor's shape is: \" + t.shape);\n      if (!this.dynamicSize && e.length !== this.maxSize) throw new Error(\"TensorArray's size is not equal to the size of lengths (\" + this.maxSize + \" vs. \" + e.length + \"), and the TensorArray is not marked as dynamically resizeable\");\n      var s = 0 === r ? 0 : t.size / r,\n        o = [];\n      tidy(function () {\n        t = t.reshape([1, r, s]);\n        for (var p = 0; p < e.length; ++p) {\n          var u = [0, 0 === p ? 0 : n[p - 1], 0],\n            i = [1, e[p], s];\n          o[p] = slice(t, u, i).reshape(a.elementShape);\n        }\n        return o;\n      });\n      for (var p = [], u = 0; u < e.length; u++) p[u] = u;\n      this.writeMany(p, o);\n    }, e.prototype.assertShapesMatchAllowUndefinedSize = function (e, t, a) {\n      void 0 === a && (a = \"\"), util.assert(this.shapesEqualAllowUndefinedSize(e, t), function () {\n        return a + \" Shapes \" + e + \" and \" + t + \" must match\";\n      });\n    }, e.prototype.shapesEqualAllowUndefinedSize = function (e, t) {\n      if (e.length !== t.length) return !1;\n      for (var a = 0; a < e.length; a++) if (-1 !== e[a] && -1 !== t[a] && e[a] !== t[a]) return !1;\n      return !0;\n    }, e.nextId = 0, e;\n  }();\nfunction executeOp$2(e, t, a) {\n  return __awaiter(this, void 0, void 0, function () {\n    var r, n, s, o, p, u, i, m, l, c, d, y, f, g, h, N, x, V, P, b, T, O, S, v, _, w, A, D, E, I, C, M, k, z, j;\n    return __generator(this, function (F) {\n      switch (F.label) {\n        case 0:\n          switch (e.op) {\n            case \"LoopCond\":\n              return [3, 1];\n            case \"Switch\":\n              return [3, 2];\n            case \"Merge\":\n              return [3, 4];\n            case \"Enter\":\n              return [3, 5];\n            case \"Exit\":\n              return [3, 6];\n            case \"NextIteration\":\n              return [3, 7];\n            case \"TensorArrayV3\":\n              return [3, 8];\n            case \"TensorArrayWriteV3\":\n              return [3, 9];\n            case \"TensorArrayReadV3\":\n              return [3, 10];\n            case \"TensorArrayGatherV3\":\n              return [3, 11];\n            case \"TensorArrayScatterV3\":\n              return [3, 12];\n            case \"TensorArrayConcatV3\":\n              return [3, 13];\n            case \"TensorArraySplitV3\":\n              return [3, 14];\n            case \"TensorArraySizeV3\":\n              return [3, 15];\n            case \"TensorArrayCloseV3\":\n              return [3, 16];\n          }\n          return [3, 17];\n        case 1:\n          return [2, [getParamValue(\"pred\", e, t, a).clone()]];\n        case 2:\n          return r = getParamValue(\"pred\", e, t, a), n = getParamValue(\"data\", e, t, a), [4, r.data()];\n        case 3:\n          return [2, F.sent()[0] ? [void 0, n.clone()] : [n.clone(), void 0]];\n        case 4:\n          return [2, (s = e.inputNames.find(function (e) {\n            return void 0 !== getTensor(e, t, a);\n          })) ? [getTensor(s, t, a).clone()] : void 0];\n        case 5:\n          return o = getParamValue(\"frameName\", e, t, a), p = getParamValue(\"tensor\", e, t, a), a.enterFrame(o), [2, [p.clone()]];\n        case 6:\n          return u = getParamValue(\"tensor\", e, t, a), a.exitFrame(), [2, [u.clone()]];\n        case 7:\n          return i = getParamValue(\"tensor\", e, t, a), a.nextIteration(), [2, [i.clone()]];\n        case 8:\n          return m = getParamValue(\"size\", e, t, a), l = getParamValue(\"dtype\", e, t, a), c = getParamValue(\"elementShape\", e, t, a), d = getParamValue(\"dynamicSize\", e, t, a), y = getParamValue(\"clearAfterRead\", e, t, a), f = getParamValue(\"identicalElementShapes\", e, t, a), g = getParamValue(\"name\", e, t, a), h = new TensorArray(g, l, m, c, f, d, y), a.addTensorArray(h), [2, [scalar(h.id), scalar(1)]];\n        case 9:\n          return N = getParamValue(\"tensorArrayId\", e, t, a), x = getParamValue(\"index\", e, t, a), V = getParamValue(\"tensor\", e, t, a), a.getTensorArray(N).write(x, V), [2, [scalar(1)]];\n        case 10:\n          return P = getParamValue(\"tensorArrayId\", e, t, a), b = getParamValue(\"index\", e, t, a), [2, [a.getTensorArray(P).read(b)]];\n        case 11:\n          return T = getParamValue(\"tensorArrayId\", e, t, a), O = getParamValue(\"indices\", e, t, a), S = getParamValue(\"dtype\", e, t, a), [2, [a.getTensorArray(T).gather(O, S)]];\n        case 12:\n          return v = getParamValue(\"tensorArrayId\", e, t, a), _ = getParamValue(\"indices\", e, t, a), w = getParamValue(\"tensor\", e, t, a), a.getTensorArray(v).scatter(_, w), [2, [scalar(1)]];\n        case 13:\n          return A = getParamValue(\"tensorArrayId\", e, t, a), D = a.getTensorArray(A), E = getParamValue(\"dtype\", e, t, a), [2, [D.concat(E)]];\n        case 14:\n          return I = getParamValue(\"tensorArrayId\", e, t, a), C = getParamValue(\"tensor\", e, t, a), M = getParamValue(\"lengths\", e, t, a), a.getTensorArray(I).split(M, C), [2, [scalar(1)]];\n        case 15:\n          return k = getParamValue(\"tensorArrayId\", e, t, a), z = a.getTensorArray(k), [2, [scalar(z.size(), \"int32\")]];\n        case 16:\n          return j = getParamValue(\"tensorArrayId\", e, t, a), a.getTensorArray(j).clearAndClose(), [2, []];\n        case 17:\n          throw TypeError(\"Node type \" + e.op + \" is not implemented\");\n      }\n    });\n  });\n}\nvar executeOp$3 = function (e, t, a) {\n    var r, n;\n    switch (e.op) {\n      case \"Conv1D\":\n        var s = getParamValue(\"stride\", e, t, a),\n          o = getParamValue(\"pad\", e, t, a),\n          p = getParamValue(\"dataFormat\", e, t, a).toUpperCase(),\n          u = getParamValue(\"dilation\", e, t, a);\n        return [conv1d(getParamValue(\"x\", e, t, a), getParamValue(\"filter\", e, t, a), s, o, p, u)];\n      case \"Conv2D\":\n        s = getParamValue(\"strides\", e, t, a), o = getParamValue(\"pad\", e, t, a), p = getParamValue(\"dataFormat\", e, t, a).toUpperCase();\n        var i = getParamValue(\"dilations\", e, t, a);\n        return [conv2d(getParamValue(\"x\", e, t, a), getParamValue(\"filter\", e, t, a), [s[1], s[2]], o, p, [i[1], i[2]])];\n      case \"_FusedConv2D\":\n        var m = (r = getParamValue(\"fusedOps\", e, t, a))[0],\n          l = r[1],\n          c = \"biasadd\" === m,\n          d = \"prelu\" === l,\n          y = \"fusedbatchnorm\" === m,\n          f = getParamValue(\"numArgs\", e, t, a);\n        if (c) {\n          if (d && 2 !== f) throw new Error(\"Fused Conv2d with BiasAdd and Prelu must have two extra arguments: bias and alpha.\");\n          if (!d && 1 !== f) throw new Error(\"Fused Conv2d with BiasAdd must have one extra argument: bias.\");\n        }\n        if (y) throw new Error(\"Fused Conv2d with FusedBatchNorm is not supported.\");\n        s = getParamValue(\"strides\", e, t, a), o = getParamValue(\"pad\", e, t, a), p = getParamValue(\"dataFormat\", e, t, a).toUpperCase(), i = getParamValue(\"dilations\", e, t, a);\n        var g = (n = getParamValue(\"args\", e, t, a))[0],\n          h = n[1];\n        return [fused.conv2d({\n          x: getParamValue(\"x\", e, t, a),\n          filter: getParamValue(\"filter\", e, t, a),\n          strides: [s[1], s[2]],\n          pad: o,\n          dataFormat: p,\n          dilations: [i[1], i[2]],\n          bias: g,\n          activation: l,\n          preluActivationWeights: h\n        })];\n      case \"Conv2DBackpropInput\":\n      case \"Conv2dTranspose\":\n        var N = getParamValue(\"outputShape\", e, t, a);\n        s = getParamValue(\"strides\", e, t, a), o = getParamValue(\"pad\", e, t, a);\n        return [conv2dTranspose(getParamValue(\"x\", e, t, a), getParamValue(\"filter\", e, t, a), N, [s[1], s[2]], o)];\n      case \"DepthwiseConv2dNative\":\n      case \"DepthwiseConv2d\":\n        s = getParamValue(\"strides\", e, t, a), o = getParamValue(\"pad\", e, t, a), i = getParamValue(\"dilations\", e, t, a), p = getParamValue(\"dataFormat\", e, t, a).toUpperCase();\n        return [depthwiseConv2d(getParamValue(\"input\", e, t, a), getParamValue(\"filter\", e, t, a), [s[1], s[2]], o, p, [i[1], i[2]])];\n      case \"Conv3D\":\n        s = getParamValue(\"strides\", e, t, a), o = getParamValue(\"pad\", e, t, a), p = getParamValue(\"dataFormat\", e, t, a).toUpperCase(), i = getParamValue(\"dilations\", e, t, a);\n        return [conv3d(getParamValue(\"x\", e, t, a), getParamValue(\"filter\", e, t, a), [s[1], s[2], s[3]], o, p, [i[1], i[2], i[3]])];\n      case \"AvgPool\":\n        s = getParamValue(\"strides\", e, t, a), o = getParamValue(\"pad\", e, t, a);\n        var x = getParamValue(\"kernelSize\", e, t, a);\n        return [avgPool(getParamValue(\"x\", e, t, a), [x[1], x[2]], [s[1], s[2]], o)];\n      case \"MaxPool\":\n        s = getParamValue(\"strides\", e, t, a), o = getParamValue(\"pad\", e, t, a), x = getParamValue(\"kernelSize\", e, t, a);\n        return [maxPool(getParamValue(\"x\", e, t, a), [x[1], x[2]], [s[1], s[2]], o)];\n      case \"AvgPool3D\":\n        s = getParamValue(\"strides\", e, t, a), o = getParamValue(\"pad\", e, t, a), x = getParamValue(\"kernelSize\", e, t, a);\n        return [avgPool3d(getParamValue(\"x\", e, t, a), [x[1], x[2], x[3]], [s[1], s[2], s[3]], o)];\n      case \"MaxPool3D\":\n        s = getParamValue(\"strides\", e, t, a), o = getParamValue(\"pad\", e, t, a), x = getParamValue(\"kernelSize\", e, t, a);\n        return [maxPool3d(getParamValue(\"x\", e, t, a), [x[1], x[2], x[3]], [s[1], s[2], s[3]], o)];\n      default:\n        throw TypeError(\"Node type \" + e.op + \" is not implemented\");\n    }\n  },\n  executeOp$4 = function (e, t, a) {\n    switch (e.op) {\n      case \"Fill\":\n        var r = getParamValue(\"shape\", e, t, a),\n          n = getParamValue(\"dtype\", e, t, a),\n          s = getParamValue(\"value\", e, t, a);\n        return [fill(r, s, n)];\n      case \"LinSpace\":\n        var o = getParamValue(\"start\", e, t, a),\n          p = getParamValue(\"stop\", e, t, a),\n          u = getParamValue(\"num\", e, t, a);\n        return [linspace(o, p, u)];\n      case \"Multinomial\":\n        var i = getParamValue(\"logits\", e, t, a),\n          m = getParamValue(\"numSamples\", e, t, a),\n          l = getParamValue(\"seed\", e, t, a);\n        return [multinomial(i, m, l)];\n      case \"OneHot\":\n        var c = getParamValue(\"indices\", e, t, a),\n          d = getParamValue(\"depth\", e, t, a),\n          y = getParamValue(\"onValue\", e, t, a),\n          f = getParamValue(\"offValue\", e, t, a);\n        return [oneHot(c, d, y, f)];\n      case \"Ones\":\n        return [ones(getParamValue(\"shape\", e, t, a), getParamValue(\"dtype\", e, t, a))];\n      case \"OnesLike\":\n        return [onesLike(getParamValue(\"x\", e, t, a))];\n      case \"RandomUniform\":\n        return [randomUniform(getParamValue(\"shape\", e, t, a), getParamValue(\"minval\", e, t, a), getParamValue(\"maxval\", e, t, a), getParamValue(\"dtype\", e, t, a))];\n      case \"Range\":\n        o = getParamValue(\"start\", e, t, a);\n        var g = getParamValue(\"stop\", e, t, a),\n          h = getParamValue(\"step\", e, t, a);\n        return [range(o, g, h, getParamValue(\"dtype\", e, t, a))];\n      case \"TruncatedNormal\":\n        r = getParamValue(\"shape\", e, t, a);\n        var N = getParamValue(\"mean\", e, t, a),\n          x = getParamValue(\"stdDev\", e, t, a);\n        l = getParamValue(\"seed\", e, t, a);\n        return [truncatedNormal(r, N, x, getParamValue(\"dtype\", e, t, a), l)];\n      case \"Zeros\":\n        return [zeros(getParamValue(\"shape\", e, t, a), getParamValue(\"dtype\", e, t, a))];\n      case \"ZerosLike\":\n        return [zerosLike(getParamValue(\"x\", e, t, a))];\n      default:\n        throw TypeError(\"Node type \" + e.op + \" is not implemented\");\n    }\n  };\nfunction executeOp$5(e, t, a) {\n  return __awaiter(this, void 0, void 0, function () {\n    var r, n, s, o, p;\n    return __generator(this, function (u) {\n      switch (u.label) {\n        case 0:\n          switch (e.op) {\n            case \"NonMaxSuppressionV3\":\n            case \"NonMaxSuppressionV2\":\n              return [3, 1];\n            case \"Where\":\n              return [3, 3];\n            case \"ListDiff\":\n              return [3, 5];\n          }\n          return [3, 6];\n        case 1:\n          return r = getParamValue(\"boxes\", e, t, a), n = getParamValue(\"scores\", e, t, a), s = getParamValue(\"maxOutputSize\", e, t, a), o = getParamValue(\"iouThreshold\", e, t, a), p = getParamValue(\"scoreThreshold\", e, t, a), [4, image.nonMaxSuppressionAsync(r, n, s, o, p)];\n        case 2:\n          return [2, [u.sent()]];\n        case 3:\n          return [4, whereAsync(getParamValue(\"condition\", e, t, a).asType(\"bool\"))];\n        case 4:\n          return [2, [u.sent()]];\n        case 5:\n          return [2, setdiff1dAsync(getParamValue(\"x\", e, t, a), getParamValue(\"y\", e, t, a))];\n        case 6:\n          throw TypeError(\"Node type \" + e.op + \" is not implemented\");\n      }\n    });\n  });\n}\nvar executeOp$6 = function (e, t, a) {\n    switch (e.op) {\n      case \"TopKV2\":\n        var r = getParamValue(\"x\", e, t, a),\n          n = getParamValue(\"k\", e, t, a),\n          s = getParamValue(\"sorted\", e, t, a),\n          o = topk(r, n, s);\n        return [o.values, o.indices];\n      default:\n        throw TypeError(\"Node type \" + e.op + \" is not implemented\");\n    }\n  },\n  executeOp$7 = function (e, t, a) {\n    switch (e.op) {\n      case \"Const\":\n        return t[e.name];\n      case \"PlaceholderWithDefault\":\n        var r = getParamValue(\"default\", e, t, a);\n        return [getTensor(e.name, t, a) || r];\n      case \"Placeholder\":\n        return [getTensor(e.name, t, a)];\n      case \"Identity\":\n      case \"StopGradient\":\n      case \"FakeQuantWithMinMaxVars\":\n        return [getParamValue(\"x\", e, t, a).clone()];\n      case \"IdentityN\":\n        return getParamValue(\"x\", e, t, a).map(function (e) {\n          return e.clone();\n        });\n      case \"Snapshot\":\n        return [getParamValue(\"x\", e, t, a).clone()];\n      case \"Shape\":\n        return [tensor1d(getParamValue(\"x\", e, t, a).shape, \"int32\")];\n      case \"ShapeN\":\n        return getParamValue(\"x\", e, t, a).map(function (e) {\n          return tensor1d(e.shape);\n        });\n      case \"Size\":\n        return [scalar(getParamValue(\"x\", e, t, a).size, \"int32\")];\n      case \"Rank\":\n        return [scalar(getParamValue(\"x\", e, t, a).rank, \"int32\")];\n      case \"NoOp\":\n        return [];\n      case \"Print\":\n        var n = getParamValue(\"x\", e, t, a),\n          s = getParamValue(\"data\", e, t, a),\n          o = getParamValue(\"message\", e, t, a),\n          p = getParamValue(\"summarize\", e, t, a);\n        console.warn(\"The graph has a tf.print() operation,usually used for debugging, which slows down performance.\"), console.log(o);\n        for (var u = 0; u < s.length; u++) console.log(Array.prototype.slice.call(s[u].dataSync()).slice(0, p));\n        return [n];\n      default:\n        throw TypeError(\"Node type \" + e.op + \" is not implemented\");\n    }\n  },\n  executeOp$8 = function (e, t, a) {\n    switch (e.op) {\n      case \"ResizeBilinear\":\n        var r = getParamValue(\"images\", e, t, a),\n          n = getParamValue(\"size\", e, t, a),\n          s = getParamValue(\"alignCorners\", e, t, a);\n        return [image.resizeBilinear(r, [n[0], n[1]], s)];\n      case \"ResizeNearestNeighbor\":\n        r = getParamValue(\"images\", e, t, a), n = getParamValue(\"size\", e, t, a), s = getParamValue(\"alignCorners\", e, t, a);\n        return [image.resizeNearestNeighbor(r, [n[0], n[1]], s)];\n      case \"CropAndResize\":\n        var o = getParamValue(\"image\", e, t, a),\n          p = getParamValue(\"boxes\", e, t, a),\n          u = getParamValue(\"boxInd\", e, t, a),\n          i = getParamValue(\"cropSize\", e, t, a),\n          m = getParamValue(\"method\", e, t, a),\n          l = getParamValue(\"extrapolationValue\", e, t, a);\n        return [image.cropAndResize(o, p, u, i, m, l)];\n      default:\n        throw TypeError(\"Node type \" + e.op + \" is not implemented\");\n    }\n  },\n  executeOp$9 = function (e, t, a) {\n    switch (e.op) {\n      case \"Equal\":\n        return [equal(getParamValue(\"a\", e, t, a), getParamValue(\"b\", e, t, a))];\n      case \"NotEqual\":\n        return [notEqual(getParamValue(\"a\", e, t, a), getParamValue(\"b\", e, t, a))];\n      case \"Greater\":\n        return [greater(getParamValue(\"a\", e, t, a), getParamValue(\"b\", e, t, a))];\n      case \"GreaterEqual\":\n        return [greaterEqual(getParamValue(\"a\", e, t, a), getParamValue(\"b\", e, t, a))];\n      case \"Less\":\n        return [less(getParamValue(\"a\", e, t, a), getParamValue(\"b\", e, t, a))];\n      case \"LessEqual\":\n        return [lessEqual(getParamValue(\"a\", e, t, a), getParamValue(\"b\", e, t, a))];\n      case \"LogicalAnd\":\n        return [logicalAnd(getParamValue(\"a\", e, t, a), getParamValue(\"b\", e, t, a))];\n      case \"LogicalNot\":\n        return [logicalNot(getParamValue(\"a\", e, t, a))];\n      case \"LogicalOr\":\n        return [logicalOr(getParamValue(\"a\", e, t, a), getParamValue(\"b\", e, t, a))];\n      case \"Select\":\n        return [where(getParamValue(\"condition\", e, t, a), getParamValue(\"a\", e, t, a), getParamValue(\"b\", e, t, a))];\n      default:\n        throw TypeError(\"Node type \" + e.op + \" is not implemented\");\n    }\n  },\n  executeOp$10 = function (e, t, a) {\n    switch (e.op) {\n      case \"BatchMatMul\":\n      case \"BatchMatMulV2\":\n      case \"MatMul\":\n        return [matMul(getParamValue(\"a\", e, t, a), getParamValue(\"b\", e, t, a), getParamValue(\"transposeA\", e, t, a), getParamValue(\"transposeB\", e, t, a))];\n      case \"Transpose\":\n        return [transpose(getParamValue(\"x\", e, t, a), getParamValue(\"perm\", e, t, a))];\n      default:\n        throw TypeError(\"Node type \" + e.op + \" is not implemented\");\n    }\n  },\n  executeOp$11 = function (e, t, a) {\n    switch (e.op) {\n      case \"FusedBatchNorm\":\n      case \"FusedBatchNormV2\":\n      case \"FusedBatchNormV3\":\n        return [batchNorm(getParamValue(\"x\", e, t, a), getParamValue(\"mean\", e, t, a), getParamValue(\"variance\", e, t, a), getParamValue(\"offset\", e, t, a), getParamValue(\"scale\", e, t, a), getParamValue(\"epsilon\", e, t, a))];\n      case \"LRN\":\n        return [localResponseNormalization(getParamValue(\"x\", e, t, a), getParamValue(\"radius\", e, t, a), getParamValue(\"bias\", e, t, a), getParamValue(\"alpha\", e, t, a), getParamValue(\"beta\", e, t, a))];\n      case \"Softmax\":\n        return [softmax(getParamValue(\"x\", e, t, a))];\n      case \"LogSoftmax\":\n        return [logSoftmax(getParamValue(\"x\", e, t, a))];\n      case \"SparseToDense\":\n        return [sparseToDense(getParamValue(\"sparseIndices\", e, t, a), getParamValue(\"outputShape\", e, t, a), getParamValue(\"sparseValues\", e, t, a), getParamValue(\"defaultValue\", e, t, a))];\n      default:\n        throw TypeError(\"Node type \" + e.op + \" is not implemented\");\n    }\n  },\n  executeOp$12 = function (e, t, a) {\n    switch (e.op) {\n      case \"Max\":\n        var r = getParamValue(\"axis\", e, t, a),\n          n = getParamValue(\"keepDims\", e, t, a);\n        return [max(getParamValue(\"x\", e, t, a), r, n)];\n      case \"Mean\":\n        r = getParamValue(\"axis\", e, t, a), n = getParamValue(\"keepDims\", e, t, a);\n        return [mean(getParamValue(\"x\", e, t, a), r, n)];\n      case \"Min\":\n        r = getParamValue(\"axis\", e, t, a), n = getParamValue(\"keepDims\", e, t, a);\n        return [min(getParamValue(\"x\", e, t, a), r, n)];\n      case \"Sum\":\n        r = getParamValue(\"axis\", e, t, a), n = getParamValue(\"keepDims\", e, t, a);\n        return [sum(getParamValue(\"x\", e, t, a), r, n)];\n      case \"All\":\n        r = getParamValue(\"axis\", e, t, a), n = getParamValue(\"keepDims\", e, t, a);\n        return [all(getParamValue(\"x\", e, t, a), r, n)];\n      case \"Any\":\n        r = getParamValue(\"axis\", e, t, a), n = getParamValue(\"keepDims\", e, t, a);\n        return [any(getParamValue(\"x\", e, t, a), r, n)];\n      case \"ArgMax\":\n        r = getParamValue(\"axis\", e, t, a);\n        return [argMax(getParamValue(\"x\", e, t, a), r)];\n      case \"ArgMin\":\n        r = getParamValue(\"axis\", e, t, a);\n        return [argMin(getParamValue(\"x\", e, t, a), r)];\n      case \"Prod\":\n        r = getParamValue(\"axis\", e, t, a), n = getParamValue(\"keepDims\", e, t, a);\n        return [prod(getParamValue(\"x\", e, t, a), r, n)];\n      default:\n        throw TypeError(\"Node type \" + e.op + \" is not implemented\");\n    }\n  },\n  executeOp$13 = function (e, t, a) {\n    switch (e.op) {\n      case \"ConcatV2\":\n      case \"Concat\":\n        var r = getParamValue(\"axis\", e, t, a),\n          n = getParamValue(\"tensors\", e, t, a);\n        return [concat(n, r)];\n      case \"GatherV2\":\n      case \"Gather\":\n        r = getParamValue(\"axis\", e, t, a);\n        var s = getParamValue(\"x\", e, t, a),\n          o = getParamValue(\"indices\", e, t, a);\n        return [gather(s, o.asType(\"int32\"), r)];\n      case \"ReverseV2\":\n      case \"Reverse\":\n        r = getParamValue(\"axis\", e, t, a), s = getParamValue(\"x\", e, t, a);\n        return [reverse(s, r)];\n      case \"Slice\":\n        var p = getParamValue(\"begin\", e, t, a),\n          u = getParamValue(\"size\", e, t, a);\n        return [slice(getParamValue(\"x\", e, t, a), p, u)];\n      case \"StridedSlice\":\n        p = getParamValue(\"begin\", e, t, a);\n        var i = getParamValue(\"end\", e, t, a),\n          m = getParamValue(\"strides\", e, t, a),\n          l = getParamValue(\"beginMask\", e, t, a),\n          c = getParamValue(\"endMask\", e, t, a),\n          d = getParamValue(\"ellipsisMask\", e, t, a),\n          y = getParamValue(\"newAxisMask\", e, t, a),\n          f = getParamValue(\"shrinkAxisMask\", e, t, a),\n          g = getParamValue(\"x\", e, t, a);\n        if (1 === p.length && g.shape.length > 1) for (var h = 1; h < g.shape.length; h++) p.push(0), i.push(g.shape[h]), m.push(m[0]);\n        return [stridedSlice(g, p, i, m, l, c, d, y, f)];\n      case \"Pack\":\n        return tidy(function () {\n          var r = getParamValue(\"axis\", e, t, a),\n            n = getParamValue(\"tensors\", e, t, a),\n            s = n[0].shape,\n            o = n[0].squeeze().shape,\n            p = n.map(function (e) {\n              var t = util.arraysEqual(e.shape, s);\n              if (!t && !util.arraysEqual(e.squeeze().shape, o)) throw new Error(\"the input tensors shape does not match\");\n              return t ? e : e.reshape(s);\n            });\n          return [stack(p, r)];\n        });\n      case \"Unpack\":\n        return tidy(function () {\n          var r = getParamValue(\"axis\", e, t, a),\n            n = getParamValue(\"tensor\", e, t, a);\n          return unstack(n, r);\n        });\n      case \"Tile\":\n        var N = getParamValue(\"reps\", e, t, a);\n        return [tile(getParamValue(\"x\", e, t, a), N)];\n      case \"Split\":\n      case \"SplitV\":\n        r = getParamValue(\"axis\", e, t, a);\n        var x = getParamValue(\"numOrSizeSplits\", e, t, a);\n        return split(getParamValue(\"x\", e, t, a), x, r);\n      case \"ScatterNd\":\n        o = getParamValue(\"indices\", e, t, a);\n        var V = getParamValue(\"values\", e, t, a),\n          P = getParamValue(\"shape\", e, t, a);\n        return [scatterND(o, V, P)];\n      case \"GatherNd\":\n        var b = getParamValue(\"x\", e, t, a);\n        o = getParamValue(\"indices\", e, t, a);\n        return [gatherND(b, o)];\n      case \"SparseToDense\":\n        o = getParamValue(\"sparseIndices\", e, t, a), P = getParamValue(\"outputShape\", e, t, a);\n        var T = getParamValue(\"sparseValues\", e, t, a),\n          O = getParamValue(\"defaultValue\", e, t, a);\n        return [sparseToDense(o, T, P, T.dtype === O.dtype ? O : O.asType(T.dtype))];\n      default:\n        throw TypeError(\"Node type \" + e.op + \" is not implemented\");\n    }\n  },\n  executeOp$14 = function (e, t, a) {\n    switch (e.op) {\n      case \"FFT\":\n        return [fft(getParamValue(\"x\", e, t, a))];\n      case \"IFFT\":\n        return [ifft(getParamValue(\"x\", e, t, a))];\n      case \"RFFT\":\n        return [rfft(getParamValue(\"x\", e, t, a))];\n      case \"IRFFT\":\n        return [irfft(getParamValue(\"x\", e, t, a))];\n      default:\n        throw TypeError(\"Node type \" + e.op + \" is not implemented\");\n    }\n  },\n  executeOp$15 = function (e, t, a) {\n    switch (e.op) {\n      case \"Cast\":\n        return [cast(getParamValue(\"x\", e, t, a), getParamValue(\"dtype\", e, t, a))];\n      case \"ExpandDims\":\n        var r = getParamValue(\"axis\", e, t, a);\n        return [expandDims(getParamValue(\"x\", e, t, a), r)];\n      case \"Squeeze\":\n        r = getParamValue(\"axis\", e, t, a);\n        return [squeeze(getParamValue(\"x\", e, t, a), r)];\n      case \"Reshape\":\n        return [reshape(getParamValue(\"x\", e, t, a), getParamValue(\"shape\", e, t, a))];\n      case \"PadV2\":\n      case \"Pad\":\n        return [pad(getParamValue(\"x\", e, t, a), split$1(getParamValue(\"padding\", e, t, a), 2), getParamValue(\"constantValue\", e, t, a))];\n      case \"SpaceToBatchND\":\n        var n = getParamValue(\"blockShape\", e, t, a),\n          s = split$1(getParamValue(\"paddings\", e, t, a), 2);\n        return [spaceToBatchND(getParamValue(\"x\", e, t, a), n, s)];\n      case \"BatchToSpaceND\":\n        n = getParamValue(\"blockShape\", e, t, a);\n        var o = split$1(getParamValue(\"crops\", e, t, a), 2);\n        return [batchToSpaceND(getParamValue(\"x\", e, t, a), n, o)];\n      case \"DepthToSpace\":\n        var p = getParamValue(\"blockSize\", e, t, a),\n          u = getParamValue(\"dataFormat\", e, t, a).toUpperCase();\n        return [depthToSpace(getParamValue(\"x\", e, t, a), p, u)];\n      default:\n        throw TypeError(\"Node type \" + e.op + \" is not implemented\");\n    }\n  };\nfunction executeOp$16(e, t, a) {\n  var r = function (e, t, a) {\n    switch (e.category) {\n      case \"arithmetic\":\n        return executeOp(e, t, a);\n      case \"basic_math\":\n        return executeOp$1(e, t, a);\n      case \"control\":\n        return executeOp$2(e, t, a);\n      case \"convolution\":\n        return executeOp$3(e, t, a);\n      case \"creation\":\n        return executeOp$4(e, t, a);\n      case \"dynamic\":\n        return executeOp$5(e, t, a);\n      case \"evaluation\":\n        return executeOp$6(e, t, a);\n      case \"image\":\n        return executeOp$8(e, t, a);\n      case \"graph\":\n        return executeOp$7(e, t, a);\n      case \"logical\":\n        return executeOp$9(e, t, a);\n      case \"matrices\":\n        return executeOp$10(e, t, a);\n      case \"normalization\":\n        return executeOp$11(e, t, a);\n      case \"reduction\":\n        return executeOp$12(e, t, a);\n      case \"slice_join\":\n        return executeOp$13(e, t, a);\n      case \"spectral\":\n        return executeOp$14(e, t, a);\n      case \"transformation\":\n        return executeOp$15(e, t, a);\n      case \"custom\":\n        var r = getRegisteredOp(e.op);\n        if (r && r.customExecutor) return r.customExecutor(new NodeValueImpl(e, t, a));\n        throw TypeError(\"Custom op \" + e.op + \" is not registered.\");\n      default:\n        throw TypeError(\"Unknown op '\" + e.op + \"'. File an issue at https://github.com/tensorflow/tfjs/issues so we can add it, or register a custom execution with tf.registerOp()\");\n    }\n  }(e, t, a);\n  return r instanceof Promise ? r.then(function (e) {\n    return [].concat(e);\n  }) : [].concat(r);\n}\nvar ExecutionContext = function () {\n  function e(e, t) {\n    this.weightMap = e, this.tensorArrayMap = t, this.rootContext = {\n      id: 0,\n      frameName: \"\",\n      iterationId: 0\n    }, this.contexts = [this.rootContext], this.lastId = 0, this.generateCurrentContextIds();\n  }\n  return e.prototype.newFrame = function (e, t) {\n    return {\n      id: e,\n      frameName: t,\n      iterationId: 0\n    };\n  }, Object.defineProperty(e.prototype, \"currentContext\", {\n    get: function () {\n      return this.contexts;\n    },\n    set: function (e) {\n      this.contexts !== e && (this.contexts = e, this.generateCurrentContextIds());\n    },\n    enumerable: !0,\n    configurable: !0\n  }), Object.defineProperty(e.prototype, \"currentContextId\", {\n    get: function () {\n      return this._currentContextIds[0];\n    },\n    enumerable: !0,\n    configurable: !0\n  }), Object.defineProperty(e.prototype, \"currentContextIds\", {\n    get: function () {\n      return this._currentContextIds;\n    },\n    enumerable: !0,\n    configurable: !0\n  }), e.prototype.generateCurrentContextIds = function () {\n    for (var e = [], t = 0; t < this.contexts.length - 1; t++) {\n      var a = this.contexts.slice(0, this.contexts.length - t);\n      e.push(this.contextIdforContexts(a));\n    }\n    e.push(\"\"), this._currentContextIds = e;\n  }, e.prototype.contextIdforContexts = function (e) {\n    return e ? e.map(function (e) {\n      return 0 === e.id && 0 === e.iterationId ? \"\" : e.frameName + \"-\" + e.iterationId;\n    }).join(\"/\") : \"\";\n  }, e.prototype.enterFrame = function (e) {\n    this.contexts && (this.lastId++, this.contexts = this.contexts.slice(), this.contexts.push(this.newFrame(this.lastId, e)), this._currentContextIds.unshift(this.contextIdforContexts(this.contexts)));\n  }, e.prototype.exitFrame = function () {\n    if (!(this.contexts && this.contexts.length > 1)) throw new Error(\"Cannot exit frame, the context is empty\");\n    this.contexts = this.contexts.slice(), this.contexts.splice(-1), this.currentContextIds.shift();\n  }, e.prototype.nextIteration = function () {\n    if (!(this.contexts && this.contexts.length > 0)) throw new Error(\"Cannot increase frame iteration, the context is empty\");\n    this.contexts = this.contexts.slice(), this.lastId++;\n    var e = Object.assign({}, this.contexts[this.contexts.length - 1]);\n    e.iterationId += 1, e.id = this.lastId, this.contexts.splice(-1, 1, e), this._currentContextIds.splice(0, 1, this.contextIdforContexts(this.contexts));\n  }, e.prototype.getWeight = function (e) {\n    return this.weightMap[e];\n  }, e.prototype.addTensorArray = function (e) {\n    this.tensorArrayMap[e.id] = e;\n  }, e.prototype.getTensorArray = function (e) {\n    return this.tensorArrayMap[e];\n  }, e;\n}();\nfunction getExecutionSubgraph(e, t, a) {\n  for (var r = new Set(), n = [], s = null, o = null, p = new Set(), u = t.slice(); u.length > 0;) {\n    var i = u.pop();\n    (isControlFlow(i) || isDynamicShape(i)) && null == s && (o = (s = i).children.map(function (e) {\n      return e.name;\n    }).filter(function (e) {\n      return r.has(e);\n    })), r.add(i.name), null == a[i.name] && null == e[i.name] && (0 !== i.inputs.length ? i.inputs.forEach(function (e) {\n      p.has(e.name) || (p.add(e.name), u.push(e));\n    }) : n.push(i.name));\n  }\n  return {\n    inputs: e,\n    outputs: t,\n    usedNodes: r,\n    missingInputs: n,\n    dynamicNode: s,\n    syncInputs: o\n  };\n}\nfunction getNodesInTopologicalOrder(e, t, a) {\n  var r = a.usedNodes,\n    n = a.inputs,\n    s = [];\n  Object.keys(n).map(function (t) {\n    return e.nodes[t];\n  }).forEach(function (e) {\n    r.has(e.name) && s.push(e);\n  }), e.weights.forEach(function (e) {\n    r.has(e.name) && s.push(e);\n  });\n  for (var o = new Set(), p = []; s.length > 0;) {\n    var u = s.pop();\n    o.add(u.name), t[u.name] || p.push(u), u.children.forEach(function (e) {\n      !o.has(e.name) && r.has(e.name) && e.inputs.every(function (e) {\n        return o.has(e.name);\n      }) && s.push(e);\n    });\n  }\n  return p;\n}\nvar CONTROL_FLOW_OPS = [\"Switch\", \"Merge\", \"Enter\", \"Exit\", \"NextIteration\"],\n  DYNAMIC_SHAPE_OPS = [\"NonMaxSuppressionV2\", \"NonMaxSuppressionV3\", \"Where\"];\nfunction isControlFlow(e) {\n  return CONTROL_FLOW_OPS.indexOf(e.op) >= 0;\n}\nfunction isDynamicShape(e) {\n  return DYNAMIC_SHAPE_OPS.indexOf(e.op) >= 0;\n}\nvar GraphExecutor = function () {\n    function e(e) {\n      this.graph = e, this.compiledMap = new Map(), this._weightMap = {}, this.SEPERATOR = \",\", this.placeholders = e.placeholders, this._outputs = e.outputs;\n    }\n    return Object.defineProperty(e.prototype, \"weightMap\", {\n      get: function () {\n        return this._weightMap;\n      },\n      set: function (e) {\n        var t = Object.keys(e).map(function (t) {\n          return e[t].map(function (e) {\n            return e.id;\n          });\n        });\n        this.weightIds = [].concat.apply([], t), this._weightMap = e;\n      },\n      enumerable: !0,\n      configurable: !0\n    }), Object.defineProperty(e.prototype, \"inputs\", {\n      get: function () {\n        return this.placeholders.map(function (e) {\n          return {\n            name: e.name,\n            shape: e.attrParams.shape ? e.attrParams.shape.value : void 0,\n            dtype: e.attrParams.dtype ? e.attrParams.dtype.value : void 0\n          };\n        });\n      },\n      enumerable: !0,\n      configurable: !0\n    }), Object.defineProperty(e.prototype, \"outputs\", {\n      get: function () {\n        return this._outputs.map(function (e) {\n          return {\n            name: e.name,\n            shape: e.attrParams.shape ? e.attrParams.shape.value : void 0,\n            dtype: e.attrParams.dtype ? e.attrParams.dtype.value : void 0\n          };\n        });\n      },\n      enumerable: !0,\n      configurable: !0\n    }), Object.defineProperty(e.prototype, \"inputNodes\", {\n      get: function () {\n        return this.placeholders.map(function (e) {\n          return e.name;\n        });\n      },\n      enumerable: !0,\n      configurable: !0\n    }), Object.defineProperty(e.prototype, \"outputNodes\", {\n      get: function () {\n        return this.outputs.map(function (e) {\n          return e.name;\n        });\n      },\n      enumerable: !0,\n      configurable: !0\n    }), e.prototype.getCompilationKey = function (e, t) {\n      var a = e.map(function (e) {\n          return e.name;\n        }).sort(),\n        r = t.map(function (e) {\n          return e.name;\n        }).sort();\n      return a.join(this.SEPERATOR) + \"--\" + r.join(this.SEPERATOR);\n    }, e.prototype.compile = function (e, t) {\n      var a = getExecutionSubgraph(e, t, this.weightMap),\n        r = a.missingInputs,\n        n = a.dynamicNode,\n        s = a.syncInputs;\n      if (null != n) throw new Error(\"This execution contains the node '\" + n.name + \"', which has the dynamic op '\" + n.op + \"'. Please use model.executeAsync() instead. Alternatively, to avoid the dynamic ops, specify the inputs [\" + s + \"]\");\n      if (r.length > 0) {\n        var o = t.map(function (e) {\n            return e.name;\n          }),\n          p = Object.keys(e);\n        throw new Error(\"Cannot compute the outputs [\" + o + \"] from the provided inputs [\" + p + \"]. Missing the following inputs: [\" + r + \"]\");\n      }\n      return getNodesInTopologicalOrder(this.graph, this.weightMap, a);\n    }, e.prototype.execute = function (e, t) {\n      var a = this,\n        r = Object.keys(e).sort();\n      this.checkInputs(e), this.checkInputShapeAndType(e), this.checkOutputs(t);\n      var n = r.map(function (e) {\n          return a.graph.nodes[e];\n        }),\n        s = t.map(function (e) {\n          return a.graph.nodes[parseNodeName(e)[0]];\n        }),\n        o = this.getCompilationKey(n, s),\n        p = this.compiledMap.get(o);\n      null == p && (p = this.compile(e, s), this.compiledMap.set(o, p));\n      var u = {};\n      return tidy(function () {\n        var r = new ExecutionContext(a._weightMap, u),\n          n = __assign({}, a.weightMap);\n        Object.keys(e).forEach(function (t) {\n          n[t] = [e[t]];\n        });\n        for (var s = a.getFrozenTensorIds(n), o = {}, i = 0; i < p.length; i++) {\n          var m = p[i];\n          if (!n[m.name]) {\n            var l = executeOp$16(m, n, r);\n            if (l instanceof Promise) throw new Error(\"The execution of the op '\" + m.op + \"' returned a promise. Please use model.executeAsync() instead.\");\n            n[m.name] = l, a.checkTensorForDisposal(m.name, m, n, r, s, t, o);\n          }\n        }\n        return t.map(function (e) {\n          return getTensor(e, n, r);\n        });\n      });\n    }, e.prototype.getFrozenTensorIds = function (e) {\n      var t = [].concat.apply([], Object.keys(e).map(function (t) {\n        return e[t];\n      }).map(function (e) {\n        return e.map(function (e) {\n          return e.id;\n        });\n      }));\n      return new Set(t);\n    }, e.prototype.checkTensorForDisposal = function (e, t, a, r, n, s, o) {\n      \"control\" !== t.category && -1 === s.indexOf(e) && (a[e].forEach(function (e) {\n        null != e && (o[e.id] = (o[e.id] || 0) + t.children.length);\n      }), t.inputs.forEach(function (e) {\n        if (\"control\" !== e.category) {\n          var t = getTensorsForCurrentContenxt(e.name, a, r);\n          null != t && t.forEach(function (e) {\n            if (e && !n.has(e.id)) {\n              var t = o[e.id];\n              1 === t ? (e.dispose(), delete o[e.id]) : null != t && o[e.id]--;\n            }\n          });\n        }\n      }));\n    }, e.prototype.executeAsync = function (e, t) {\n      return __awaiter(this, void 0, void 0, function () {\n        var a,\n          r,\n          n,\n          s,\n          o,\n          p,\n          u = this;\n        return __generator(this, function (i) {\n          switch (i.label) {\n            case 0:\n              return this.checkInputs(e), this.checkInputShapeAndType(e), this.checkOutputs(t), a = {}, r = new ExecutionContext(this._weightMap, a), [4, this.executeWithControlFlow(e, r, t)];\n            case 1:\n              return n = i.sent(), s = t.map(function (e) {\n                return getTensor(e, n, r);\n              }), o = new Set(s.map(function (e) {\n                return e.id;\n              })), p = new Set(Object.keys(e).map(function (t) {\n                return e[t].id;\n              })), Object.keys(n).forEach(function (e) {\n                n[e].forEach(function (e) {\n                  !e || e.isDisposed || o.has(e.id) || p.has(e.id) || -1 !== u.weightIds.indexOf(e.id) || e.dispose();\n                });\n              }), [2, s];\n          }\n        });\n      });\n    }, e.prototype.executeWithControlFlow = function (e, t, a) {\n      return __awaiter(this, void 0, void 0, function () {\n        var r,\n          n,\n          s,\n          o,\n          p,\n          u,\n          i,\n          m,\n          l,\n          c,\n          d,\n          y,\n          f,\n          g,\n          h,\n          N,\n          x = this;\n        return __generator(this, function (V) {\n          switch (V.label) {\n            case 0:\n              r = Object.keys(e), n = r.map(function (e) {\n                return x.graph.nodes[e];\n              }), s = a.map(function (e) {\n                return x.graph.nodes[parseNodeName(e)[0]];\n              }), o = getExecutionSubgraph(e, s, this.weightMap), p = o.usedNodes, u = o.missingInputs, i = o.dynamicNode, m = o.syncInputs, l = n.concat(this.graph.weights).map(function (e) {\n                return {\n                  node: e,\n                  contexts: t.currentContext\n                };\n              }), c = __assign({}, this.weightMap), Object.keys(e).forEach(function (t) {\n                c[t] = [e[t]];\n              }), d = {}, y = this.getFrozenTensorIds(c), f = {}, V.label = 1;\n            case 1:\n              return l.length > 0 ? (g = this.processStack(n, l, t, c, f, y, a, d, p), [4, Promise.all(g)]) : [3, 3];\n            case 2:\n              return V.sent(), [3, 1];\n            case 3:\n              if (null == i && console.warn(\"This model execution did not contain any nodes with control flow or dynamic output shapes. You can use model.execute() instead.\"), (h = s.filter(function (e) {\n                return !isControlFlow(e) && !getTensor(e.name, c, t);\n              }).map(function (e) {\n                return e.name;\n              })).length > 0) throw N = \"\", null != i && (N = \"Alternatively, to avoid the dynamic ops, use model.execute() and specify the inputs [\" + m + \"]\"), new Error(\"Cannot compute the outputs [\" + h + \"] from the provided inputs [\" + r + \"]. Consider providing the following inputs: [\" + u + \"]. \" + N);\n              return [2, c];\n          }\n        });\n      });\n    }, e.prototype.processStack = function (e, t, a, r, n, s, o, p, u) {\n      for (var i = this, m = [], l = function () {\n          var l = t.pop();\n          a.currentContext = l.contexts;\n          var d = \"\";\n          if (\"Enter\" === l.node.op && getParamValue(\"isConstant\", l.node, r, a) && (d = getNodeNameAndIndex(l.node.name, a)[0]), -1 === e.indexOf(l.node)) {\n            var y = executeOp$16(l.node, r, a);\n            d || (d = getNodeNameAndIndex(l.node.name, a)[0]);\n            var f = a.currentContext;\n            y instanceof Promise ? m.push(y.then(function (e) {\n              return r[d] = e, a.currentContext = f, i.checkTensorForDisposal(d, l.node, r, a, s, o, p), i.processChildNodes(l.node, t, a, r, n, u), e;\n            })) : (r[d] = y, c.checkTensorForDisposal(d, l.node, r, a, s, o, p), c.processChildNodes(l.node, t, a, r, n, u));\n          } else c.processChildNodes(l.node, t, a, r, n, u);\n        }, c = this; t.length > 0;) l();\n      return m;\n    }, e.prototype.processChildNodes = function (e, t, a, r, n, s) {\n      e.children.forEach(function (e) {\n        var o = getNodeNameAndIndex(e.name, a)[0];\n        !n[o] && s.has(e.name) && (\"Merge\" === e.op ? e.inputNames.some(function (e) {\n          return !!getTensor(e, r, a);\n        }) && (n[o] = !0, t.push({\n          contexts: a.currentContext,\n          node: e\n        })) : e.inputNames.every(function (e) {\n          return !!getTensor(e, r, a);\n        }) && (n[o] = !0, t.push({\n          contexts: a.currentContext,\n          node: e\n        })));\n      });\n    }, e.prototype.dispose = function () {\n      var e = this;\n      Object.keys(this.weightMap).forEach(function (t) {\n        return e.weightMap[t].forEach(function (e) {\n          return e.dispose();\n        });\n      });\n    }, e.prototype.checkInputShapeAndType = function (e) {\n      var t = this;\n      Object.keys(e).forEach(function (a) {\n        var r = e[a],\n          n = t.graph.nodes[a];\n        if (n.attrParams.shape && n.attrParams.shape.value) {\n          var s = n.attrParams.shape.value,\n            o = s.length === r.shape.length && r.shape.every(function (e, t) {\n              return -1 === s[t] || s[t] === e;\n            });\n          util.assert(o, function () {\n            return \"The shape of dict['\" + n.name + \"'] provided in model.execute(dict) must be [\" + s + \"], but was [\" + r.shape + \"]\";\n          });\n        }\n        n.attrParams.dtype && n.attrParams.dtype.value && util.assert(r.dtype === n.attrParams.dtype.value, function () {\n          return \"The dtype of dict['\" + n.name + \"'] provided in model.execute(dict) must be \" + n.attrParams.dtype.value + \", but was \" + r.dtype;\n        });\n      });\n    }, e.prototype.checkInputs = function (e) {\n      var t = this,\n        a = Object.keys(e).filter(function (e) {\n          return !t.graph.nodes[e];\n        });\n      if (a.length > 0) throw new Error(\"The dict provided in model.execute(dict) has keys: [\" + a + \"] that are not part of graph\");\n    }, e.prototype.checkOutputs = function (e) {\n      var t = this;\n      e.forEach(function (e) {\n        var a = parseNodeName(e)[0];\n        if (!t.graph.nodes[a]) throw new Error(\"The output '\" + e + \"' is not found in the graph\");\n      });\n    }, e;\n  }(),\n  TFHUB_SEARCH_PARAM = \"?tfjs-format=file\",\n  DEFAULT_MODEL_NAME = \"model.json\",\n  GraphModel = function () {\n    function e(e, t) {\n      void 0 === t && (t = {}), this.modelUrl = e, this.loadOptions = t, this.version = \"n/a\", null == t && (this.loadOptions = {});\n    }\n    return Object.defineProperty(e.prototype, \"modelVersion\", {\n      get: function () {\n        return this.version;\n      },\n      enumerable: !0,\n      configurable: !0\n    }), Object.defineProperty(e.prototype, \"inputNodes\", {\n      get: function () {\n        return this.executor.inputNodes;\n      },\n      enumerable: !0,\n      configurable: !0\n    }), Object.defineProperty(e.prototype, \"outputNodes\", {\n      get: function () {\n        return this.executor.outputNodes;\n      },\n      enumerable: !0,\n      configurable: !0\n    }), Object.defineProperty(e.prototype, \"inputs\", {\n      get: function () {\n        return this.executor.inputs;\n      },\n      enumerable: !0,\n      configurable: !0\n    }), Object.defineProperty(e.prototype, \"outputs\", {\n      get: function () {\n        return this.executor.outputs;\n      },\n      enumerable: !0,\n      configurable: !0\n    }), Object.defineProperty(e.prototype, \"weights\", {\n      get: function () {\n        return this.executor.weightMap;\n      },\n      enumerable: !0,\n      configurable: !0\n    }), e.prototype.findIOHandler = function () {\n      var e = this.modelUrl;\n      if (null != e.load) this.handler = e;else if (null != this.loadOptions.requestInit) this.handler = io.browserHTTPRequest(e, this.loadOptions);else {\n        var t = io.getLoadHandlers(e, this.loadOptions.onProgress);\n        if (0 === t.length) t.push(io.browserHTTPRequest(e, this.loadOptions));else if (t.length > 1) throw new Error(\"Found more than one (\" + t.length + \") load handlers for URL '\" + [e] + \"'\");\n        this.handler = t[0];\n      }\n    }, e.prototype.load = function () {\n      return __awaiter(this, void 0, void 0, function () {\n        var e, t, a;\n        return __generator(this, function (r) {\n          switch (r.label) {\n            case 0:\n              if (this.findIOHandler(), null == this.handler.load) throw new Error(\"Cannot proceed with model loading because the IOHandler provided does not have the `load` method implemented.\");\n              return [4, this.handler.load()];\n            case 1:\n              return e = r.sent(), t = e.modelTopology, this.version = t.versions.producer + \".\" + t.versions.minConsumer, a = io.decodeWeights(e.weightData, e.weightSpecs), this.executor = new GraphExecutor(OperationMapper.Instance.transformGraph(t)), this.executor.weightMap = this.convertTensorMapToTensorsMap(a), [2, !0];\n          }\n        });\n      });\n    }, e.prototype.predict = function (e, t) {\n      return this.execute(e, this.outputNodes);\n    }, e.prototype.normalizeInputs = function (e) {\n      if (!(e instanceof Tensor || Array.isArray(e))) return e;\n      if ((e = Array.isArray(e) ? e : [e]).length !== this.inputNodes.length) throw new Error(\"Input tensor count mismatch,the graph model has \" + this.inputNodes.length + \" placeholders, while there are \" + e.length + \" input tensors.\");\n      return this.inputNodes.reduce(function (t, a, r) {\n        return t[a] = e[r], t;\n      }, {});\n    }, e.prototype.normalizeOutputs = function (e) {\n      return e = e || this.outputNodes, Array.isArray(e) ? e : [e];\n    }, e.prototype.execute = function (e, t) {\n      e = this.normalizeInputs(e), t = this.normalizeOutputs(t);\n      var a = this.executor.execute(e, t);\n      return a.length > 1 ? a : a[0];\n    }, e.prototype.executeAsync = function (e, t) {\n      return __awaiter(this, void 0, void 0, function () {\n        var a;\n        return __generator(this, function (r) {\n          switch (r.label) {\n            case 0:\n              return e = this.normalizeInputs(e), t = this.normalizeOutputs(t), [4, this.executor.executeAsync(e, t)];\n            case 1:\n              return [2, (a = r.sent()).length > 1 ? a : a[0]];\n          }\n        });\n      });\n    }, e.prototype.convertTensorMapToTensorsMap = function (e) {\n      return Object.keys(e).reduce(function (t, a) {\n        return t[a] = [e[a]], t;\n      }, {});\n    }, e.prototype.dispose = function () {\n      this.executor.dispose();\n    }, e;\n  }();\nfunction loadGraphModel(e, t) {\n  return void 0 === t && (t = {}), __awaiter(this, void 0, void 0, function () {\n    var a;\n    return __generator(this, function (r) {\n      switch (r.label) {\n        case 0:\n          if (null == e) throw new Error(\"modelUrl in loadGraphModel() cannot be null. Please provide a url or an IOHandler that loads the model\");\n          return null == t && (t = {}), t.fromTFHub && null == e.load && (e.endsWith(\"/\") || (e += \"/\"), e = \"\" + e + DEFAULT_MODEL_NAME + TFHUB_SEARCH_PARAM), [4, (a = new GraphModel(e, t)).load()];\n        case 1:\n          return r.sent(), [2, a];\n      }\n    });\n  });\n}\nvar version = \"1.3.1\";\nexport { GraphModel, loadGraphModel, deregisterOp, registerOp, version as version_converter };","map":{"version":3,"names":["DataType","SaverDef","__assign","Object","assign","e","t","a","r","arguments","length","n","prototype","hasOwnProperty","call","apply","__awaiter","Promise","s","o","u","next","p","throw","done","value","then","__generator","label","sent","trys","ops","return","Symbol","iterator","TypeError","pop","push","DT_INVALID","DT_FLOAT","DT_DOUBLE","DT_INT32","DT_UINT8","DT_INT16","DT_INT8","DT_STRING","DT_COMPLEX64","DT_INT64","DT_BOOL","DT_QINT8","DT_QUINT8","DT_QINT32","DT_BFLOAT16","DT_FLOAT_REF","DT_DOUBLE_REF","DT_INT32_REF","DT_UINT8_REF","DT_INT16_REF","DT_INT8_REF","DT_STRING_REF","DT_COMPLEX64_REF","DT_INT64_REF","DT_BOOL_REF","DT_QINT8_REF","DT_QUINT8_REF","DT_QINT32_REF","DT_BFLOAT16_REF","LEGACY","V1","V2","CheckpointFormatVersion","CUSTOM_OPS","registerOp","tfOpName","category","inputs","attrs","customExecutor","getRegisteredOp","deregisterOp","getParamValue","inputParams","inputIndexStart","inputIndexEnd","type","getTensor","inputNames","slice","map","Array","dataSync","attrParams","parseNodeName","currentContextIds","find","getNodeNameWithContextId","getTensorsForCurrentContenxt","currentContextId","getNodeNameAndIndex","lastIndexOf","substring","Number","split$1","json","start","name","tfName","notSupported","end","arithmetic","freeze","json$1","defaultValue","basicMath","json$2","control","json$3","convolution","json$4","creation","json$5","dynamic","json$6","evaluation","json$7","graph","json$8","image$1","json$9","logical","json$10","matrices","json$11","normalization","json$12","reduction","json$13","sliceJoin","json$14","spectral","json$15","tfDeprecatedName","transformation","OperationMapper","concat","opMappers","reduce","defineProperty","get","_instance","enumerable","configurable","transformGraph","node","mapNode","op","keys","forEach","children","nodes","outputs","weights","placeholders","attr","input","startsWith","substr","rawAttrs","getStringParam","getStringArrayParam","getNumberParam","getNumericArrayParam","getBoolParam","getBoolArrayParam","getTensorShapeParam","getTensorShapeArrayParam","getDtypeParam","getDtypeArrayParam","Error","decodeBase64","env","global","atob","Buffer","toString","parseStringParam","isArray","String","fromCharCode","toLowerCase","b","i","f","parseInt","parseDtypeParam","list","parseTensorShapeParam","unknownRank","dim","size","shape","NodeValueImpl","tensorMap","context","getInput","getAttr","tensor","executeOp","add","addN","mod","mul","div","floorDiv","sub","minimum","maximum","pow","squaredDifference","executeOp$1","abs","acos","acosh","asin","asinh","atan","atan2","atanh","ceil","complex","cos","cosh","elu","erf","exp","expm1","floor","log","log1p","imag","neg","reciprocal","real","relu","round","selu","sigmoid","sin","sign","sinh","softplus","sqrt","square","tanh","tan","clipByValue","rsqrt","prod","leakyRelu","TensorArray","dtype","maxSize","elementShape","identicalElementShapes","dynamicSize","clearAfterRead","tensors","closed_","id","nextId","clearAndClose","dispose","read","cleared","readMany","write","assertShapesMatchAllowUndefinedSize","written","writeMany","gather","stack","scatter","Math","max","unstack","split","tidy","reshape","util","assert","shapesEqualAllowUndefinedSize","executeOp$2","m","l","c","d","y","g","h","N","x","V","P","T","O","S","v","_","w","A","D","E","I","C","M","k","z","j","F","clone","data","enterFrame","exitFrame","nextIteration","addTensorArray","scalar","getTensorArray","executeOp$3","toUpperCase","conv1d","conv2d","fused","filter","strides","pad","dataFormat","dilations","bias","activation","preluActivationWeights","conv2dTranspose","depthwiseConv2d","conv3d","avgPool","maxPool","avgPool3d","maxPool3d","executeOp$4","fill","linspace","multinomial","oneHot","ones","onesLike","randomUniform","range","truncatedNormal","zeros","zerosLike","executeOp$5","image","nonMaxSuppressionAsync","whereAsync","asType","setdiff1dAsync","executeOp$6","topk","values","indices","executeOp$7","tensor1d","rank","console","warn","executeOp$8","resizeBilinear","resizeNearestNeighbor","cropAndResize","executeOp$9","equal","notEqual","greater","greaterEqual","less","lessEqual","logicalAnd","logicalNot","logicalOr","where","executeOp$10","matMul","transpose","executeOp$11","batchNorm","localResponseNormalization","softmax","logSoftmax","sparseToDense","executeOp$12","mean","min","sum","all","any","argMax","argMin","executeOp$13","reverse","stridedSlice","squeeze","arraysEqual","tile","scatterND","gatherND","executeOp$14","fft","ifft","rfft","irfft","executeOp$15","cast","expandDims","spaceToBatchND","batchToSpaceND","depthToSpace","executeOp$16","ExecutionContext","weightMap","tensorArrayMap","rootContext","frameName","iterationId","contexts","lastId","generateCurrentContextIds","newFrame","set","_currentContextIds","contextIdforContexts","join","unshift","splice","shift","getWeight","getExecutionSubgraph","Set","isControlFlow","isDynamicShape","has","usedNodes","missingInputs","dynamicNode","syncInputs","getNodesInTopologicalOrder","every","CONTROL_FLOW_OPS","DYNAMIC_SHAPE_OPS","indexOf","GraphExecutor","compiledMap","Map","_weightMap","SEPERATOR","_outputs","weightIds","getCompilationKey","sort","compile","execute","checkInputs","checkInputShapeAndType","checkOutputs","getFrozenTensorIds","checkTensorForDisposal","executeAsync","executeWithControlFlow","isDisposed","currentContext","processStack","processChildNodes","some","TFHUB_SEARCH_PARAM","DEFAULT_MODEL_NAME","GraphModel","modelUrl","loadOptions","version","executor","inputNodes","outputNodes","findIOHandler","load","handler","requestInit","io","browserHTTPRequest","getLoadHandlers","onProgress","modelTopology","versions","producer","minConsumer","decodeWeights","weightData","weightSpecs","Instance","convertTensorMapToTensorsMap","predict","normalizeInputs","Tensor","normalizeOutputs","loadGraphModel","fromTFHub","endsWith","version_converter"],"sources":["C:\\Users\\Chris Littlejohn\\Downloads\\barcode-matcher-final-project (1)\\node_modules\\@tensorflow\\tfjs-converter\\src\\data\\compiled_api.ts","C:\\Users\\Chris Littlejohn\\Downloads\\barcode-matcher-final-project (1)\\node_modules\\@tensorflow\\tfjs-converter\\src\\operations\\custom_op\\register.ts","C:\\Users\\Chris Littlejohn\\Downloads\\barcode-matcher-final-project (1)\\node_modules\\@tensorflow\\tfjs-converter\\src\\operations\\executors\\utils.ts","C:\\Users\\Chris Littlejohn\\Downloads\\barcode-matcher-final-project (1)\\node_modules\\@tensorflow\\tfjs-converter\\src\\operations\\op_list\\arithmetic.ts","C:\\Users\\Chris Littlejohn\\Downloads\\barcode-matcher-final-project (1)\\node_modules\\@tensorflow\\tfjs-converter\\src\\operations\\op_list\\basic_math.ts","C:\\Users\\Chris Littlejohn\\Downloads\\barcode-matcher-final-project (1)\\node_modules\\@tensorflow\\tfjs-converter\\src\\operations\\op_list\\control.ts","C:\\Users\\Chris Littlejohn\\Downloads\\barcode-matcher-final-project (1)\\node_modules\\@tensorflow\\tfjs-converter\\src\\operations\\op_list\\convolution.ts","C:\\Users\\Chris Littlejohn\\Downloads\\barcode-matcher-final-project (1)\\node_modules\\@tensorflow\\tfjs-converter\\src\\operations\\op_list\\creation.ts","C:\\Users\\Chris Littlejohn\\Downloads\\barcode-matcher-final-project (1)\\node_modules\\@tensorflow\\tfjs-converter\\src\\operations\\op_list\\dynamic.ts","C:\\Users\\Chris Littlejohn\\Downloads\\barcode-matcher-final-project (1)\\node_modules\\@tensorflow\\tfjs-converter\\src\\operations\\op_list\\evaluation.ts","C:\\Users\\Chris Littlejohn\\Downloads\\barcode-matcher-final-project (1)\\node_modules\\@tensorflow\\tfjs-converter\\src\\operations\\op_list\\graph.ts","C:\\Users\\Chris Littlejohn\\Downloads\\barcode-matcher-final-project (1)\\node_modules\\@tensorflow\\tfjs-converter\\src\\operations\\op_list\\image.ts","C:\\Users\\Chris Littlejohn\\Downloads\\barcode-matcher-final-project (1)\\node_modules\\@tensorflow\\tfjs-converter\\src\\operations\\op_list\\logical.ts","C:\\Users\\Chris Littlejohn\\Downloads\\barcode-matcher-final-project (1)\\node_modules\\@tensorflow\\tfjs-converter\\src\\operations\\op_list\\matrices.ts","C:\\Users\\Chris Littlejohn\\Downloads\\barcode-matcher-final-project (1)\\node_modules\\@tensorflow\\tfjs-converter\\src\\operations\\op_list\\normalization.ts","C:\\Users\\Chris Littlejohn\\Downloads\\barcode-matcher-final-project (1)\\node_modules\\@tensorflow\\tfjs-converter\\src\\operations\\op_list\\reduction.ts","C:\\Users\\Chris Littlejohn\\Downloads\\barcode-matcher-final-project (1)\\node_modules\\@tensorflow\\tfjs-converter\\src\\operations\\op_list\\slice_join.ts","C:\\Users\\Chris Littlejohn\\Downloads\\barcode-matcher-final-project (1)\\node_modules\\@tensorflow\\tfjs-converter\\src\\operations\\op_list\\spectral.ts","C:\\Users\\Chris Littlejohn\\Downloads\\barcode-matcher-final-project (1)\\node_modules\\@tensorflow\\tfjs-converter\\src\\operations\\op_list\\transformation.ts","C:\\Users\\Chris Littlejohn\\Downloads\\barcode-matcher-final-project (1)\\node_modules\\@tensorflow\\tfjs-converter\\src\\operations\\operation_mapper.ts","C:\\Users\\Chris Littlejohn\\Downloads\\barcode-matcher-final-project (1)\\node_modules\\@tensorflow\\tfjs-converter\\src\\operations\\custom_op\\node_value_impl.ts","C:\\Users\\Chris Littlejohn\\Downloads\\barcode-matcher-final-project (1)\\node_modules\\@tensorflow\\tfjs-converter\\src\\operations\\executors\\arithmetic_executor.ts","C:\\Users\\Chris Littlejohn\\Downloads\\barcode-matcher-final-project (1)\\node_modules\\@tensorflow\\tfjs-converter\\src\\operations\\executors\\basic_math_executor.ts","C:\\Users\\Chris Littlejohn\\Downloads\\barcode-matcher-final-project (1)\\node_modules\\@tensorflow\\tfjs-converter\\src\\executor\\tensor_array.ts","C:\\Users\\Chris Littlejohn\\Downloads\\barcode-matcher-final-project (1)\\node_modules\\@tensorflow\\tfjs-converter\\src\\operations\\executors\\control_executor.ts","C:\\Users\\Chris Littlejohn\\Downloads\\barcode-matcher-final-project (1)\\node_modules\\@tensorflow\\tfjs-converter\\src\\operations\\executors\\convolution_executor.ts","C:\\Users\\Chris Littlejohn\\Downloads\\barcode-matcher-final-project (1)\\node_modules\\@tensorflow\\tfjs-converter\\src\\operations\\executors\\creation_executor.ts","C:\\Users\\Chris Littlejohn\\Downloads\\barcode-matcher-final-project (1)\\node_modules\\@tensorflow\\tfjs-converter\\src\\operations\\executors\\dynamic_executor.ts","C:\\Users\\Chris Littlejohn\\Downloads\\barcode-matcher-final-project (1)\\node_modules\\@tensorflow\\tfjs-converter\\src\\operations\\executors\\evaluation_executor.ts","C:\\Users\\Chris Littlejohn\\Downloads\\barcode-matcher-final-project (1)\\node_modules\\@tensorflow\\tfjs-converter\\src\\operations\\executors\\graph_executor.ts","C:\\Users\\Chris Littlejohn\\Downloads\\barcode-matcher-final-project (1)\\node_modules\\@tensorflow\\tfjs-converter\\src\\operations\\executors\\image_executor.ts","C:\\Users\\Chris Littlejohn\\Downloads\\barcode-matcher-final-project (1)\\node_modules\\@tensorflow\\tfjs-converter\\src\\operations\\executors\\logical_executor.ts","C:\\Users\\Chris Littlejohn\\Downloads\\barcode-matcher-final-project (1)\\node_modules\\@tensorflow\\tfjs-converter\\src\\operations\\executors\\matrices_executor.ts","C:\\Users\\Chris Littlejohn\\Downloads\\barcode-matcher-final-project (1)\\node_modules\\@tensorflow\\tfjs-converter\\src\\operations\\executors\\normalization_executor.ts","C:\\Users\\Chris Littlejohn\\Downloads\\barcode-matcher-final-project (1)\\node_modules\\@tensorflow\\tfjs-converter\\src\\operations\\executors\\reduction_executor.ts","C:\\Users\\Chris Littlejohn\\Downloads\\barcode-matcher-final-project (1)\\node_modules\\@tensorflow\\tfjs-converter\\src\\operations\\executors\\slice_join_executor.ts","C:\\Users\\Chris Littlejohn\\Downloads\\barcode-matcher-final-project (1)\\node_modules\\@tensorflow\\tfjs-converter\\src\\operations\\executors\\spectral_executor.ts","C:\\Users\\Chris Littlejohn\\Downloads\\barcode-matcher-final-project (1)\\node_modules\\@tensorflow\\tfjs-converter\\src\\operations\\executors\\transformation_executor.ts","C:\\Users\\Chris Littlejohn\\Downloads\\barcode-matcher-final-project (1)\\node_modules\\@tensorflow\\tfjs-converter\\src\\operations\\operation_executor.ts","C:\\Users\\Chris Littlejohn\\Downloads\\barcode-matcher-final-project (1)\\node_modules\\@tensorflow\\tfjs-converter\\src\\executor\\execution_context.ts","C:\\Users\\Chris Littlejohn\\Downloads\\barcode-matcher-final-project (1)\\node_modules\\@tensorflow\\tfjs-converter\\src\\executor\\model_analysis.ts","C:\\Users\\Chris Littlejohn\\Downloads\\barcode-matcher-final-project (1)\\node_modules\\@tensorflow\\tfjs-converter\\src\\executor\\graph_executor.ts","C:\\Users\\Chris Littlejohn\\Downloads\\barcode-matcher-final-project (1)\\node_modules\\@tensorflow\\tfjs-converter\\src\\executor\\graph_model.ts","C:\\Users\\Chris Littlejohn\\Downloads\\barcode-matcher-final-project (1)\\node_modules\\@tensorflow\\tfjs-converter\\src\\version.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * =============================================================================\n */\n\n/* tslint:disable */\n\n/** Properties of an Any. */\nexport declare interface IAny {\n  /** Any typeUrl */\n  typeUrl?: (string|null);\n\n  /** Any value */\n  value?: (Uint8Array|null);\n}\n\n/** DataType enum. */\nexport enum DataType {\n  'DT_INVALID' = 0,\n  'DT_FLOAT' = 1,\n  'DT_DOUBLE' = 2,\n  'DT_INT32' = 3,\n  'DT_UINT8' = 4,\n  'DT_INT16' = 5,\n  'DT_INT8' = 6,\n  'DT_STRING' = 7,\n  'DT_COMPLEX64' = 8,\n  'DT_INT64' = 9,\n  'DT_BOOL' = 10,\n  'DT_QINT8' = 11,\n  'DT_QUINT8' = 12,\n  'DT_QINT32' = 13,\n  'DT_BFLOAT16' = 14,\n  'DT_FLOAT_REF' = 101,\n  'DT_DOUBLE_REF' = 102,\n  'DT_INT32_REF' = 103,\n  'DT_UINT8_REF' = 104,\n  'DT_INT16_REF' = 105,\n  'DT_INT8_REF' = 106,\n  'DT_STRING_REF' = 107,\n  'DT_COMPLEX64_REF' = 108,\n  'DT_INT64_REF' = 109,\n  'DT_BOOL_REF' = 110,\n  'DT_QINT8_REF' = 111,\n  'DT_QUINT8_REF' = 112,\n  'DT_QINT32_REF' = 113,\n  'DT_BFLOAT16_REF' = 114\n}\n\n/** Properties of a TensorShape. */\nexport declare interface ITensorShape {\n  /** TensorShape dim */\n  dim?: (TensorShape.IDim[]|null);\n\n  /** TensorShape unknownRank */\n  unknownRank?: (boolean|null);\n}\n\nexport namespace TensorShape {\n  /** Properties of a Dim. */\n  export declare interface IDim {\n    /** Dim size */\n    size?: (number|string|null);\n\n    /** Dim name */\n    name?: (string|null);\n  }\n}\n\n/** Properties of a Tensor. */\nexport declare interface ITensor {\n  /** Tensor dtype */\n  dtype?: (DataType|null);\n\n  /** Tensor tensorShape */\n  tensorShape?: (ITensorShape|null);\n\n  /** Tensor versionNumber */\n  versionNumber?: (number|null);\n\n  /** Tensor tensorContent */\n  tensorContent?: (Uint8Array|null);\n\n  /** Tensor floatVal */\n  floatVal?: (number[]|null);\n\n  /** Tensor doubleVal */\n  doubleVal?: (number[]|null);\n\n  /** Tensor intVal */\n  intVal?: (number[]|null);\n\n  /** Tensor stringVal */\n  stringVal?: (Uint8Array[]|null);\n\n  /** Tensor scomplexVal */\n  scomplexVal?: (number[]|null);\n\n  /** Tensor int64Val */\n  int64Val?: ((number | string)[]|null);\n\n  /** Tensor boolVal */\n  boolVal?: (boolean[]|null);\n\n  /** Tensor uint32Val */\n  uint32Val?: (number[]|null);\n\n  /** Tensor uint64Val */\n  uint64Val?: ((number | string)[]|null);\n}\n\n/** Properties of an AttrValue. */\nexport declare interface IAttrValue {\n  /** AttrValue list */\n  list?: (AttrValue.IListValue|null);\n\n  /** AttrValue s */\n  s?: (string|null);\n\n  /** AttrValue i */\n  i?: (number|string|null);\n\n  /** AttrValue f */\n  f?: (number|null);\n\n  /** AttrValue b */\n  b?: (boolean|null);\n\n  /** AttrValue type */\n  type?: (DataType|null);\n\n  /** AttrValue shape */\n  shape?: (ITensorShape|null);\n\n  /** AttrValue tensor */\n  tensor?: (ITensor|null);\n\n  /** AttrValue placeholder */\n  placeholder?: (string|null);\n\n  /** AttrValue func */\n  func?: (INameAttrList|null);\n}\n\nexport namespace AttrValue {\n  /** Properties of a ListValue. */\n  export declare interface IListValue {\n    /** ListValue s */\n    s?: (string[]|null);\n\n    /** ListValue i */\n    i?: ((number | string)[]|null);\n\n    /** ListValue f */\n    f?: (number[]|null);\n\n    /** ListValue b */\n    b?: (boolean[]|null);\n\n    /** ListValue type */\n    type?: (DataType[]|null);\n\n    /** ListValue shape */\n    shape?: (ITensorShape[]|null);\n\n    /** ListValue tensor */\n    tensor?: (ITensor[]|null);\n\n    /** ListValue func */\n    func?: (INameAttrList[]|null);\n  }\n}\n\n/** Properties of a NameAttrList. */\nexport declare interface INameAttrList {\n  /** NameAttrList name */\n  name?: (string|null);\n\n  /** NameAttrList attr */\n  attr?: ({[k: string]: IAttrValue}|null);\n}\n\n/** Properties of a NodeDef. */\nexport declare interface INodeDef {\n  /** NodeDef name */\n  name?: (string|null);\n\n  /** NodeDef op */\n  op?: (string|null);\n\n  /** NodeDef input */\n  input?: (string[]|null);\n\n  /** NodeDef device */\n  device?: (string|null);\n\n  /** NodeDef attr */\n  attr?: ({[k: string]: IAttrValue}|null);\n}\n\n/** Properties of a VersionDef. */\nexport declare interface IVersionDef {\n  /** VersionDef producer */\n  producer?: (number|null);\n\n  /** VersionDef minConsumer */\n  minConsumer?: (number|null);\n\n  /** VersionDef badConsumers */\n  badConsumers?: (number[]|null);\n}\n\n/** Properties of a GraphDef. */\nexport declare interface IGraphDef {\n  /** GraphDef node */\n  node?: (INodeDef[]|null);\n\n  /** GraphDef versions */\n  versions?: (IVersionDef|null);\n\n  /** GraphDef library */\n  library?: (IFunctionDefLibrary|null);\n}\n\n/** Properties of a CollectionDef. */\nexport declare interface ICollectionDef {\n  /** CollectionDef nodeList */\n  nodeList?: (CollectionDef.INodeList|null);\n\n  /** CollectionDef bytesList */\n  bytesList?: (CollectionDef.IBytesList|null);\n\n  /** CollectionDef int64List */\n  int64List?: (CollectionDef.IInt64List|null);\n\n  /** CollectionDef floatList */\n  floatList?: (CollectionDef.IFloatList|null);\n\n  /** CollectionDef anyList */\n  anyList?: (CollectionDef.IAnyList|null);\n}\n\nexport namespace CollectionDef {\n  /** Properties of a NodeList. */\n  export declare interface INodeList {\n    /** NodeList value */\n    value?: (string[]|null);\n  }\n\n  /** Properties of a BytesList. */\n  export declare interface IBytesList {\n    /** BytesList value */\n    value?: (Uint8Array[]|null);\n  }\n\n  /** Properties of an Int64List. */\n  export declare interface IInt64List {\n    /** Int64List value */\n    value?: ((number | string)[]|null);\n  }\n\n  /** Properties of a FloatList. */\n  export declare interface IFloatList {\n    /** FloatList value */\n    value?: (number[]|null);\n  }\n\n  /** Properties of an AnyList. */\n  export declare interface IAnyList {\n    /** AnyList value */\n    value?: (IAny[]|null);\n  }\n}\n\n/** Properties of a SaverDef. */\nexport declare interface ISaverDef {\n  /** SaverDef filenameTensorName */\n  filenameTensorName?: (string|null);\n\n  /** SaverDef saveTensorName */\n  saveTensorName?: (string|null);\n\n  /** SaverDef restoreOpName */\n  restoreOpName?: (string|null);\n\n  /** SaverDef maxToKeep */\n  maxToKeep?: (number|null);\n\n  /** SaverDef sharded */\n  sharded?: (boolean|null);\n\n  /** SaverDef keepCheckpointEveryNHours */\n  keepCheckpointEveryNHours?: (number|null);\n\n  /** SaverDef version */\n  version?: (SaverDef.CheckpointFormatVersion|null);\n}\n\nexport namespace SaverDef {\n  /** CheckpointFormatVersion enum. */\n  export enum CheckpointFormatVersion {'LEGACY' = 0, 'V1' = 1, 'V2' = 2}\n}\n\n/** Properties of a TensorInfo. */\nexport declare interface ITensorInfo {\n  /** TensorInfo name */\n  name?: (string|null);\n\n  /** TensorInfo cooSparse */\n  cooSparse?: (TensorInfo.ICooSparse|null);\n\n  /** TensorInfo dtype */\n  dtype?: (DataType|null);\n\n  /** TensorInfo tensorShape */\n  tensorShape?: (ITensorShape|null);\n}\n\nexport namespace TensorInfo {\n  /** Properties of a CooSparse. */\n  export declare interface ICooSparse {\n    /** CooSparse valuesTensorName */\n    valuesTensorName?: (string|null);\n\n    /** CooSparse indicesTensorName */\n    indicesTensorName?: (string|null);\n\n    /** CooSparse denseShapeTensorName */\n    denseShapeTensorName?: (string|null);\n  }\n}\n\n/** Properties of a SignatureDef. */\nexport declare interface ISignatureDef {\n  /** SignatureDef inputs */\n  inputs?: ({[k: string]: ITensorInfo}|null);\n\n  /** SignatureDef outputs */\n  outputs?: ({[k: string]: ITensorInfo}|null);\n\n  /** SignatureDef methodName */\n  methodName?: (string|null);\n}\n\n/** Properties of an AssetFileDef. */\nexport declare interface IAssetFileDef {\n  /** AssetFileDef tensorInfo */\n  tensorInfo?: (ITensorInfo|null);\n\n  /** AssetFileDef filename */\n  filename?: (string|null);\n}\n\n/** Properties of an OpDef. */\nexport declare interface IOpDef {\n  /** OpDef name */\n  name?: (string|null);\n\n  /** OpDef inputArg */\n  inputArg?: (OpDef.IArgDef[]|null);\n\n  /** OpDef outputArg */\n  outputArg?: (OpDef.IArgDef[]|null);\n\n  /** OpDef attr */\n  attr?: (OpDef.IAttrDef[]|null);\n\n  /** OpDef deprecation */\n  deprecation?: (OpDef.IOpDeprecation|null);\n\n  /** OpDef summary */\n  summary?: (string|null);\n\n  /** OpDef description */\n  description?: (string|null);\n\n  /** OpDef isCommutative */\n  isCommutative?: (boolean|null);\n\n  /** OpDef isAggregate */\n  isAggregate?: (boolean|null);\n\n  /** OpDef isStateful */\n  isStateful?: (boolean|null);\n\n  /** OpDef allowsUninitializedInput */\n  allowsUninitializedInput?: (boolean|null);\n}\n\nexport namespace OpDef {\n  /** Properties of an ArgDef. */\n  export declare interface IArgDef {\n    /** ArgDef name */\n    name?: (string|null);\n\n    /** ArgDef description */\n    description?: (string|null);\n\n    /** ArgDef type */\n    type?: (DataType|null);\n\n    /** ArgDef typeAttr */\n    typeAttr?: (string|null);\n\n    /** ArgDef numberAttr */\n    numberAttr?: (string|null);\n\n    /** ArgDef typeListAttr */\n    typeListAttr?: (string|null);\n\n    /** ArgDef isRef */\n    isRef?: (boolean|null);\n  }\n\n  /** Properties of an AttrDef. */\n  export declare interface IAttrDef {\n    /** AttrDef name */\n    name?: (string|null);\n\n    /** AttrDef type */\n    type?: (string|null);\n\n    /** AttrDef defaultValue */\n    defaultValue?: (IAttrValue|null);\n\n    /** AttrDef description */\n    description?: (string|null);\n\n    /** AttrDef hasMinimum */\n    hasMinimum?: (boolean|null);\n\n    /** AttrDef minimum */\n    minimum?: (number|string|null);\n\n    /** AttrDef allowedValues */\n    allowedValues?: (IAttrValue|null);\n  }\n\n  /** Properties of an OpDeprecation. */\n  export declare interface IOpDeprecation {\n    /** OpDeprecation version */\n    version?: (number|null);\n\n    /** OpDeprecation explanation */\n    explanation?: (string|null);\n  }\n}\n\n/** Properties of an OpList. */\nexport declare interface IOpList {\n  /** OpList op */\n  op?: (IOpDef[]|null);\n}\n\n/** Properties of a MetaGraphDef. */\nexport declare interface IMetaGraphDef {\n  /** MetaGraphDef metaInfoDef */\n  metaInfoDef?: (MetaGraphDef.IMetaInfoDef|null);\n\n  /** MetaGraphDef graphDef */\n  graphDef?: (IGraphDef|null);\n\n  /** MetaGraphDef saverDef */\n  saverDef?: (ISaverDef|null);\n\n  /** MetaGraphDef collectionDef */\n  collectionDef?: ({[k: string]: ICollectionDef}|null);\n\n  /** MetaGraphDef signatureDef */\n  signatureDef?: ({[k: string]: ISignatureDef}|null);\n\n  /** MetaGraphDef assetFileDef */\n  assetFileDef?: (IAssetFileDef[]|null);\n}\n\nexport namespace MetaGraphDef {\n  /** Properties of a MetaInfoDef. */\n  export declare interface IMetaInfoDef {\n    /** MetaInfoDef metaGraphVersion */\n    metaGraphVersion?: (string|null);\n\n    /** MetaInfoDef strippedOpList */\n    strippedOpList?: (IOpList|null);\n\n    /** MetaInfoDef anyInfo */\n    anyInfo?: (IAny|null);\n\n    /** MetaInfoDef tags */\n    tags?: (string[]|null);\n\n    /** MetaInfoDef tensorflowVersion */\n    tensorflowVersion?: (string|null);\n\n    /** MetaInfoDef tensorflowGitVersion */\n    tensorflowGitVersion?: (string|null);\n  }\n}\n\n/** Properties of a SavedModel. */\nexport declare interface ISavedModel {\n  /** SavedModel savedModelSchemaVersion */\n  savedModelSchemaVersion?: (number|string|null);\n\n  /** SavedModel metaGraphs */\n  metaGraphs?: (IMetaGraphDef[]|null);\n}\n\n/** Properties of a FunctionDefLibrary. */\nexport declare interface IFunctionDefLibrary {\n  /** FunctionDefLibrary function */\n  'function'?: (IFunctionDef[]|null);\n\n  /** FunctionDefLibrary gradient */\n  gradient?: (IGradientDef[]|null);\n}\n\n/** Properties of a FunctionDef. */\nexport declare interface IFunctionDef {\n  /** FunctionDef signature */\n  signature?: (IOpDef|null);\n\n  /** FunctionDef attr */\n  attr?: ({[k: string]: IAttrValue}|null);\n\n  /** FunctionDef nodeDef */\n  nodeDef?: (INodeDef[]|null);\n\n  /** FunctionDef ret */\n  ret?: ({[k: string]: string}|null);\n}\n\n/** Properties of a GradientDef. */\nexport declare interface IGradientDef {\n  /** GradientDef functionName */\n  functionName?: (string|null);\n\n  /** GradientDef gradientFunc */\n  gradientFunc?: (string|null);\n}\n","\n/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {OpExecutor, OpMapper} from '../types';\n\nconst CUSTOM_OPS: {[key: string]: OpMapper} = {};\n\n/**\n * Register an Op for graph model executor. This allow you to register\n * TensorFlow custom op or override existing op.\n *\n * Here is an example of registering a new MatMul Op.\n * ```js\n * const customMatmul = (node) =>\n *    tf.matMul(\n *        node.inputs[0], node.inputs[1],\n *        node.attrs['transpose_a'], node.attrs['transpose_b']);\n *\n * tf.registerOp('MatMul', customMatmul);\n * ```\n * The inputs and attrs of the node object is based on the TensorFlow op\n * registry.\n *\n * @param name The Tensorflow Op name.\n * @param opFunc An op function which is called with the current graph node\n * during execution and needs to return a tensor or a list of tensors. The node\n * has the following attributes:\n *    - attr: A map from attribute name to its value\n *    - inputs: A list of input tensors\n */\n/** @doc {heading: 'Models', subheading: 'Op Registry'} */\nexport function registerOp(name: string, opFunc: OpExecutor) {\n  const opMapper: OpMapper = {\n    tfOpName: name,\n    category: 'custom',\n    inputs: [],\n    attrs: [],\n    customExecutor: opFunc\n  };\n\n  CUSTOM_OPS[name] = opMapper;\n}\n\n/**\n * Retrieve the OpMapper object for the registered op.\n *\n * @param name The Tensorflow Op name.\n */\n/** @doc {heading: 'Models', subheading: 'Op Registry'} */\n\nexport function getRegisteredOp(name: string): OpMapper {\n  return CUSTOM_OPS[name];\n}\n\n/**\n * Deregister the Op for graph model executor.\n *\n * @param name The Tensorflow Op name.\n */\n/** @doc {heading: 'Models', subheading: 'Op Registry'} */\nexport function deregisterOp(name: string) {\n  delete CUSTOM_OPS[name];\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {Node, ValueType} from '../types';\n\nexport function getParamValue(\n    paramName: string, node: Node, tensorMap: NamedTensorsMap,\n    context: ExecutionContext): ValueType {\n  const inputParam = node.inputParams[paramName];\n  if (inputParam && inputParam.inputIndexStart !== undefined) {\n    const start = inputParam.inputIndexStart;\n    const end = inputParam.inputIndexEnd === 0 ?\n        undefined :\n        (inputParam.inputIndexEnd === undefined ? start + 1 :\n                                                  inputParam.inputIndexEnd);\n    if (inputParam.type === 'tensor') {\n      return getTensor(\n          node.inputNames[inputParam.inputIndexStart], tensorMap, context);\n    }\n    if (inputParam.type === 'tensors') {\n      const inputs = node.inputNames.slice(start, end);\n\n      return inputs.map(name => getTensor(name, tensorMap, context));\n    }\n    const data = Array.prototype.slice.call(\n        getTensor(node.inputNames.slice(start)[0], tensorMap, context)\n            .dataSync());\n    return inputParam.type === 'number' ? data[0] : data;\n  }\n  const attrParam = node.attrParams[paramName];\n  return attrParam && attrParam.value;\n}\n\n/**\n * Retrieve the tensor based on input name by extracting the node name and\n * output index information.\n * @param name Node input name\n * @param tensorsMap Tensors map keyed by the node\n */\nexport function getTensor(\n    name: string, tensorsMap: NamedTensorsMap,\n    context: ExecutionContext): tfc.Tensor {\n  const [nodeName, index] = parseNodeName(name);\n  const contextId = context.currentContextIds.find(contextId => {\n    return !!tensorsMap[getNodeNameWithContextId(nodeName, contextId)];\n  });\n\n  return contextId !== undefined ?\n      tensorsMap[getNodeNameWithContextId(nodeName, contextId)][index] :\n      undefined;\n}\n\n/**\n * Retrieve the tensors based on input name for current context.\n * @param name Node input name\n * @param tensorsMap Tensors map keyed by the node\n */\nexport function getTensorsForCurrentContenxt(\n    name: string, tensorsMap: NamedTensorsMap,\n    context: ExecutionContext): tfc.Tensor[] {\n  return tensorsMap[getNodeNameWithContextId(name, context.currentContextId)];\n}\n\n/**\n * Returns the node name and index from the Node input name.\n * @param inputName The input name of the node, in format of\n * node_name:output_index, i.e. MatMul:0, if the output_index is not set, it is\n * default to 0.\n */\nexport function getNodeNameAndIndex(\n    inputName: string, context?: ExecutionContext): [string, number] {\n  const [nodeName, index] = parseNodeName(inputName);\n\n  return [\n    getNodeNameWithContextId(nodeName, context && context.currentContextId),\n    index\n  ];\n}\n\nfunction getNodeNameWithContextId(name: string, contextId?: string): string {\n  return !!contextId ? `${name}-${contextId}` : name;\n}\n\nexport function parseNodeName(name: string): [string, number] {\n  const index = name.lastIndexOf(':');\n  if (index === -1) {\n    return [name, 0];\n  }\n\n  const nodeName = name.substring(0, index);\n  return [nodeName, Number(name.substring(index + 1))];\n}\n\nexport function split(arr: number[], size: number) {\n  const res = [];\n  for (let i = 0; i < arr.length; i += size) {\n    res.push(arr.slice(i, i + size));\n  }\n  return res;\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {OpMapper} from '../types';\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'Add',\n    'category': 'arithmetic',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'AddV2',\n    'category': 'arithmetic',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'AddN',\n    'category': 'arithmetic',\n    'inputs': [{'start': 0, 'end': 0, 'name': 'tensors', 'type': 'tensors'}]\n  },\n  {\n    'tfOpName': 'BiasAdd',\n    'category': 'arithmetic',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Sub',\n    'category': 'arithmetic',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'RealDiv',\n    'category': 'arithmetic',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Div',\n    'category': 'arithmetic',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'FloorDiv',\n    'category': 'arithmetic',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Mul',\n    'category': 'arithmetic',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Maximum',\n    'category': 'arithmetic',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'}\n    ]\n  },\n  {\n    'tfOpName': 'Minimum',\n    'category': 'arithmetic',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'}\n    ]\n  },\n  {\n    'tfOpName': 'Pow',\n    'category': 'arithmetic',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'SquaredDifference',\n    'category': 'arithmetic',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Mod',\n    'category': 'arithmetic',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'FloorMod',\n    'category': 'arithmetic',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [{\n      'tfName': 'T',\n      'name': 'dtype',\n      'type': 'dtype',\n      'notSupported': true\n    }]\n  }\n];\n","import {OpMapper} from '../types';\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'Abs',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Acos',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Asin',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Atan',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Atan2',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'y', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Ceil',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'ClipByValue',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'clip_value_min', 'name': 'clipValueMin', 'type': 'number'},\n      {'tfName': 'clip_value_max', 'name': 'clipValueMax', 'type': 'number'}\n    ]\n  },\n  {\n    'tfOpName': 'Complex',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'real', 'type': 'tensor'},\n      {'start': 1, 'name': 'imag', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'ComplexAbs',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Cos',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Cosh',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Elu',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Exp',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Floor',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Log',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Imag',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}, {\n        'tfName': 'Tout',\n        'name': 'outputType',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Neg',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Real',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}, {\n        'tfName': 'Tout',\n        'name': 'outputType',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Prelu',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'alpha', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Relu',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Relu6',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}, {\n        'tfName': 'clipValueMin',\n        'name': 'clipValueMin',\n        'type': 'number',\n        'defaultValue': 0\n      },\n      {\n        'tfName': 'clipValueMax',\n        'name': 'clipValueMax',\n        'type': 'number',\n        'defaultValue': 6\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Selu',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Sigmoid',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Sin',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Sinh',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Sqrt',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Rsqrt',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Square',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Tan',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Tanh',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Sign',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Round',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Expm1',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Log1p',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Reciprocal',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Softplus',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Asinh',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Acosh',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Atanh',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Erf',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Prod',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'axes', 'type': 'number[]'},\n    ],\n    'attrs': [\n      {\n        'tfName': 'keep_dims',\n        'name': 'keepDims',\n        'type': 'bool',\n        'notSupported': true\n      },\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'LeakyRelu',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {\n        'tfName': 'alpha',\n        'name': 'alpha',\n        'type': 'number',\n        'defaultValue': 0.2\n      },\n      {\n        'tfName': 'T',\n        'name': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  }\n];\n","import {OpMapper} from '../types';\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'LoopCond',\n    'category': 'control',\n    'inputs': [{'start': 0, 'name': 'pred', 'type': 'tensor'}]\n  },\n  {\n    'tfOpName': 'Switch',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'data', 'type': 'tensor'},\n      {'start': 1, 'name': 'pred', 'type': 'tensor'}\n    ]\n  },\n  {\n    'tfOpName': 'Merge',\n    'category': 'control',\n    'inputs':\n        [{'start': 0, 'end': 0, 'name': 'tensors', 'type': 'tensors'}]\n  },\n  {\n    'tfOpName': 'Enter',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'tensor', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true},\n      {'tfName': 'frame_name', 'name': 'frameName', 'type': 'string'},\n      {'tfName': 'is_constant', 'name': 'isConstant', 'type': 'bool'}\n    ]\n  },\n  {\n    'tfOpName': 'Exit',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'tensor', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'NextIteration',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'tensor', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'TensorArrayV3',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'size', 'type': 'number'},\n    ],\n    'attrs': [\n      {'tfName': 'dtype', 'name': 'dtype', 'type': 'dtype'},\n      {'tfName': 'element_shape', 'name': 'elementShape', 'type': 'shape'},\n      {'tfName': 'dynamic_size', 'name': 'dynamicSize', 'type': 'bool'},\n      {'tfName': 'clear_after_read', 'name': 'clearAfterRead', 'type': 'bool'},\n      {\n        'tfName': 'identical_element_shapes',\n        'name': 'identicalElementShapes',\n        'type': 'bool'\n      },\n      {'tfName': 'tensor_array_name', 'name': 'name', 'type': 'string'}\n    ]\n  },\n  {\n    'tfOpName': 'TensorArrayWriteV3',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'tensorArrayId', 'type': 'number'},\n      {'start': 1, 'name': 'index', 'type': 'number'},\n      {'start': 2, 'name': 'tensor', 'type': 'tensor'},\n      {'start': 3, 'name': 'flowIn', 'type': 'number'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'TensorArrayReadV3',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'tensorArrayId', 'type': 'number'},\n      {'start': 1, 'name': 'index', 'type': 'number'},\n      {'start': 2, 'name': 'flowIn', 'type': 'number'},\n    ],\n    'attrs': [{\n      'tfName': 'dtype',\n      'name': 'dtype',\n      'type': 'dtype',\n      'notSupported': true\n    }]\n  },\n  {\n    'tfOpName': 'TensorArrayGatherV3',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'tensorArrayId', 'type': 'number'},\n      {'start': 1, 'name': 'indices', 'type': 'number[]'},\n      {'start': 2, 'name': 'flowIn', 'type': 'number'},\n    ],\n    'attrs': [\n      {'tfName': 'dtype', 'name': 'dtype', 'type': 'dtype'},\n      {'tfName': 'element_shape', 'name': 'elementShape', 'type': 'shape'}\n    ]\n  },\n  {\n    'tfOpName': 'TensorArrayScatterV3',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'tensorArrayId', 'type': 'number'},\n      {'start': 1, 'name': 'indices', 'type': 'number[]'},\n      {'start': 2, 'name': 'tensor', 'type': 'tensor'},\n      {'start': 3, 'name': 'flowIn', 'type': 'number'},\n    ],\n    'attrs': [{'tfName': 'T', 'name': 'dtype', 'type': 'dtype'}]\n  },\n  {\n    'tfOpName': 'TensorArrayConcatV3',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'tensorArrayId', 'type': 'number'},\n      {'start': 1, 'name': 'flowIn', 'type': 'number'},\n    ],\n    'attrs': [\n      {'tfName': 'dtype', 'name': 'dtype', 'type': 'dtype'}, {\n        'tfName': 'element_shape_except0',\n        'name': 'elementShapeExcept0',\n        'type': 'shape',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'TensorArraySplitV3',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'tensorArrayId', 'type': 'number'},\n      {'start': 1, 'name': 'tensor', 'type': 'tensor'},\n      {'start': 2, 'name': 'lengths', 'type': 'number[]'},\n      {'start': 3, 'name': 'flowIn', 'type': 'number'},\n    ],\n    'attrs': [{'tfName': 'T', 'name': 'dtype', 'type': 'dtype'}]\n  },\n  {\n    'tfOpName': 'TensorArraySizeV3',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'tensorArrayId', 'type': 'number'},\n      {'start': 1, 'name': 'flowIn', 'type': 'number'}\n    ]\n  },\n  {\n    'tfOpName': 'TensorArrayCloseV3',\n    'category': 'control',\n    'inputs': [{'start': 0, 'name': 'tensorArrayId', 'type': 'number'}]\n  }\n];\n","import {OpMapper} from '../types';\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'AvgPool',\n    'category': 'convolution',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'strides', 'name': 'strides', 'type': 'number[]'},\n      {'tfName': 'padding', 'name': 'pad', 'type': 'string'}, {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'notSupported': true\n      },\n      {'tfName': 'ksize', 'name': 'kernelSize', 'type': 'number[]'},\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'MaxPool',\n    'category': 'convolution',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'strides', 'name': 'strides', 'type': 'number[]'},\n      {'tfName': 'padding', 'name': 'pad', 'type': 'string'}, {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'notSupported': true\n      },\n      {'tfName': 'ksize', 'name': 'kernelSize', 'type': 'number[]'},\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'AvgPool3D',\n    'category': 'convolution',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'strides', 'name': 'strides', 'type': 'number[]'},\n      {'tfName': 'padding', 'name': 'pad', 'type': 'string'}, {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'notSupported': true\n      },\n      {'tfName': 'ksize', 'name': 'kernelSize', 'type': 'number[]'},\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'MaxPool3D',\n    'category': 'convolution',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'strides', 'name': 'strides', 'type': 'number[]'},\n      {'tfName': 'padding', 'name': 'pad', 'type': 'string'}, {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'notSupported': true\n      },\n      {'tfName': 'ksize', 'name': 'kernelSize', 'type': 'number[]'},\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Conv1D',\n    'category': 'convolution',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'filter', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'stride', 'name': 'stride', 'type': 'number'},\n      {'tfName': 'padding', 'name': 'pad', 'type': 'string'}, {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'defaultValue': 'NWC'\n      },\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}, {\n        'tfName': 'dilation',\n        'name': 'dilation',\n        'type': 'number',\n        'defaultValue': 1\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Conv2D',\n    'category': 'convolution',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'filter', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true},\n      {'tfName': 'strides', 'name': 'strides', 'type': 'number[]'},\n      {'tfName': 'padding', 'name': 'pad', 'type': 'string'},\n      {'tfName': 'useCudnnOnGpu', 'name': 'useCudnnOnGpu', 'type': 'bool'}, {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'defaultValue': 'NHWC'\n      },\n      {'tfName': 'dilations', 'name': 'dilations', 'type': 'number[]'}\n    ]\n  },\n  {\n    'tfOpName': '_FusedConv2D',\n    'category': 'convolution',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'filter', 'type': 'tensor'},\n      {'start': 2, end: 0, 'name': 'args', 'type': 'tensors'},\n    ],\n    'attrs': [\n      {'tfName': 'num_args', 'name': 'numArgs', 'type': 'number'},\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true},\n      {'tfName': 'strides', 'name': 'strides', 'type': 'number[]'},\n      {'tfName': 'padding', 'name': 'pad', 'type': 'string'},\n      {\n        'tfName': 'explicit_paddings',\n        'name': 'explicitPaddings',\n        'type': 'number[]',\n        'defaultValue': []\n      },\n      {\n        'tfName': 'use_cudnn_on_gpu',\n        'name': 'useCudnnOnGpu',\n        'type': 'bool',\n        'defaultValue': true\n      },\n      {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'defaultValue': 'NHWC'\n      },\n      {\n        'tfName': 'dilations',\n        'name': 'dilations',\n        'type': 'number[]',\n        'defaultValue': [1, 1, 1, 1]\n      },\n      {\n        'tfName': 'fused_ops',\n        'name': 'fusedOps',\n        'type': 'string[]',\n        'defaultValue': []\n      },\n      {\n        'tfName': 'epsilon',\n        'name': 'epsilon',\n        'type': 'number',\n        'defaultValue': 0.0001\n      },\n    ]\n  },\n  {\n    'tfOpName': 'Conv2DBackpropInput',\n    'category': 'convolution',\n    'inputs': [\n      {'start': 2, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'filter', 'type': 'tensor'},\n      {'start': 0, 'name': 'outputShape', 'type': 'number[]'},\n    ],\n    'attrs': [\n      {'tfName': 'strides', 'name': 'strides', 'type': 'number[]'},\n      {'tfName': 'padding', 'name': 'pad', 'type': 'string'}, {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'DepthwiseConv2d',\n    'category': 'convolution',\n    'inputs': [\n      {'start': 0, 'name': 'input', 'type': 'tensor'},\n      {'start': 1, 'name': 'filter', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'strides', 'name': 'strides', 'type': 'number[]'},\n      {'tfName': 'padding', 'name': 'pad', 'type': 'string'}, {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'defaultValue': 'NHWC'\n      },\n      {'tfName': 'dilations', 'name': 'dilations', 'type': 'number[]'}\n    ]\n  },\n  {\n    'tfOpName': 'DepthwiseConv2dNative',\n    'category': 'convolution',\n    'inputs': [\n      {'start': 0, 'name': 'input', 'type': 'tensor'},\n      {'start': 1, 'name': 'filter', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'strides', 'name': 'strides', 'type': 'number[]'},\n      {'tfName': 'padding', 'name': 'pad', 'type': 'string'}, {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'defaultValue': 'NHWC'\n      },\n      {'tfName': 'dilations', 'name': 'dilations', 'type': 'number[]'}\n    ]\n  },\n  {\n    'tfOpName': 'Conv3D',\n    'category': 'convolution',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'filter', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'strides', 'name': 'strides', 'type': 'number[]'},\n      {'tfName': 'padding', 'name': 'pad', 'type': 'string'}, {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'defaultValue': 'NHWC'\n      },\n      {'tfName': 'dilations', 'name': 'dilations', 'type': 'number[]'}\n    ],\n  }\n];\n","import {OpMapper} from '../types';\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'Fill',\n    'category': 'creation',\n    'inputs': [\n      {'start': 0, 'name': 'shape', 'type': 'number[]'},\n      {'start': 1, 'name': 'value', 'type': 'number'},\n    ],\n    'attrs': [{'tfName': 'T', 'name': 'dtype', 'type': 'dtype'}]\n  },\n  {\n    'tfOpName': 'LinSpace',\n    'category': 'creation',\n    'inputs': [\n      {'start': 0, 'name': 'start', 'type': 'number'},\n      {'start': 1, 'name': 'stop', 'type': 'number'},\n      {'start': 2, 'name': 'num', 'type': 'number'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'OneHot',\n    'category': 'creation',\n    'inputs': [\n      {'start': 0, 'name': 'indices', 'type': 'tensor'},\n      {'start': 1, 'name': 'depth', 'type': 'number'},\n      {'start': 2, 'name': 'onValue', 'type': 'number', 'defaultValue': 1},\n      {'start': 3, 'name': 'offValue', 'type': 'number', 'defaultValue': 0},\n    ],\n    'attrs': [\n      {\n        'tfName': 'axis',\n        'name': 'axis',\n        'type': 'number',\n        'notSupported': true\n      },\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Ones',\n    'category': 'creation',\n    'inputs': [\n      {'start': 0, 'name': 'shape', 'type': 'number[]'},\n    ],\n    'attrs': [{'tfName': 'T', 'name': 'dtype', 'type': 'dtype'}]\n  },\n  {\n    'tfOpName': 'OnesLike',\n    'category': 'creation',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [{'tfName': 'dtype', 'name': 'dtype', 'type': 'dtype'}]\n  },\n  {\n    'tfOpName': 'RandomUniform',\n    'category': 'creation',\n    'inputs': [\n      {'start': 0, 'name': 'shape', 'type': 'number[]'},\n    ],\n    'attrs': [\n      {\n        'tfName': 'minval',\n        'name': 'minval',\n        'type': 'number',\n        'defaultValue': 0\n      },\n      {\n        'tfName': 'maxval',\n        'name': 'maxval',\n        'type': 'number',\n        'defaultValue': 1\n      },\n      {'tfName': 'dtype', 'name': 'dtype', 'type': 'dtype'},\n      {'tfName': 'seed', 'name': 'seed', 'type': 'number', 'defaultValue': 0}, {\n        'tfName': 'seed2',\n        'name': 'seed2',\n        'type': 'number',\n        'defaultValue': 0,\n        'notSupported': true\n      },\n      {'tfName': 'T', 'name': 'T', 'type': 'number', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Range',\n    'category': 'creation',\n    'inputs': [\n      {'start': 0, 'name': 'start', 'type': 'number'},\n      {'start': 1, 'name': 'stop', 'type': 'number'},\n      {'start': 2, 'name': 'step', 'type': 'number', 'defaultValue': 0},\n    ],\n    'attrs': [{'tfName': 'Tidx', 'name': 'dtype', 'type': 'dtype'}]\n  },\n  {\n    'tfOpName': 'TruncatedNormal',\n    'category': 'creation',\n    'inputs': [\n      {'start': 0, 'name': 'shape', 'type': 'number[]'},\n    ],\n    'attrs': [\n      {\n        'tfName': 'means',\n        'name': 'mean',\n        'type': 'number',\n        'defaultValue': 0.0\n      },\n      {\n        'tfName': 'stddev',\n        'name': 'stdDev',\n        'type': 'number',\n        'defaultValue': 1.0\n      },\n      {'tfName': 'seed', 'name': 'seed', 'type': 'number'}, {\n        'tfName': 'seed2',\n        'name': 'seed2',\n        'type': 'number',\n        'defaultValue': 0,\n        'notSupported': true\n      },\n      {'tfName': 'dtype', 'name': 'dtype', 'type': 'dtype'},\n      {'tfName': 'T', 'name': 'T', 'type': 'number', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Zeros',\n    'category': 'creation',\n    'inputs': [\n      {'start': 0, 'name': 'shape', 'type': 'number[]'},\n    ],\n    'attrs': [{'tfName': 'T', 'name': 'dtype', 'type': 'dtype'}]\n  },\n  {\n    'tfOpName': 'ZerosLike',\n    'category': 'creation',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [{'tfName': 'T', 'name': 'dtype', 'type': 'dtype'}]\n  },\n  {\n    'tfOpName': 'Multinomial',\n    'category': 'creation',\n    'inputs': [\n      {'start': 0, 'name': 'logits', 'type': 'tensor'},\n      {'start': 1, 'name': 'numSamples', 'type': 'number'},\n    ],\n    'attrs': [\n      {'tfName': 'seed', 'name': 'seed', 'type': 'number'},\n      {'tfName': 'seed2', 'name': 'seed2', 'type': 'number'},\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype'},\n      {'tfName': 'output_dtype', 'name': 'output_dtype', 'type': 'dtype'}\n    ]\n  }\n];\n","import {OpMapper} from '../types';\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'NonMaxSuppressionV2',\n    'category': 'dynamic',\n    'inputs': [\n      {'start': 0, 'name': 'boxes', 'type': 'tensor'},\n      {'start': 1, 'name': 'scores', 'type': 'tensor'},\n      {'start': 2, 'name': 'maxOutputSize', 'type': 'number'},\n      {'start': 3, 'name': 'iouThreshold', 'type': 'number'}\n    ]\n  },\n  {\n    'tfOpName': 'NonMaxSuppressionV3',\n    'category': 'dynamic',\n    'inputs': [\n      {'start': 0, 'name': 'boxes', 'type': 'tensor'},\n      {'start': 1, 'name': 'scores', 'type': 'tensor'},\n      {'start': 2, 'name': 'maxOutputSize', 'type': 'number'},\n      {'start': 3, 'name': 'iouThreshold', 'type': 'number'},\n      {'start': 4, 'name': 'scoreThreshold', 'type': 'number'}\n    ]\n  },\n  {\n    'tfOpName': 'Where',\n    'category': 'dynamic',\n    'inputs': [\n      {'start': 0, 'name': 'condition', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'ListDiff',\n    'category': 'dynamic',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'y', 'type': 'tensor'},\n    ],\n    'attrs': [{\n      'tfName': 'T',\n      'name': 'dtype',\n      'type': 'dtype',\n      'notSupported': true\n    }]\n  }\n];\n","import {OpMapper} from '../types';\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport const json: OpMapper[] = [{\n  'tfOpName': 'TopKV2',\n  'category': 'evaluation',\n  'inputs': [\n    {'start': 0, 'name': 'x', 'type': 'tensor'},\n    {'start': 1, 'name': 'k', 'type': 'number'},\n  ],\n  'attrs': [{'tfName': 'sorted', 'name': 'sorted', 'type': 'bool'}]\n}];\n","import {OpMapper} from '../types';\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'PlaceholderWithDefault',\n    'category': 'graph',\n    'inputs': [\n      {'start': 0, 'name': 'default', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'shape', 'name': 'shape', 'type': 'shape'},\n      {'tfName': 'dtype', 'name': 'dtype', 'type': 'dtype'}\n    ]\n  },\n  {\n    'tfOpName': 'Placeholder',\n    'category': 'graph',\n    'attrs': [\n      {'tfName': 'shape', 'name': 'shape', 'type': 'shape'},\n      {'tfName': 'dtype', 'name': 'dtype', 'type': 'dtype'}\n    ]\n  },\n  {'tfOpName': 'Const', 'category': 'graph'}, {\n    'tfOpName': 'Identity',\n    'category': 'graph',\n    'inputs': [{'start': 0, 'name': 'x', 'type': 'tensor'}]\n  },\n  {\n    'tfOpName': 'IdentityN',\n    'category': 'graph',\n    'inputs': [{'start': 0, 'end': 0, 'name': 'x', 'type': 'tensors'}]\n  },\n  {\n    'tfOpName': 'Snapshot',\n    'category': 'graph',\n    'inputs': [{'start': 0, 'name': 'x', 'type': 'tensor'}]\n  },\n  {\n    'tfOpName': 'Rank',\n    'category': 'graph',\n    'inputs': [{'start': 0, 'name': 'x', 'type': 'tensor'}]\n  },\n  {\n    'tfOpName': 'Size',\n    'category': 'graph',\n    'inputs': [{'start': 0, 'name': 'x', 'type': 'tensor'}]\n  },\n  {\n    'tfOpName': 'Shape',\n    'category': 'graph',\n    'inputs': [{'start': 0, 'name': 'x', 'type': 'tensor'}]\n  },\n  {\n    'tfOpName': 'ShapeN',\n    'category': 'graph',\n    'inputs': [{'start': 0, 'end': 0, 'name': 'x', 'type': 'tensors'}]\n  },\n  {\n    'tfOpName': 'Print',\n    'category': 'graph',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'data', 'type': 'tensors'},\n    ],\n    'attrs': [\n      {'tfName': 'message', 'name': 'message', 'type': 'string'}, {\n        'tfName': 'first_n',\n        'name': 'firstN',\n        'type': 'number',\n        'notSupported': true\n      },\n      {\n        'tfName': 'summarize',\n        'name': 'summarize',\n        'type': 'number',\n        'defaultValue': 3\n      }\n    ]\n  },\n  {'tfOpName': 'NoOp', 'category': 'graph', 'inputs': []}, {\n    'tfOpName': 'StopGradient',\n    'category': 'graph',\n    'inputs': [{'start': 0, 'name': 'x', 'type': 'tensor'}]\n  },\n  {\n    'tfOpName': 'FakeQuantWithMinMaxVars',\n    'category': 'graph',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'min', 'name': 'min', 'type': 'number'},\n      {'tfName': 'max', 'name': 'max', 'type': 'number'}\n    ]\n  }\n];\n","import {OpMapper} from '../types';\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'ResizeBilinear',\n    'category': 'image',\n    'inputs': [\n      {'start': 0, 'name': 'images', 'type': 'tensor'},\n      {'start': 1, 'name': 'size', 'type': 'number[]'},\n    ],\n    'attrs': [\n      {'tfName': 'align_corners', 'name': 'alignCorners', 'type': 'bool'},\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'ResizeNearestNeighbor',\n    'category': 'image',\n    'inputs': [\n      {'start': 0, 'name': 'images', 'type': 'tensor'},\n      {'start': 1, 'name': 'size', 'type': 'number[]'},\n    ],\n    'attrs': [\n      {'tfName': 'align_corners', 'name': 'alignCorners', 'type': 'bool'},\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'CropAndResize',\n    'category': 'image',\n    'inputs': [\n      {'start': 0, 'name': 'image', 'type': 'tensor'},\n      {'start': 1, 'name': 'boxes', 'type': 'tensor'},\n      {'start': 2, 'name': 'boxInd', 'type': 'tensor'},\n      {'start': 3, 'name': 'cropSize', 'type': 'number[]'},\n    ],\n    'attrs': [\n      {'tfName': 'method', 'name': 'method', 'type': 'string'}, {\n        'tfName': 'extrapolation_value',\n        'name': 'extrapolationValue',\n        'type': 'number'\n      }\n    ]\n  }\n];\n","import {OpMapper} from '../types';\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'Equal',\n    'category': 'logical',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'NotEqual',\n    'category': 'logical',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Greater',\n    'category': 'logical',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'GreaterEqual',\n    'category': 'logical',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Less',\n    'category': 'logical',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'LessEqual',\n    'category': 'logical',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'LogicalAnd',\n    'category': 'logical',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'LogicalNot',\n    'category': 'logical',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'LogicalOr',\n    'category': 'logical',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Select',\n    'category': 'logical',\n    'inputs': [\n      {'start': 0, 'name': 'condition', 'type': 'tensor'},\n      {'start': 1, 'name': 'a', 'type': 'tensor'},\n      {'start': 2, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [{\n      'tfName': 'T',\n      'name': 'dtype',\n      'type': 'dtype',\n      'notSupported': true\n    }]\n  }\n];\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {OpMapper} from '../types';\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'MatMul',\n    'category': 'matrices',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {\n        'tfName': 'transpose_a',\n        'name': 'transposeA',\n        'type': 'bool',\n        'defaultValue': false\n      },\n      {\n        'tfName': 'transpose_b',\n        'name': 'transposeB',\n        'type': 'bool',\n        'defaultValue': false\n      },\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'BatchMatMul',\n    'category': 'matrices',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {\n        'tfName': 'adj_x',\n        'name': 'transposeA',\n        'type': 'bool',\n        'defaultValue': false\n      },\n      {\n        'tfName': 'adj_y',\n        'name': 'transposeB',\n        'type': 'bool',\n        'defaultValue': false\n      },\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'BatchMatMulV2',\n    'category': 'matrices',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {\n        'tfName': 'adj_x',\n        'name': 'transposeA',\n        'type': 'bool',\n        'defaultValue': false\n      },\n      {\n        'tfName': 'adj_y',\n        'name': 'transposeB',\n        'type': 'bool',\n        'defaultValue': false\n      },\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Transpose',\n    'category': 'matrices',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'perm', 'type': 'number[]'},\n    ],\n    'attrs': [{\n      'tfName': 'T',\n      'name': 'dtype',\n      'type': 'dtype',\n      'notSupported': true\n    }]\n  }\n];\n","import {OpMapper} from '../types';\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'FusedBatchNorm',\n    'category': 'normalization',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'scale', 'type': 'tensor'},\n      {'start': 2, 'name': 'offset', 'type': 'tensor'},\n      {'start': 3, 'name': 'mean', 'type': 'tensor'},\n      {'start': 4, 'name': 'variance', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {\n        'tfName': 'epsilon',\n        'name': 'epsilon',\n        'type': 'number',\n        'defaultValue': 0.001\n      },\n      {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'FusedBatchNormV2',\n    'category': 'normalization',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'scale', 'type': 'tensor'},\n      {'start': 2, 'name': 'offset', 'type': 'tensor'},\n      {'start': 3, 'name': 'mean', 'type': 'tensor'},\n      {'start': 4, 'name': 'variance', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {\n        'tfName': 'epsilon',\n        'name': 'epsilon',\n        'type': 'number',\n        'defaultValue': 0.001\n      },\n      {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'FusedBatchNormV3',\n    'category': 'normalization',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'scale', 'type': 'tensor'},\n      {'start': 2, 'name': 'offset', 'type': 'tensor'},\n      {'start': 3, 'name': 'mean', 'type': 'tensor'},\n      {'start': 4, 'name': 'variance', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {\n        'tfName': 'epsilon',\n        'name': 'epsilon',\n        'type': 'number',\n        'defaultValue': 0.001\n      },\n      {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'LRN',\n    'category': 'normalization',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {\n        'tfName': 'depth_radius',\n        'name': 'radius',\n        'type': 'number',\n        'defaultValue': 5\n      },\n      {'tfName': 'bias', 'name': 'bias', 'type': 'number', 'defaultValue': 1.0},\n      {\n        'tfName': 'alpha',\n        'name': 'alpha',\n        'type': 'number',\n        'defaultValue': 1.0\n      },\n      {\n        'tfName': 'beta',\n        'name': 'beta',\n        'type': 'number',\n        'defaultValue': 0.5\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Softmax',\n    'category': 'normalization',\n    'inputs': [{'start': 0, 'name': 'x', 'type': 'tensor'}]\n  },\n  {\n    'tfOpName': 'LogSoftmax',\n    'category': 'normalization',\n    'inputs': [{'start': 0, 'name': 'x', 'type': 'tensor'}]\n  },\n  {\n    'tfOpName': 'SparseToDense',\n    'category': 'normalization',\n    'inputs': [\n      {'start': 0, 'name': 'sparseIndices', 'type': 'tensor'},\n      {'start': 1, 'name': 'outputShape', 'type': 'number[]'},\n      {'start': 2, 'name': 'sparseValues', 'type': 'tensor'},\n      {'start': 3, 'name': 'defaultValue', 'type': 'tensor'},\n    ],\n    'attrs': [{\n      'tfName': 'validate_indices',\n      'name': 'validateIndices',\n      'type': 'bool',\n      'defaultValue': true,\n      'notSupported': true\n    }]\n  }\n];\n","import {OpMapper} from '../types';\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'Max',\n    'category': 'reduction',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'axis', 'type': 'number[]'},\n    ],\n    'attrs': [{'tfName': 'keep_dims', 'name': 'keepDims', 'type': 'bool'}]\n  },\n  {\n    'tfOpName': 'Mean',\n    'category': 'reduction',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'axis', 'type': 'number[]'},\n    ],\n    'attrs': [{'tfName': 'keep_dims', 'name': 'keepDims', 'type': 'bool'}]\n  },\n  {\n    'tfOpName': 'Min',\n    'category': 'reduction',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'axis', 'type': 'number[]'},\n    ],\n    'attrs': [{'tfName': 'keep_dims', 'name': 'keepDims', 'type': 'bool'}]\n  },\n  {\n    'tfOpName': 'Sum',\n    'category': 'reduction',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'axis', 'type': 'number[]'},\n    ],\n    'attrs': [{'tfName': 'keep_dims', 'name': 'keepDims', 'type': 'bool'}]\n  },\n  {\n    'tfOpName': 'All',\n    'category': 'reduction',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'axis', 'type': 'number[]'},\n    ],\n    'attrs': [{'tfName': 'keep_dims', 'name': 'keepDims', 'type': 'bool'}]\n  },\n  {\n    'tfOpName': 'Any',\n    'category': 'reduction',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'axis', 'type': 'number[]'},\n    ],\n    'attrs': [{'tfName': 'keep_dims', 'name': 'keepDims', 'type': 'bool'}]\n  },\n  {\n    'tfOpName': 'ArgMax',\n    'category': 'reduction',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'axis', 'type': 'number'}\n    ]\n  },\n  {\n    'tfOpName': 'ArgMin',\n    'category': 'reduction',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'axis', 'type': 'number'}\n    ]\n  },\n  {\n    'tfOpName': 'Prod',\n    'category': 'reduction',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'axis', 'type': 'number[]'},\n    ],\n    'attrs': [{'tfName': 'keep_dims', 'name': 'keepDims', 'type': 'bool'}]\n  }\n];\n","import {OpMapper} from '../types';\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'ConcatV2',\n    'category': 'slice_join',\n    'inputs': [\n      {'start': 0, 'end': -1, 'name': 'tensors', 'type': 'tensors'},\n      {'start': -1, 'name': 'axis', 'type': 'number'}\n    ]\n  },\n  {\n    'tfOpName': 'Concat',\n    'category': 'slice_join',\n    'inputs': [\n      {'start': 1, 'end': 0, 'name': 'tensors', 'type': 'tensors'},\n      {'start': 0, 'name': 'axis', 'type': 'number'}\n    ]\n  },\n  {\n    'tfOpName': 'GatherV2',\n    'category': 'slice_join',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'indices', 'type': 'tensor'},\n      {'start': 2, 'name': 'axis', 'type': 'number', 'defaultValue': 0}\n    ]\n  },\n  {\n    'tfOpName': 'Gather',\n    'category': 'slice_join',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'indices', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'axis', 'name': 'axis', 'type': 'number', 'defaultValue': 0}, {\n        'tfName': 'validate_indices',\n        'name': 'validateIndices',\n        'type': 'bool',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Reverse',\n    'category': 'slice_join',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'dims', 'type': 'bool', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'ReverseV2',\n    'category': 'slice_join',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'axis', 'type': 'number[]'}\n    ]\n  },\n  {\n    'tfOpName': 'Slice',\n    'category': 'slice_join',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'begin', 'type': 'number[]'},\n      {'start': 2, 'name': 'size', 'type': 'number[]'}\n    ]\n  },\n  {\n    'tfOpName': 'StridedSlice',\n    'category': 'slice_join',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'begin', 'type': 'number[]'},\n      {'start': 2, 'name': 'end', 'type': 'number[]'},\n      {'start': 3, 'name': 'strides', 'type': 'number[]'},\n    ],\n    'attrs': [\n      {\n        'tfName': 'begin_mask',\n        'name': 'beginMask',\n        'type': 'number',\n        'defaultValue': 0\n      },\n      {\n        'tfName': 'end_mask',\n        'name': 'endMask',\n        'type': 'number',\n        'defaultValue': 0\n      },\n      {\n        'tfName': 'new_axis_mask',\n        'name': 'newAxisMask',\n        'type': 'number',\n        'defaultValue': 0\n      },\n      {\n        'tfName': 'ellipsis_mask',\n        'name': 'ellipsisMask',\n        'type': 'number',\n        'defaultValue': 0\n      },\n      {\n        'tfName': 'shrink_axis_mask',\n        'name': 'shrinkAxisMask',\n        'type': 'number',\n        'defaultValue': 0\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Pack',\n    'category': 'slice_join',\n    'inputs': [\n      {'start': 0, 'end': 0, 'name': 'tensors', 'type': 'tensors'},\n    ],\n    'attrs': [\n      {'tfName': 'axis', 'name': 'axis', 'type': 'number', 'defaultValue': 0}\n    ]\n  },\n  {\n    'tfOpName': 'Unpack',\n    'category': 'slice_join',\n    'inputs': [\n      {'start': 0, 'name': 'tensor', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'axis', 'name': 'axis', 'type': 'number', 'defaultValue': 0}, {\n        'tfName': 'num',\n        'name': 'num',\n        'type': 'number',\n        'defaultValue': 0,\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Tile',\n    'category': 'slice_join',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'reps', 'type': 'number[]'}\n    ]\n  },\n  {\n    'tfOpName': 'Split',\n    'category': 'slice_join',\n    'inputs': [\n      {'start': 0, 'name': 'axis', 'type': 'number', 'defaultValue': 0},\n      {'start': 1, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [{\n      'tfName': 'num_split',\n      'name': 'numOrSizeSplits',\n      'type': 'number',\n      'defaultValue': 1\n    }]\n  },\n  {\n    'tfOpName': 'SplitV',\n    'category': 'slice_join',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'numOrSizeSplits', 'type': 'number[]'},\n      {'start': 2, 'name': 'axis', 'type': 'number', 'defaultValue': 0}\n    ]\n  },\n  {\n    'tfOpName': 'ScatterNd',\n    'category': 'slice_join',\n    'inputs': [\n      {'start': 0, 'name': 'indices', 'type': 'tensor'},\n      {'start': 1, 'name': 'values', 'type': 'tensor'},\n      {'start': 2, 'name': 'shape', 'type': 'number[]'}\n    ]\n  },\n  {\n    'tfOpName': 'GatherNd',\n    'category': 'slice_join',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'indices', 'type': 'tensor'}\n    ]\n  },\n  {\n    'tfOpName': 'SparseToDense',\n    'category': 'slice_join',\n    'inputs': [\n      {'start': 0, 'name': 'sparseIndices', 'type': 'tensor'},\n      {'start': 1, 'name': 'outputShape', 'type': 'number[]'},\n      {'start': 2, 'name': 'sparseValues', 'type': 'tensor'},\n      {'start': 3, 'name': 'defaultValue', 'type': 'tensor'},\n    ],\n    'attrs': [{\n      'tfName': 'validate_indices',\n      'name': 'validateIndices',\n      'type': 'bool',\n      'defaultValue': false,\n      'notSupported': true\n    }]\n  }\n];\n","import {OpMapper} from '../types';\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'FFT',\n    'category': 'spectral',\n    'inputs': [{'start': 0, 'name': 'x', 'type': 'tensor'}]\n  },\n  {\n    'tfOpName': 'IFFT',\n    'category': 'spectral',\n    'inputs': [{'start': 0, 'name': 'x', 'type': 'tensor'}]\n  },\n  {\n    'tfOpName': 'RFFT',\n    'category': 'spectral',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'}, {\n        'start': 1,\n        'name': 'fft_length',\n        'type': 'number',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'IRFFT',\n    'category': 'spectral',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'}, {\n        'start': 1,\n        'name': 'fft_length',\n        'type': 'number',\n        'notSupported': true\n      }\n    ]\n  }\n];\n","import {OpMapper} from '../types';\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'Cast',\n    'category': 'transformation',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {\n        'tfName': 'SrcT',\n        'name': 'sdtype',\n        'type': 'dtype',\n        'notSupported': true\n      },\n      {'tfName': 'DstT', 'name': 'dtype', 'type': 'dtype'}\n    ]\n  },\n  {\n    'tfOpName': 'ExpandDims',\n    'category': 'transformation',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'axis', 'type': 'number'}\n    ]\n  },\n  {\n    'tfOpName': 'Pad',\n    'category': 'transformation',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'padding', 'type': 'number[]'},\n    ],\n    'attrs': [{\n      'tfName': 'constant_value',\n      'name': 'constantValue',\n      'type': 'number',\n      'defaultValue': 0\n    }]\n  },\n  {\n    'tfOpName': 'PadV2',\n    'category': 'transformation',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'padding', 'type': 'number[]'}, {\n        'start': 2,\n        'name': 'constantValue',\n        'type': 'number',\n        'defaultValue': 0\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Reshape',\n    'category': 'transformation',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'shape', 'type': 'number[]'}\n    ]\n  },\n  {\n    'tfOpName': 'Squeeze',\n    'category': 'transformation',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [{\n      'tfName': 'axis',\n      'tfDeprecatedName': 'squeeze_dims',\n      'name': 'axis',\n      'type': 'number[]'\n    }]\n  },\n  {\n    'tfOpName': 'SpaceToBatchND',\n    'category': 'transformation',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'blockShape', 'type': 'number[]'},\n      {'start': 2, 'name': 'paddings', 'type': 'number[]'}\n    ]\n  },\n  {\n    'tfOpName': 'BatchToSpaceND',\n    'category': 'transformation',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'blockShape', 'type': 'number[]'},\n      {'start': 2, 'name': 'crops', 'type': 'number[]'}\n    ]\n  },\n  {\n    'tfOpName': 'DepthToSpace',\n    'category': 'transformation',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'block_size', 'name': 'blockSize', 'type': 'number'},\n      {'tfName': 'data_format', 'name': 'dataFormat', 'type': 'string'}\n    ]\n  }\n];\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, env} from '@tensorflow/tfjs-core';\n\nimport * as tensorflow from '../data/compiled_api';\nimport {getRegisteredOp} from './custom_op/register';\n\nimport {getNodeNameAndIndex} from './executors/utils';\nimport * as arithmetic from './op_list/arithmetic';\nimport * as basicMath from './op_list/basic_math';\nimport * as control from './op_list/control';\nimport * as convolution from './op_list/convolution';\nimport * as creation from './op_list/creation';\nimport * as dynamic from './op_list/dynamic';\nimport * as evaluation from './op_list/evaluation';\nimport * as graph from './op_list/graph';\nimport * as image from './op_list/image';\nimport * as logical from './op_list/logical';\nimport * as matrices from './op_list/matrices';\nimport * as normalization from './op_list/normalization';\nimport * as reduction from './op_list/reduction';\nimport * as sliceJoin from './op_list/slice_join';\nimport * as spectral from './op_list/spectral';\nimport * as transformation from './op_list/transformation';\nimport {Graph, InputParamValue, Node, OpMapper, ParamValue} from './types';\n\nexport class OperationMapper {\n  private static _instance: OperationMapper;\n\n  private opMappers: {[key: string]: OpMapper};\n\n  // Singleton instance for the mapper\n  public static get Instance() {\n    return this._instance || (this._instance = new this());\n  }\n\n  // Loads the op mapping from the JSON file.\n  private constructor() {\n    const ops = [\n      arithmetic, basicMath, control, convolution, creation, dynamic,\n      evaluation, logical, image, graph, matrices, normalization, reduction,\n      sliceJoin, spectral, transformation\n    ];\n    const mappersJson: OpMapper[] = [].concat.apply([], ops.map(op => op.json));\n\n    this.opMappers = mappersJson.reduce<{[key: string]: OpMapper}>(\n        (map, mapper: OpMapper) => {\n          map[mapper.tfOpName] = mapper;\n          return map;\n        },\n        {});\n  }\n\n  // Converts the model from Tensorflow GraphDef to local representation for\n  // TensorFlow.js API\n  transformGraph(graph: tensorflow.IGraphDef): Graph {\n    const tfNodes = graph.node;\n    const placeholders: Node[] = [];\n    const weights: Node[] = [];\n    const nodes = tfNodes.reduce<{[key: string]: Node}>((map, node) => {\n      map[node.name] = this.mapNode(node);\n      if (node.op === 'Placeholder') {\n        placeholders.push(map[node.name]);\n      }\n      if (node.op === 'Const') {\n        weights.push(map[node.name]);\n      }\n      return map;\n    }, {});\n\n    const inputs: Node[] = [];\n    const outputs: Node[] = [];\n    const allNodes = Object.keys(nodes);\n    allNodes.forEach(key => {\n      const node = nodes[key];\n      node.inputNames.forEach(name => {\n        const [nodeName, ] = getNodeNameAndIndex(name);\n        node.inputs.push(nodes[nodeName]);\n        nodes[nodeName].children.push(node);\n      });\n      if (node.inputs.length === 0) {\n        inputs.push(node);\n      }\n    });\n\n    allNodes.forEach(key => {\n      const node = nodes[key];\n      if (node.children.length === 0) {\n        outputs.push(node);\n      }\n    });\n\n    return {nodes, inputs, outputs, weights, placeholders};\n  }\n\n  private mapNode(node: tensorflow.INodeDef): Node {\n    // Unsupported ops will cause an error at run-time (not parse time), since\n    // they may not be used by the actual execution subgraph.\n    const mapper =\n        getRegisteredOp(node.op) || this.opMappers[node.op] || {} as OpMapper;\n    if (node.attr == null) {\n      node.attr = {};\n    }\n\n    const newNode: Node = {\n      name: node.name,\n      op: node.op,\n      category: mapper.category,\n      inputNames:\n          (node.input ||\n           []).map(input => input.startsWith('^') ? input.substr(1) : input),\n      inputs: [],\n      children: [],\n      inputParams: {},\n      attrParams: {},\n      rawAttrs: node.attr\n    };\n\n    if (mapper.inputs != null) {\n      newNode.inputParams =\n          mapper.inputs.reduce<{[key: string]: InputParamValue}>(\n              (map, param) => {\n                map[param.name] = {\n                  type: param.type,\n                  inputIndexStart: param.start,\n                  inputIndexEnd: param.end\n                };\n                return map;\n              },\n              {});\n    }\n    if (mapper.attrs != null) {\n      newNode.attrParams =\n          mapper.attrs.reduce<{[key: string]: ParamValue}>((map, param) => {\n            const type = param.type;\n            let value = undefined;\n            switch (param.type) {\n              case 'string':\n                value = getStringParam(\n                    node.attr, param.tfName, param.defaultValue as string);\n\n                if (value === undefined && !!param.tfDeprecatedName) {\n                  value = getStringParam(\n                      node.attr, param.tfDeprecatedName,\n                      param.defaultValue as string);\n                }\n                break;\n              case 'string[]':\n                value = getStringArrayParam(\n                    node.attr, param.tfName, param.defaultValue as string[]);\n\n                if (value === undefined && !!param.tfDeprecatedName) {\n                  value = getStringArrayParam(\n                      node.attr, param.tfDeprecatedName,\n                      param.defaultValue as string[]);\n                }\n                break;\n              case 'number':\n                value = getNumberParam(\n                    node.attr, param.tfName,\n                    (param.defaultValue || 0) as number);\n                if (value === undefined && !!param.tfDeprecatedName) {\n                  value = getNumberParam(\n                      node.attr, param.tfDeprecatedName,\n                      param.defaultValue as number);\n                }\n                break;\n              case 'number[]':\n                value = getNumericArrayParam(\n                    node.attr, param.tfName, param.defaultValue as number[]);\n                if (value === undefined && !!param.tfDeprecatedName) {\n                  value = getNumericArrayParam(\n                      node.attr, param.tfDeprecatedName,\n                      param.defaultValue as number[]);\n                }\n                break;\n              case 'bool':\n                value = getBoolParam(\n                    node.attr, param.tfName, param.defaultValue as boolean);\n                if (value === undefined && !!param.tfDeprecatedName) {\n                  value = getBoolParam(\n                      node.attr, param.tfDeprecatedName,\n                      param.defaultValue as boolean);\n                }\n                break;\n              case 'bool[]':\n                value = getBoolArrayParam(\n                    node.attr, param.tfName, param.defaultValue as boolean[]);\n                if (value === undefined && !!param.tfDeprecatedName) {\n                  value = getBoolArrayParam(\n                      node.attr, param.tfDeprecatedName,\n                      param.defaultValue as boolean[]);\n                }\n                break;\n              case 'shape':\n                value = getTensorShapeParam(\n                    node.attr, param.tfName, param.defaultValue as number[]);\n                if (value === undefined && !!param.tfDeprecatedName) {\n                  value = getTensorShapeParam(\n                      node.attr, param.tfDeprecatedName,\n                      param.defaultValue as number[]);\n                }\n                break;\n              case 'shape[]':\n                value = getTensorShapeArrayParam(\n                    node.attr, param.tfName, param.defaultValue as number[][]);\n                if (value === undefined && !!param.tfDeprecatedName) {\n                  value = getTensorShapeArrayParam(\n                      node.attr, param.tfDeprecatedName,\n                      param.defaultValue as number[][]);\n                }\n                break;\n              case 'dtype':\n                value = getDtypeParam(\n                    node.attr, param.tfName, param.defaultValue as DataType);\n                if (value === undefined && !!param.tfDeprecatedName) {\n                  value = getDtypeParam(\n                      node.attr, param.tfDeprecatedName,\n                      param.defaultValue as DataType);\n                }\n                break;\n              case 'dtype[]':\n                value = getDtypeArrayParam(\n                    node.attr, param.tfName, param.defaultValue as DataType[]);\n                if (value === undefined && !!param.tfDeprecatedName) {\n                  value = getDtypeArrayParam(\n                      node.attr, param.tfDeprecatedName,\n                      param.defaultValue as DataType[]);\n                }\n                break;\n              case 'tensor':\n              case 'tensors':\n                break;\n              default:\n                throw new Error(\n                    `Unsupported param type: ${param.type} for op: ${node.op}`);\n            }\n            map[param.name] = {value, type};\n            return map;\n          }, {});\n    }\n    return newNode;\n  }\n}\n\nexport function decodeBase64(text: string): string {\n  const global = env().global;\n  if (typeof global.atob !== 'undefined') {\n    return global.atob(text);\n  } else if (typeof Buffer !== 'undefined') {\n    return new Buffer(text, 'base64').toString();\n  } else {\n    throw new Error(\n        'Unable to decode base64 in this environment. ' +\n        'Missing built-in atob() or Buffer()');\n  }\n}\n\nexport function parseStringParam(s: []|string, keepCase: boolean): string {\n  const value =\n      Array.isArray(s) ? String.fromCharCode.apply(null, s) : decodeBase64(s);\n  return keepCase ? value : value.toLowerCase();\n}\n\nexport function getStringParam(\n    attrs: {[key: string]: tensorflow.IAttrValue}, name: string, def: string,\n    keepCase = false): string {\n  const param = attrs[name];\n  if (param != null) {\n    return parseStringParam(param.s, keepCase);\n  }\n  return def;\n}\n\nexport function getBoolParam(\n    attrs: {[key: string]: tensorflow.IAttrValue}, name: string,\n    def: boolean): boolean {\n  const param = attrs[name];\n  return param ? param.b : def;\n}\n\nexport function getNumberParam(\n    attrs: {[key: string]: tensorflow.IAttrValue}, name: string,\n    def: number): number {\n  const param = attrs[name] || {};\n  const value =\n      param['i'] != null ? param['i'] : (param['f'] != null ? param['f'] : def);\n  return (typeof value === 'number') ? value : parseInt(value, 10);\n}\n\nexport function parseDtypeParam(value: string|tensorflow.DataType): DataType {\n  if (typeof (value) === 'string') {\n    // tslint:disable-next-line:no-any\n    value = tensorflow.DataType[value as any];\n  }\n  switch (value) {\n    case tensorflow.DataType.DT_FLOAT:\n      return 'float32';\n    case tensorflow.DataType.DT_INT32:\n    case tensorflow.DataType.DT_INT64:\n      return 'int32';\n    case tensorflow.DataType.DT_BOOL:\n      return 'bool';\n    case tensorflow.DataType.DT_DOUBLE:\n      return 'float32';\n    case tensorflow.DataType.DT_STRING:\n      return 'string';\n    default:\n      // Unknown dtype error will happen at runtime (instead of parse time),\n      // since these nodes might not be used by the actual subgraph execution.\n      return null;\n  }\n}\n\nexport function getDtypeParam(\n    attrs: {[key: string]: tensorflow.IAttrValue}, name: string,\n    def: DataType): DataType {\n  const param = attrs[name];\n  if (param && param.type) {\n    return parseDtypeParam(param.type);\n  }\n  return def;\n}\n\nexport function getDtypeArrayParam(\n    attrs: {[key: string]: tensorflow.IAttrValue}, name: string,\n    def: DataType[]): DataType[] {\n  const param = attrs[name];\n  if (param && param.list && param.list.type) {\n    return param.list.type.map(v => parseDtypeParam(v));\n  }\n  return def;\n}\n\nexport function parseTensorShapeParam(shape: tensorflow.ITensorShape): number[]|\n    undefined {\n  if (shape.unknownRank) {\n    return undefined;\n  }\n  if (shape.dim != null) {\n    return shape.dim.map(\n        dim =>\n            (typeof dim.size === 'number') ? dim.size : parseInt(dim.size, 10));\n  }\n  return [];\n}\n\nexport function getTensorShapeParam(\n    attrs: {[key: string]: tensorflow.IAttrValue}, name: string,\n    def?: number[]): number[]|undefined {\n  const param = attrs[name];\n  if (param && param.shape) {\n    return parseTensorShapeParam(param.shape);\n  }\n  return def;\n}\n\nexport function getNumericArrayParam(\n    attrs: {[key: string]: tensorflow.IAttrValue}, name: string,\n    def: number[]): number[] {\n  const param = attrs[name];\n  if (param) {\n    return ((param.list.f && param.list.f.length ? param.list.f :\n                                                   param.list.i) ||\n            [])\n        .map(v => (typeof v === 'number') ? v : parseInt(v, 10));\n  }\n  return def;\n}\n\nexport function getStringArrayParam(\n    attrs: {[key: string]: tensorflow.IAttrValue}, name: string, def: string[],\n    keepCase = false): string[] {\n  const param = attrs[name];\n  if (param && param.list && param.list.s) {\n    return param.list.s.map((v) => {\n      return parseStringParam(v, keepCase);\n    });\n  }\n  return def;\n}\n\nexport function getTensorShapeArrayParam(\n    attrs: {[key: string]: tensorflow.IAttrValue}, name: string,\n    def: number[][]): number[][] {\n  const param = attrs[name];\n  if (param && param.list && param.list.shape) {\n    return param.list.shape.map((v) => {\n      return parseTensorShapeParam(v);\n    });\n  }\n  return def;\n}\n\nexport function getBoolArrayParam(\n    attrs: {[key: string]: tensorflow.IAttrValue}, name: string,\n    def: boolean[]): boolean[] {\n  const param = attrs[name];\n  if (param && param.list && param.list.b) {\n    return param.list.b;\n  }\n  return def;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, Tensor} from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {getTensor} from '../executors/utils';\nimport {getBoolArrayParam, getBoolParam, getDtypeArrayParam, getDtypeParam, getNumberParam, getNumericArrayParam, getStringArrayParam, getStringParam, getTensorShapeArrayParam, getTensorShapeParam} from '../operation_mapper';\nimport {GraphNode, Node, ValueType} from '../types';\n\n/**\n * Helper class for lookup inputs and params for nodes in the model graph.\n */\nexport class NodeValueImpl implements GraphNode {\n  public readonly inputs: Tensor[] = [];\n  public readonly attrs: {[key: string]: ValueType} = {};\n  constructor(\n      private node: Node, private tensorMap: NamedTensorsMap,\n      private context: ExecutionContext) {\n    this.inputs = node.inputNames.map(name => this.getInput(name));\n    if (node.rawAttrs != null) {\n      this.attrs = Object.keys(node.rawAttrs)\n                       .reduce((attrs: {[key: string]: ValueType}, key) => {\n                         attrs[key] = this.getAttr(key);\n                         return attrs;\n                       }, {});\n    }\n  }\n\n  /**\n   * Return the value of the attribute or input param.\n   * @param name String: name of attribute or input param.\n   */\n  private getInput(name: string): Tensor {\n    return getTensor(name, this.tensorMap, this.context);\n  }\n\n  /**\n   * Return the value of the attribute or input param.\n   * @param name String: name of attribute or input param.\n   */\n  private getAttr(name: string, defaultValue?: ValueType): ValueType {\n    const value = this.node.rawAttrs[name];\n    if (value.tensor != null) {\n      return getTensor(name, this.tensorMap, this.context);\n    }\n    if (value.i != null || value.f != null) {\n      return getNumberParam(this.node.rawAttrs, name, defaultValue as number);\n    }\n    if (value.s != null) {\n      return getStringParam(this.node.rawAttrs, name, defaultValue as string);\n    }\n    if (value.b != null) {\n      return getBoolParam(this.node.rawAttrs, name, defaultValue as boolean);\n    }\n    if (value.shape != null) {\n      return getTensorShapeParam(\n          this.node.rawAttrs, name, defaultValue as number[]);\n    }\n    if (value.type != null) {\n      return getDtypeParam(this.node.rawAttrs, name, defaultValue as DataType);\n    }\n    if (value.list != null) {\n      if (value.list.i != null || value.list.f != null) {\n        return getNumericArrayParam(\n            this.node.rawAttrs, name, defaultValue as number[]);\n      }\n      if (value.list.s != null) {\n        return getStringArrayParam(\n            this.node.rawAttrs, name, defaultValue as string[]);\n      }\n      if (value.list.shape != null) {\n        return getTensorShapeArrayParam(\n            this.node.rawAttrs, name, defaultValue as number[][]);\n      }\n      if (value.list.b != null) {\n        return getBoolArrayParam(\n            this.node.rawAttrs, name, defaultValue as boolean[]);\n      }\n      if (value.list.type != null) {\n        return getDtypeArrayParam(\n            this.node.rawAttrs, name, defaultValue as DataType[]);\n      }\n    }\n\n    return defaultValue;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getParamValue} from './utils';\n\nexport let executeOp: InternalOpExecutor = (node: Node,\n                                            tensorMap: NamedTensorsMap,\n                                            context: ExecutionContext):\n                                               tfc.Tensor[] => {\n  switch (node.op) {\n    case 'BiasAdd':\n    case 'AddV2':\n    case 'Add': {\n      return [tfc.add(\n          (getParamValue('a', node, tensorMap, context) as tfc.Tensor),\n          getParamValue('b', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'AddN': {\n      return [tfc.addN((\n          getParamValue('tensors', node, tensorMap, context) as tfc.Tensor[]))];\n    }\n    case 'FloorMod':\n    case 'Mod':\n      return [tfc.mod(\n          getParamValue('a', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('b', node, tensorMap, context) as tfc.Tensor)];\n    case 'Mul':\n      return [tfc.mul(\n          getParamValue('a', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('b', node, tensorMap, context) as tfc.Tensor)];\n    case 'RealDiv':\n    case 'Div': {\n      return [tfc.div(\n          getParamValue('a', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('b', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'FloorDiv': {\n      return [tfc.floorDiv(\n          getParamValue('a', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('b', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'Sub': {\n      return [tfc.sub(\n          getParamValue('a', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('b', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'Minimum': {\n      return [tfc.minimum(\n          getParamValue('a', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('b', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'Maximum': {\n      return [tfc.maximum(\n          getParamValue('a', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('b', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'Pow': {\n      return [tfc.pow(\n          getParamValue('a', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('b', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'SquaredDifference': {\n      return [tfc.squaredDifference(\n          getParamValue('a', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('b', node, tensorMap, context) as tfc.Tensor)];\n    }\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\n\nexport const CATEGORY = 'arithmetic';\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getParamValue, getTensor} from './utils';\n\nexport let executeOp: InternalOpExecutor = (node: Node,\n                                            tensorMap: NamedTensorsMap,\n                                            context: ExecutionContext):\n                                               tfc.Tensor[] => {\n  switch (node.op) {\n    case 'Abs':\n    case 'ComplexAbs':\n      return [tfc.abs(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    case 'Acos':\n      return [tfc.acos(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    case 'Acosh':\n      return [tfc.acosh(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    case 'Asin':\n      return [tfc.asin(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    case 'Asinh':\n      return [tfc.asinh(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    case 'Atan':\n      return [tfc.atan(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    case 'Atan2':\n      return [tfc.atan2(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('y', node, tensorMap, context) as tfc.Tensor)];\n    case 'Atanh':\n      return [tfc.atanh(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    case 'Ceil':\n      return [tfc.ceil(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    case 'Complex':\n      return [tfc.complex(\n          getParamValue('real', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('imag', node, tensorMap, context) as tfc.Tensor)];\n    case 'Cos':\n      return [tfc.cos(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    case 'Cosh':\n      return [tfc.cosh(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    case 'Elu':\n      return [tfc.elu(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    case 'Erf':\n      return [tfc.erf(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    case 'Exp':\n      return [tfc.exp(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    case 'Expm1': {\n      return [tfc.expm1(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'Floor':\n      return [tfc.floor(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    case 'Log':\n      return [tfc.log(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    case 'Log1p': {\n      return [tfc.log1p(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'Imag':\n      return [tfc.imag(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n\n    case 'Neg':\n      return [tfc.neg(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    case 'Reciprocal': {\n      return [tfc.reciprocal(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'Real':\n      return [tfc.real(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    case 'Relu':\n      return [tfc.relu(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    case 'Round': {\n      return [tfc.round(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'Selu':\n      return [tfc.selu(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    case 'Sigmoid':\n      return [tfc.sigmoid(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    case 'Sin':\n      return [tfc.sin(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    case 'Sign': {\n      return [tfc.sign(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'Sinh': {\n      return [tfc.sinh(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'Softplus': {\n      return [tfc.softplus(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'Sqrt': {\n      return [tfc.sqrt(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'Square': {\n      return [tfc.square(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'Tanh': {\n      return [tfc.tanh(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'Tan':\n      return [tfc.tan(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    case 'Relu6':\n    case 'ClipByValue':\n      return [tfc.clipByValue(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('clipValueMin', node, tensorMap, context) as number,\n          getParamValue('clipValueMax', node, tensorMap, context) as number)];\n    case 'Rsqrt':\n      return [tfc.rsqrt(getTensor(node.inputNames[0], tensorMap, context))];\n    case 'Prod':\n      return [tfc.prod(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('axes', node, tensorMap, context) as number[])];\n    case 'LeakyRelu':\n      return [tfc.leakyRelu(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('alpha', node, tensorMap, context) as number)];\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\n\nexport const CATEGORY = 'basic_math';\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {concat, DataType, slice, stack, Tensor, tensor, tidy, unstack, util} from '@tensorflow/tfjs-core';\n\nexport interface TensorWithState {\n  tensor?: Tensor;\n  written?: boolean;\n  read?: boolean;\n  cleared?: boolean;\n}\n/**\n * The TensorArray object keeps an array of Tensors.  It\n * allows reading from the array and writing to the array.\n */\nexport class TensorArray {\n  private static nextId = 0;\n  private tensors: TensorWithState[] = [];\n  private closed_ = false;\n  readonly id: number;\n  constructor(\n      public readonly name: string, public readonly dtype: DataType,\n      private maxSize: number, private elementShape: number[],\n      public readonly identicalElementShapes: boolean,\n      public readonly dynamicSize: boolean,\n      public readonly clearAfterRead: boolean) {\n    this.id = TensorArray.nextId++;\n  }\n\n  get closed() {\n    return this.closed_;\n  }\n\n  /**\n   * Close the current TensorArray.\n   */\n  clearAndClose() {\n    this.tensors.forEach(tensor => tensor.tensor.dispose());\n    this.tensors = [];\n    this.closed_ = true;\n  }\n\n  size(): number {\n    return this.tensors.length;\n  }\n\n  /**\n   * Read the value at location index in the TensorArray.\n   * @param index Number the index to read from.\n   */\n  read(index: number): Tensor {\n    if (this.closed_) {\n      throw new Error(`TensorArray ${this.name} has already been closed.`);\n    }\n\n    if (index < 0 || index >= this.tensors.length) {\n      throw new Error(`Tried to read from index ${index}, but array size is: ${\n          this.tensors.length}`);\n    }\n\n    const tensorWithState = this.tensors[index];\n    if (tensorWithState.cleared) {\n      throw new Error(\n          `TensorArray ${this.name}: Could not read index ${\n              index} twice because it was cleared after a previous read ` +\n          `(perhaps try setting clear_after_read = false?).`);\n    }\n\n    if (this.clearAfterRead) {\n      tensorWithState.cleared = true;\n    }\n\n    tensorWithState.read = true;\n    return tensorWithState.tensor;\n  }\n\n  /**\n   * Helper method to read multiple tensors from the specified indices.\n   */\n  readMany(indices: number[]): Tensor[] {\n    return indices.map(index => this.read(index));\n  }\n\n  /**\n   * Write value into the index of the TensorArray.\n   * @param index number the index to write to.\n   * @param tensor\n   */\n  write(index: number, tensor: Tensor) {\n    if (this.closed_) {\n      throw new Error(`TensorArray ${this.name} has already been closed.`);\n    }\n\n    if (index < 0 || !this.dynamicSize && index >= this.maxSize) {\n      throw new Error(`Tried to write to index ${\n          index}, but array is not resizeable and size is: ${this.maxSize}`);\n    }\n\n    const t = this.tensors[index] || {};\n\n    if (tensor.dtype !== this.dtype) {\n      throw new Error(`TensorArray ${\n          this.name}: Could not write to TensorArray index ${index},\n          because the value dtype is ${\n          tensor.dtype}, but TensorArray dtype is ${this.dtype}.`);\n    }\n\n    // Set the shape for the first time write to unknow shape tensor array\n    if (this.size() === 0 &&\n        (this.elementShape == null || this.elementShape.length === 0)) {\n      this.elementShape = tensor.shape;\n    }\n\n    this.assertShapesMatchAllowUndefinedSize(\n        this.elementShape, tensor.shape,\n        `TensorArray ${this.name}: Could not write to TensorArray index ${\n            index}.`);\n\n    if (t && t.read) {\n      throw new Error(\n          `TensorArray ${this.name}: Could not write to TensorArray index ${\n              index}, because it has already been read.`);\n    }\n\n    if (t && t.written) {\n      throw new Error(\n          `TensorArray ${this.name}: Could not write to TensorArray index ${\n              index}, because it has already been written.`);\n    }\n\n    t.tensor = tensor;\n    t.written = true;\n\n    this.tensors[index] = t;\n  }\n\n  /**\n   * Helper method to write multiple tensors to the specified indices.\n   */\n  writeMany(indices: number[], tensors: Tensor[]) {\n    if (indices.length !== tensors.length) {\n      throw new Error(\n          `TensorArray ${this.name}: could not write multiple tensors,` +\n          `because the index size: ${\n              indices.length} is not the same as tensors size: ${\n              tensors.length}.`);\n    }\n\n    indices.forEach((i, index) => this.write(i, tensors[index]));\n  }\n\n  /**\n   * Return selected values in the TensorArray as a packed Tensor. All of\n   * selected values must have been written and their shapes must all match.\n   * @param [indices] number[] Optional. Taking values in [0, max_value). If the\n   *    TensorArray is not dynamic, max_value=size(). If not specified returns\n   *    all tensors in the original order.\n   * @param [dtype]\n   */\n  gather(indices?: number[], dtype?: DataType): Tensor {\n    if (!!dtype && dtype !== this.dtype) {\n      throw new Error(`TensorArray dtype is ${\n          this.dtype} but gather requested dtype ${dtype}`);\n    }\n\n    if (!indices) {\n      indices = [];\n      for (let i = 0; i < this.size(); i++) {\n        indices.push(i);\n      }\n    }\n\n    if (indices.length === 0) {\n      return tensor([], [0].concat(this.elementShape));\n    }\n\n    // Read all the PersistentTensors into a vector to keep track of\n    // their memory.\n    const tensors = this.readMany(indices);\n\n    this.assertShapesMatchAllowUndefinedSize(\n        this.elementShape, tensors[0].shape, 'TensorArray shape mismatch: ');\n\n    return stack(tensors, 0);\n  }\n\n  /**\n   * Return the values in the TensorArray as a concatenated Tensor.\n   */\n  concat(dtype?: DataType): Tensor {\n    if (!!dtype && dtype !== this.dtype) {\n      throw new Error(`TensorArray dtype is ${\n          this.dtype} but concat requested dtype ${dtype}`);\n    }\n\n    if (this.size() === 0) {\n      return tensor([], [0].concat(this.elementShape));\n    }\n\n    const indices = [];\n    for (let i = 0; i < this.size(); i++) {\n      indices.push(i);\n    }\n    // Collect all the tensors from the tensors array.\n    const tensors = this.readMany(indices);\n\n    this.assertShapesMatchAllowUndefinedSize(\n        this.elementShape, tensors[0].shape,\n        `TensorArray shape mismatch: tensor array shape (${\n            this.elementShape}) vs first tensor shape (${tensors[0].shape})`);\n\n    return concat(tensors, 0);\n  }\n\n  /**\n   * Scatter the values of a Tensor in specific indices of a TensorArray.\n   * @param indices nummber[] values in [0, max_value). If the\n   *    TensorArray is not dynamic, max_value=size().\n   * @param tensor Tensor input tensor.\n   */\n  scatter(indices: number[], tensor: Tensor) {\n    if (tensor.dtype !== this.dtype) {\n      throw new Error(`TensorArray dtype is ${\n          this.dtype} but tensor has dtype ${tensor.dtype}`);\n    }\n\n    if (indices.length !== tensor.shape[0]) {\n      throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${\n          indices.length} vs. ${tensor.shape[0]}`);\n    }\n\n    const maxIndex = Math.max(...indices);\n\n    if (!this.dynamicSize && maxIndex >= this.maxSize) {\n      throw new Error(\n          `Max index must be < array size (${maxIndex}  vs. ${this.maxSize})`);\n    }\n\n    this.writeMany(indices, unstack(tensor, 0));\n  }\n\n  /**\n   * Split the values of a Tensor into the TensorArray.\n   * @param length number[] with the lengths to use when splitting value along\n   *    its first dimension.\n   * @param tensor Tensor, the tensor to split.\n   */\n  split(length: number[], tensor: Tensor) {\n    if (tensor.dtype !== this.dtype) {\n      throw new Error(`TensorArray dtype is ${\n          this.dtype} but tensor has dtype ${tensor.dtype}`);\n    }\n    let totalLength = 0;\n    const cumulativeLengths = length.map(len => {\n      totalLength += len;\n      return totalLength;\n    });\n\n    if (totalLength !== tensor.shape[0]) {\n      throw new Error(`Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        ${totalLength}, and tensor's shape is: ${tensor.shape}`);\n    }\n\n    if (!this.dynamicSize && length.length !== this.maxSize) {\n      throw new Error(\n          `TensorArray's size is not equal to the size of lengths (${\n              this.maxSize} vs. ${length.length}), ` +\n          'and the TensorArray is not marked as dynamically resizeable');\n    }\n\n    const elementPerRow = totalLength === 0 ? 0 : tensor.size / totalLength;\n    const tensors: Tensor[] = [];\n    tidy(() => {\n      tensor = tensor.reshape([1, totalLength, elementPerRow]);\n      for (let i = 0; i < length.length; ++i) {\n        const previousLength = (i === 0) ? 0 : cumulativeLengths[i - 1];\n        const indices = [0, previousLength, 0];\n        const sizes = [1, length[i], elementPerRow];\n        tensors[i] = slice(tensor, indices, sizes).reshape(this.elementShape);\n      }\n      return tensors;\n    });\n    const indices = [];\n    for (let i = 0; i < length.length; i++) {\n      indices[i] = i;\n    }\n    this.writeMany(indices, tensors);\n  }\n\n  /**\n   * This differs from util.assertShapesMatch in that it allows values of\n   * negative one, an undefined size of a dimensinon, in a shape to match\n   * anything.\n   */\n  private assertShapesMatchAllowUndefinedSize(\n      shapeA: number[], shapeB: number[], errorMessagePrefix = ''): void {\n    util.assert(\n        this.shapesEqualAllowUndefinedSize(shapeA, shapeB),\n        () =>\n            errorMessagePrefix + ` Shapes ${shapeA} and ${shapeB} must match`);\n  }\n\n  private shapesEqualAllowUndefinedSize(n1: number[], n2: number[]) {\n    if (n1.length !== n2.length) {\n      return false;\n    }\n    for (let i = 0; i < n1.length; i++) {\n      if (n1[i] !== -1 && n2[i] !== -1 && n1[i] !== n2[i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\nimport {scalar} from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {TensorArray} from '../../executor/tensor_array';\nimport {Node} from '../types';\n\nimport {getParamValue, getTensor} from './utils';\n\nexport async function executeOp(\n    node: Node, tensorMap: NamedTensorsMap,\n    context: ExecutionContext): Promise<tfc.Tensor[]> {\n  switch (node.op) {\n    case 'LoopCond':\n      return [\n        (getParamValue('pred', node, tensorMap, context) as tfc.Tensor).clone()\n      ];\n    case 'Switch': {\n      const pred =\n          getParamValue('pred', node, tensorMap, context) as tfc.Tensor;\n      const data =\n          getParamValue('data', node, tensorMap, context) as tfc.Tensor;\n      // Outputs nodes :0 => false, :1 => true\n      return (await pred.data())[0] ? [undefined, data.clone()] :\n                                      [data.clone(), undefined];\n    }\n    case 'Merge':\n      const inputName = node.inputNames.find(\n          name => getTensor(name, tensorMap, context) !== undefined);\n      return inputName ? [getTensor(inputName, tensorMap, context).clone()] :\n                         undefined;\n\n    case 'Enter':\n      const frameId =\n          getParamValue('frameName', node, tensorMap, context) as string;\n      const data =\n          getParamValue('tensor', node, tensorMap, context) as tfc.Tensor;\n      context.enterFrame(frameId);\n      return [data.clone()];\n\n    case 'Exit':\n      const tensor =\n          getParamValue('tensor', node, tensorMap, context) as tfc.Tensor;\n      context.exitFrame();\n      return [tensor.clone()];\n\n    case 'NextIteration':\n      const input =\n          getParamValue('tensor', node, tensorMap, context) as tfc.Tensor;\n      context.nextIteration();\n      return [input.clone()];\n\n    case 'TensorArrayV3':\n      const size = getParamValue('size', node, tensorMap, context) as number;\n      const dtype =\n          getParamValue('dtype', node, tensorMap, context) as tfc.DataType;\n      const elementShape =\n          getParamValue('elementShape', node, tensorMap, context) as number[];\n      const dynamicSize =\n          getParamValue('dynamicSize', node, tensorMap, context) as boolean;\n      const clearAfterRead =\n          getParamValue('clearAfterRead', node, tensorMap, context) as boolean;\n      const identicalElementShapes =\n          getParamValue('identicalElementShapes', node, tensorMap, context) as\n          boolean;\n      const name = getParamValue('name', node, tensorMap, context) as string;\n      const tensorArray = new TensorArray(\n          name, dtype, size, elementShape, identicalElementShapes, dynamicSize,\n          clearAfterRead);\n      context.addTensorArray(tensorArray);\n      return [scalar(tensorArray.id), scalar(1.0)];\n\n    case 'TensorArrayWriteV3':\n      const id =\n          getParamValue('tensorArrayId', node, tensorMap, context) as number;\n      const index = getParamValue('index', node, tensorMap, context) as number;\n      const writeTensor =\n          getParamValue('tensor', node, tensorMap, context) as tfc.Tensor;\n      const writeTensorArray = context.getTensorArray(id);\n      writeTensorArray.write(index, writeTensor);\n      return [scalar(1.0)];\n\n    case 'TensorArrayReadV3':\n      const readId =\n          getParamValue('tensorArrayId', node, tensorMap, context) as number;\n      const readIndex =\n          getParamValue('index', node, tensorMap, context) as number;\n      const readTensorArray = context.getTensorArray(readId);\n      return [readTensorArray.read(readIndex)];\n\n    case 'TensorArrayGatherV3':\n      const gatherId =\n          getParamValue('tensorArrayId', node, tensorMap, context) as number;\n      const gatherIndices =\n          getParamValue('indices', node, tensorMap, context) as number[];\n      const gatherDtype =\n          getParamValue('dtype', node, tensorMap, context) as tfc.DataType;\n      const gatherTensorArray = context.getTensorArray(gatherId);\n      return [gatherTensorArray.gather(gatherIndices, gatherDtype)];\n\n    case 'TensorArrayScatterV3':\n      const scatterId =\n          getParamValue('tensorArrayId', node, tensorMap, context) as number;\n      const scatterIndices =\n          getParamValue('indices', node, tensorMap, context) as number[];\n      const scatterTensor =\n          getParamValue('tensor', node, tensorMap, context) as tfc.Tensor;\n      const scatterTensorArray = context.getTensorArray(scatterId);\n      scatterTensorArray.scatter(scatterIndices, scatterTensor);\n      return [scalar(1.0)];\n\n    case 'TensorArrayConcatV3':\n      const concatId =\n          getParamValue('tensorArrayId', node, tensorMap, context) as number;\n      const concatTensorArray = context.getTensorArray(concatId);\n      const concatDtype =\n          getParamValue('dtype', node, tensorMap, context) as tfc.DataType;\n      return [concatTensorArray.concat(concatDtype)];\n\n    case 'TensorArraySplitV3':\n      const splitId =\n          getParamValue('tensorArrayId', node, tensorMap, context) as number;\n      const splitTensor =\n          getParamValue('tensor', node, tensorMap, context) as tfc.Tensor;\n      const lengths =\n          getParamValue('lengths', node, tensorMap, context) as number[];\n      const splitTensorArray = context.getTensorArray(splitId);\n      splitTensorArray.split(lengths, splitTensor);\n      return [scalar(1.0)];\n\n    case 'TensorArraySizeV3':\n      const sizeId =\n          getParamValue('tensorArrayId', node, tensorMap, context) as number;\n      const sizeTensorArray = context.getTensorArray(sizeId);\n      return [scalar(sizeTensorArray.size(), 'int32')];\n\n    case 'TensorArrayCloseV3':\n      const closeId =\n          getParamValue('tensorArrayId', node, tensorMap, context) as number;\n      const closeTensorArray = context.getTensorArray(closeId);\n      closeTensorArray.clearAndClose();\n      return [];\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n}\n\nexport const CATEGORY = 'control';\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getParamValue} from './utils';\n\nexport let executeOp: InternalOpExecutor = (node: Node,\n                                            tensorMap: NamedTensorsMap,\n                                            context: ExecutionContext):\n                                               tfc.Tensor[] => {\n  switch (node.op) {\n    case 'Conv1D': {\n      const stride =\n          getParamValue('stride', node, tensorMap, context) as number;\n      const pad = getParamValue('pad', node, tensorMap, context);\n      const dataFormat =\n          (getParamValue('dataFormat', node, tensorMap, context) as string)\n              .toUpperCase();\n      const dilation =\n          getParamValue('dilation', node, tensorMap, context) as number;\n      return [tfc.conv1d(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor3D,\n          getParamValue('filter', node, tensorMap, context) as tfc.Tensor3D,\n          stride, pad as 'valid' | 'same', dataFormat as 'NWC' | 'NCW',\n          dilation)];\n    }\n    case 'Conv2D': {\n      const stride =\n          getParamValue('strides', node, tensorMap, context) as number[];\n      const pad = getParamValue('pad', node, tensorMap, context);\n      const dataFormat =\n          (getParamValue('dataFormat', node, tensorMap, context) as string)\n              .toUpperCase();\n      const dilations =\n          getParamValue('dilations', node, tensorMap, context) as number[];\n      return [tfc.conv2d(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor3D |\n              tfc.Tensor4D,\n          getParamValue('filter', node, tensorMap, context) as tfc.Tensor4D,\n          [stride[1], stride[2]], pad as 'valid' | 'same',\n          dataFormat as 'NHWC' | 'NCHW', [dilations[1], dilations[2]])];\n    }\n    case '_FusedConv2D': {\n      const [extraOp, activationFunc] =\n          (getParamValue('fusedOps', node, tensorMap, context) as string[]);\n\n      const isBiasAdd = extraOp === 'biasadd';\n      const isPrelu = activationFunc === 'prelu';\n      const isBatchNorm = extraOp === 'fusedbatchnorm';\n\n      const numArgs =\n          (getParamValue('numArgs', node, tensorMap, context) as number);\n      if (isBiasAdd) {\n        if (isPrelu && numArgs !== 2) {\n          throw new Error(\n              'Fused Conv2d with BiasAdd and Prelu must have two ' +\n              'extra arguments: bias and alpha.');\n        }\n        if (!isPrelu && numArgs !== 1) {\n          throw new Error(\n              'Fused Conv2d with BiasAdd must have one extra argument: bias.');\n        }\n      }\n      if (isBatchNorm) {\n        throw new Error('Fused Conv2d with FusedBatchNorm is not supported.');\n      }\n      const stride =\n          getParamValue('strides', node, tensorMap, context) as number[];\n      const pad = getParamValue('pad', node, tensorMap, context);\n      const dataFormat =\n          (getParamValue('dataFormat', node, tensorMap, context) as string)\n              .toUpperCase();\n      const dilations =\n          getParamValue('dilations', node, tensorMap, context) as number[];\n      const [biasArg, preluArg] =\n          getParamValue('args', node, tensorMap, context) as tfc.Tensor[];\n      return [tfc.fused.conv2d({\n        x: getParamValue('x', node, tensorMap, context) as tfc.Tensor3D |\n            tfc.Tensor4D,\n        filter: getParamValue('filter', node, tensorMap, context) as\n            tfc.Tensor4D,\n        strides: [stride[1], stride[2]],\n        pad: pad as 'valid' | 'same',\n        dataFormat: dataFormat as 'NHWC' | 'NCHW',\n        dilations: [dilations[1], dilations[2]],\n        bias: biasArg,\n        activation: activationFunc as tfc.fused.Activation,\n        preluActivationWeights: preluArg\n      })];\n    }\n    case 'Conv2DBackpropInput':\n    case 'Conv2dTranspose': {\n      const shape = getParamValue(\n                        'outputShape', node, tensorMap,\n                        context) as [number, number, number] |\n          [number, number, number, number];\n      const stride =\n          getParamValue('strides', node, tensorMap, context) as number[];\n      const pad = getParamValue('pad', node, tensorMap, context);\n      return [tfc.conv2dTranspose(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor3D |\n              tfc.Tensor4D,\n          getParamValue('filter', node, tensorMap, context) as tfc.Tensor4D,\n          shape, [stride[1], stride[2]], pad as 'valid' | 'same')];\n    }\n    case 'DepthwiseConv2dNative':\n    case 'DepthwiseConv2d': {\n      const stride =\n          getParamValue('strides', node, tensorMap, context) as number[];\n      const pad = getParamValue('pad', node, tensorMap, context);\n      const dilations =\n          getParamValue('dilations', node, tensorMap, context) as number[];\n      const dataFormat =\n          (getParamValue('dataFormat', node, tensorMap, context) as string)\n              .toUpperCase();\n\n      return [tfc.depthwiseConv2d(\n          getParamValue('input', node, tensorMap, context) as tfc.Tensor3D |\n              tfc.Tensor4D,\n          getParamValue('filter', node, tensorMap, context) as tfc.Tensor4D,\n          [stride[1], stride[2]], pad as 'valid' | 'same',\n          dataFormat as 'NHWC' | 'NCHW', [dilations[1], dilations[2]])];\n    }\n    case 'Conv3D': {\n      const stride =\n          getParamValue('strides', node, tensorMap, context) as number[];\n      const pad = getParamValue('pad', node, tensorMap, context);\n      const dataFormat =\n          (getParamValue('dataFormat', node, tensorMap, context) as string)\n              .toUpperCase();\n      const dilations =\n          getParamValue('dilations', node, tensorMap, context) as number[];\n      return [tfc.conv3d(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor4D |\n              tfc.Tensor<tfc.Rank.R5>,\n          getParamValue('filter', node, tensorMap, context) as\n              tfc.Tensor<tfc.Rank.R5>,\n          [stride[1], stride[2], stride[3]], pad as 'valid' | 'same',\n          dataFormat as 'NDHWC' | 'NCDHW',\n          [dilations[1], dilations[2], dilations[3]])];\n    }\n\n    case 'AvgPool': {\n      const stride =\n          getParamValue('strides', node, tensorMap, context) as number[];\n      const pad = getParamValue('pad', node, tensorMap, context);\n      const kernelSize =\n          getParamValue('kernelSize', node, tensorMap, context) as number[];\n\n      return [tfc.avgPool(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor3D |\n              tfc.Tensor4D,\n          [kernelSize[1], kernelSize[2]], [stride[1], stride[2]],\n          pad as 'valid' | 'same')];\n    }\n\n    case 'MaxPool': {\n      const stride =\n          getParamValue('strides', node, tensorMap, context) as number[];\n      const pad = getParamValue('pad', node, tensorMap, context);\n      const kernelSize =\n          getParamValue('kernelSize', node, tensorMap, context) as number[];\n\n      return [tfc.maxPool(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor3D |\n              tfc.Tensor4D,\n          [kernelSize[1], kernelSize[2]], [stride[1], stride[2]],\n          pad as 'valid' | 'same')];\n    }\n\n    case 'AvgPool3D': {\n      const stride =\n          getParamValue('strides', node, tensorMap, context) as number[];\n      const pad = getParamValue('pad', node, tensorMap, context);\n      const kernelSize =\n          getParamValue('kernelSize', node, tensorMap, context) as number[];\n\n      return [tfc.avgPool3d(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor5D,\n          [kernelSize[1], kernelSize[2], kernelSize[3]],\n          [stride[1], stride[2], stride[3]], pad as 'valid' | 'same')];\n    }\n\n    case 'MaxPool3D': {\n      const stride =\n          getParamValue('strides', node, tensorMap, context) as number[];\n      const pad = getParamValue('pad', node, tensorMap, context);\n      const kernelSize =\n          getParamValue('kernelSize', node, tensorMap, context) as number[];\n\n      return [tfc.maxPool3d(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor5D,\n          [kernelSize[1], kernelSize[2], kernelSize[3]],\n          [stride[1], stride[2], stride[3]], pad as 'valid' | 'same')];\n    }\n\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\n\nexport const CATEGORY = 'convolution';\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getParamValue} from './utils';\n\nexport let executeOp: InternalOpExecutor = (node: Node,\n                                            tensorMap: NamedTensorsMap,\n                                            context: ExecutionContext):\n                                               tfc.Tensor[] => {\n  switch (node.op) {\n    case 'Fill': {\n      const shape =\n          getParamValue('shape', node, tensorMap, context) as number[];\n      const dtype =\n          getParamValue('dtype', node, tensorMap, context) as tfc.DataType;\n      const value = getParamValue('value', node, tensorMap, context) as number;\n      return [tfc.fill(shape, value, dtype)];\n    }\n    case 'LinSpace': {\n      const start = getParamValue('start', node, tensorMap, context) as number;\n      const stop = getParamValue('stop', node, tensorMap, context) as number;\n      const num = getParamValue('num', node, tensorMap, context) as number;\n      return [tfc.linspace(start, stop, num)];\n    }\n    case 'Multinomial': {\n      const logits =\n          getParamValue('logits', node, tensorMap, context) as tfc.Tensor1D;\n      const numSamples =\n          getParamValue('numSamples', node, tensorMap, context) as number;\n      const seed = getParamValue('seed', node, tensorMap, context) as number;\n      return [tfc.multinomial(logits, numSamples, seed)];\n    }\n    case 'OneHot': {\n      const indices =\n          getParamValue('indices', node, tensorMap, context) as tfc.Tensor1D;\n      const depth = getParamValue('depth', node, tensorMap, context) as number;\n      const onValue =\n          getParamValue('onValue', node, tensorMap, context) as number;\n      const offValue =\n          getParamValue('offValue', node, tensorMap, context) as number;\n      return [tfc.oneHot(indices, depth, onValue, offValue)];\n    }\n    case 'Ones': {\n      return [tfc.ones(\n          getParamValue('shape', node, tensorMap, context) as number[],\n          getParamValue('dtype', node, tensorMap, context) as tfc.DataType)];\n    }\n    case 'OnesLike': {\n      return [tfc.onesLike(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'RandomUniform': {\n      return [tfc.randomUniform(\n          // tslint:disable-next-line:no-any\n          getParamValue('shape', node, tensorMap, context) as any,\n          getParamValue('minval', node, tensorMap, context) as number,\n          getParamValue('maxval', node, tensorMap, context) as number,\n          getParamValue('dtype', node, tensorMap, context) as tfc.DataType)];\n    }\n    case 'Range': {\n      const start = getParamValue('start', node, tensorMap, context) as number;\n      const stop = getParamValue('stop', node, tensorMap, context) as number;\n      const step = getParamValue('step', node, tensorMap, context) as number;\n      return [tfc.range(\n          start, stop, step,\n          getParamValue('dtype', node, tensorMap, context) as 'float32' |\n              'int32')];\n    }\n    case 'TruncatedNormal': {\n      const shape =\n          getParamValue('shape', node, tensorMap, context) as number[];\n      const mean = getParamValue('mean', node, tensorMap, context) as number;\n      const stdDev =\n          getParamValue('stdDev', node, tensorMap, context) as number;\n      const seed = getParamValue('seed', node, tensorMap, context) as number;\n      return [tfc.truncatedNormal(\n          shape, mean, stdDev,\n          getParamValue('dtype', node, tensorMap, context) as 'float32' |\n              'int32',\n          seed)];\n    }\n    case 'Zeros': {\n      return [tfc.zeros(\n          getParamValue('shape', node, tensorMap, context) as number[],\n          getParamValue('dtype', node, tensorMap, context) as tfc.DataType)];\n    }\n    case 'ZerosLike': {\n      return [tfc.zerosLike(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    }\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\n\nexport const CATEGORY = 'creation';\n","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {Node} from '../types';\nimport {getParamValue} from './utils';\n\nexport async function executeOp(\n    node: Node, tensorMap: NamedTensorsMap,\n    context: ExecutionContext): Promise<tfc.Tensor[]> {\n  switch (node.op) {\n    case 'NonMaxSuppressionV3':\n    case 'NonMaxSuppressionV2': {\n      const boxes =\n          getParamValue('boxes', node, tensorMap, context) as tfc.Tensor;\n      const scores =\n          getParamValue('scores', node, tensorMap, context) as tfc.Tensor;\n      const maxOutputSize =\n          getParamValue('maxOutputSize', node, tensorMap, context) as number;\n      const iouThreshold =\n          getParamValue('iouThreshold', node, tensorMap, context) as number;\n      const scoreThreshold =\n          getParamValue('scoreThreshold', node, tensorMap, context) as number;\n      return [await tfc.image.nonMaxSuppressionAsync(\n          boxes as tfc.Tensor2D, scores as tfc.Tensor1D, maxOutputSize,\n          iouThreshold, scoreThreshold)];\n    }\n    case 'Where': {\n      return [await tfc.whereAsync(\n          (getParamValue('condition', node, tensorMap, context) as tfc.Tensor)\n              .asType('bool'))];\n    }\n    case 'ListDiff': {\n      return tfc.setdiff1dAsync(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('y', node, tensorMap, context) as tfc.Tensor);\n    }\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n}\n\nexport const CATEGORY = 'dynamic';\n","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getParamValue} from './utils';\n\nexport let executeOp: InternalOpExecutor =\n    (node: Node, tensorMap: NamedTensorsMap,\n     context: ExecutionContext): tfc.Tensor[] => {\n      switch (node.op) {\n        case 'TopKV2': {\n          const x = getParamValue('x', node, tensorMap, context) as tfc.Tensor;\n          const k = getParamValue('k', node, tensorMap, context) as number;\n          const sorted =\n              getParamValue('sorted', node, tensorMap, context) as boolean;\n          const result = tfc.topk(x, k, sorted);\n          return [result.values, result.indices];\n        }\n        default:\n          throw TypeError(`Node type ${node.op} is not implemented`);\n      }\n    };\n\nexport const CATEGORY = 'evaluation';\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getParamValue, getTensor} from './utils';\n\nexport let executeOp: InternalOpExecutor = (node: Node,\n                                            tensorMap: NamedTensorsMap,\n                                            context: ExecutionContext):\n                                               tfc.Tensor[] => {\n  switch (node.op) {\n    case 'Const': {\n      return tensorMap[node.name];\n    }\n    case 'PlaceholderWithDefault':\n      const def =\n          getParamValue('default', node, tensorMap, context) as tfc.Tensor;\n      return [getTensor(node.name, tensorMap, context) || def];\n    case 'Placeholder':\n      return [getTensor(node.name, tensorMap, context)];\n    case 'Identity':\n    case 'StopGradient':\n    case 'FakeQuantWithMinMaxVars':  // This op is currently ignored.\n      return [\n        (getParamValue('x', node, tensorMap, context) as tfc.Tensor).clone()\n      ];\n    case 'IdentityN':\n      return (getParamValue('x', node, tensorMap, context) as tfc.Tensor[])\n          .map((t: tfc.Tensor) => t.clone());\n    case 'Snapshot':\n      const snapshot =\n          (getParamValue('x', node, tensorMap, context) as tfc.Tensor);\n      return [snapshot.clone()];\n    case 'Shape':\n      return [tfc.tensor1d(\n          (getParamValue('x', node, tensorMap, context) as tfc.Tensor).shape,\n          'int32')];\n    case 'ShapeN':\n      return (getParamValue('x', node, tensorMap, context) as tfc.Tensor[])\n          .map((t: tfc.Tensor) => tfc.tensor1d(t.shape));\n    case 'Size':\n      return [tfc.scalar(\n          (getParamValue('x', node, tensorMap, context) as tfc.Tensor).size,\n          'int32')];\n    case 'Rank':\n      return [tfc.scalar(\n          (getParamValue('x', node, tensorMap, context) as tfc.Tensor).rank,\n          'int32')];\n    case 'NoOp':\n      return [];\n    case 'Print':\n      const input = getParamValue('x', node, tensorMap, context) as tfc.Tensor;\n      const data =\n          getParamValue('data', node, tensorMap, context) as tfc.Tensor[];\n      const message =\n          getParamValue('message', node, tensorMap, context) as string;\n      const summarize =\n          getParamValue('summarize', node, tensorMap, context) as number;\n      console.warn(\n          'The graph has a tf.print() operation,' +\n          'usually used for debugging, which slows down performance.');\n      console.log(message);\n      for (let i = 0; i < data.length; i++) {\n        console.log(\n            Array.prototype.slice.call(data[i].dataSync()).slice(0, summarize));\n      }\n      return [input];\n\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\n\nexport const CATEGORY = 'graph';\n","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getParamValue} from './utils';\n\nexport let executeOp: InternalOpExecutor = (node: Node,\n                                            tensorMap: NamedTensorsMap,\n                                            context: ExecutionContext):\n                                               tfc.Tensor[] => {\n  switch (node.op) {\n    case 'ResizeBilinear': {\n      const images =\n          getParamValue('images', node, tensorMap, context) as tfc.Tensor;\n      const size = getParamValue('size', node, tensorMap, context) as number[];\n      const alignCorners =\n          getParamValue('alignCorners', node, tensorMap, context) as boolean;\n      return [tfc.image.resizeBilinear(\n          images as tfc.Tensor3D | tfc.Tensor4D, [size[0], size[1]],\n          alignCorners)];\n    }\n    case 'ResizeNearestNeighbor': {\n      const images =\n          getParamValue('images', node, tensorMap, context) as tfc.Tensor;\n      const size = getParamValue('size', node, tensorMap, context) as number[];\n      const alignCorners =\n          getParamValue('alignCorners', node, tensorMap, context) as boolean;\n      return [tfc.image.resizeNearestNeighbor(\n          images as tfc.Tensor3D | tfc.Tensor4D, [size[0], size[1]],\n          alignCorners)];\n    }\n    case 'CropAndResize': {\n      const image =\n          getParamValue('image', node, tensorMap, context) as tfc.Tensor;\n      const boxes =\n          getParamValue('boxes', node, tensorMap, context) as tfc.Tensor;\n      const boxInd =\n          getParamValue('boxInd', node, tensorMap, context) as tfc.Tensor;\n      const cropSize =\n          getParamValue('cropSize', node, tensorMap, context) as number[];\n      const method =\n          getParamValue('method', node, tensorMap, context) as string;\n      const extrapolationValue =\n          getParamValue('extrapolationValue', node, tensorMap, context) as\n          number;\n      return [tfc.image.cropAndResize(\n          image as tfc.Tensor4D, boxes as tfc.Tensor2D, boxInd as tfc.Tensor1D,\n          cropSize as [number, number], method as 'bilinear' | 'nearest',\n          extrapolationValue)];\n    }\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\n\nexport const CATEGORY = 'image';\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getParamValue} from './utils';\n\nexport let executeOp: InternalOpExecutor = (node: Node,\n                                            tensorMap: NamedTensorsMap,\n                                            context: ExecutionContext):\n                                               tfc.Tensor[] => {\n  switch (node.op) {\n    case 'Equal': {\n      return [tfc.equal(\n          getParamValue('a', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('b', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'NotEqual': {\n      return [tfc.notEqual(\n          getParamValue('a', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('b', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'Greater': {\n      return [tfc.greater(\n          getParamValue('a', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('b', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'GreaterEqual': {\n      return [tfc.greaterEqual(\n          getParamValue('a', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('b', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'Less': {\n      return [tfc.less(\n          getParamValue('a', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('b', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'LessEqual': {\n      return [tfc.lessEqual(\n          getParamValue('a', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('b', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'LogicalAnd': {\n      return [tfc.logicalAnd(\n          getParamValue('a', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('b', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'LogicalNot': {\n      return [tfc.logicalNot(\n          getParamValue('a', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'LogicalOr': {\n      return [tfc.logicalOr(\n          getParamValue('a', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('b', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'Select': {\n      return [tfc.where(\n          getParamValue('condition', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('a', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('b', node, tensorMap, context) as tfc.Tensor)];\n    }\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\n\nexport const CATEGORY = 'logical';\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getParamValue} from './utils';\n\nexport let executeOp: InternalOpExecutor = (node: Node,\n                                            tensorMap: NamedTensorsMap,\n                                            context: ExecutionContext):\n                                               tfc.Tensor[] => {\n  switch (node.op) {\n    case 'BatchMatMul':\n    case 'BatchMatMulV2':\n    case 'MatMul':\n      return [tfc.matMul(\n          getParamValue('a', node, tensorMap, context) as tfc.Tensor2D,\n          getParamValue('b', node, tensorMap, context) as tfc.Tensor2D,\n          getParamValue('transposeA', node, tensorMap, context) as boolean,\n          getParamValue('transposeB', node, tensorMap, context) as boolean)];\n    case 'Transpose':\n      return [tfc.transpose(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('perm', node, tensorMap, context) as number[])];\n\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\n\nexport const CATEGORY = 'matrices';\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getParamValue} from './utils';\n\nexport let executeOp: InternalOpExecutor = (node: Node,\n                                            tensorMap: NamedTensorsMap,\n                                            context: ExecutionContext):\n                                               tfc.Tensor[] => {\n  switch (node.op) {\n    case 'FusedBatchNorm':\n    case 'FusedBatchNormV2': {\n      return [tfc.batchNorm(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('mean', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('variance', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('offset', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('scale', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('epsilon', node, tensorMap, context) as number)];\n    }\n    case 'FusedBatchNormV3': {\n      return [tfc.batchNorm(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('mean', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('variance', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('offset', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('scale', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('epsilon', node, tensorMap, context) as number)];\n    }\n    case 'LRN': {\n      return [tfc.localResponseNormalization(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor3D |\n              tfc.Tensor4D,\n          getParamValue('radius', node, tensorMap, context) as number,\n          getParamValue('bias', node, tensorMap, context) as number,\n          getParamValue('alpha', node, tensorMap, context) as number,\n          getParamValue('beta', node, tensorMap, context) as number)];\n    }\n    case 'Softmax': {\n      return [tfc.softmax(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'LogSoftmax': {\n      return [tfc.logSoftmax(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'SparseToDense': {\n      return [tfc.sparseToDense(\n          getParamValue('sparseIndices', node, tensorMap, context) as\n              tfc.Tensor,\n          getParamValue('outputShape', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('sparseValues', node, tensorMap, context) as number[],\n          getParamValue('defaultValue', node, tensorMap, context) as\n              tfc.Scalar)];\n    }\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\n\nexport const CATEGORY = 'normalization';\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getParamValue} from './utils';\n\nexport let executeOp: InternalOpExecutor = (node: Node,\n                                            tensorMap: NamedTensorsMap,\n                                            context: ExecutionContext):\n                                               tfc.Tensor[] => {\n  switch (node.op) {\n    case 'Max': {\n      const axis = getParamValue('axis', node, tensorMap, context) as number[];\n      const keepDims =\n          getParamValue('keepDims', node, tensorMap, context) as boolean;\n      return [tfc.max(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor, axis,\n          keepDims)];\n    }\n    case 'Mean': {\n      const axis = getParamValue('axis', node, tensorMap, context) as number[];\n      const keepDims =\n          getParamValue('keepDims', node, tensorMap, context) as boolean;\n      return [tfc.mean(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor, axis,\n          keepDims)];\n    }\n    case 'Min': {\n      const axis = getParamValue('axis', node, tensorMap, context) as number[];\n      const keepDims =\n          getParamValue('keepDims', node, tensorMap, context) as boolean;\n      return [tfc.min(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor, axis,\n          keepDims)];\n    }\n    case 'Sum': {\n      const axis = getParamValue('axis', node, tensorMap, context) as number[];\n      const keepDims =\n          getParamValue('keepDims', node, tensorMap, context) as boolean;\n      return [tfc.sum(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor, axis,\n          keepDims)];\n    }\n    case 'All': {\n      const axis = getParamValue('axis', node, tensorMap, context) as number[];\n      const keepDims =\n          getParamValue('keepDims', node, tensorMap, context) as boolean;\n      return [tfc.all(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor, axis,\n          keepDims)];\n    }\n    case 'Any': {\n      const axis = getParamValue('axis', node, tensorMap, context) as number[];\n      const keepDims =\n          getParamValue('keepDims', node, tensorMap, context) as boolean;\n      return [tfc.any(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor, axis,\n          keepDims)];\n    }\n    case 'ArgMax': {\n      const axis = getParamValue('axis', node, tensorMap, context) as number;\n      return [tfc.argMax(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor, axis)];\n    }\n    case 'ArgMin': {\n      const axis = getParamValue('axis', node, tensorMap, context) as number;\n      return [tfc.argMin(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor, axis)];\n    }\n    case 'Prod': {\n      const axis = getParamValue('axis', node, tensorMap, context) as number[];\n      const keepDims =\n          getParamValue('keepDims', node, tensorMap, context) as boolean;\n      return [tfc.prod(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor, axis,\n          keepDims)];\n    }\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\n\nexport const CATEGORY = 'reduction';\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getParamValue} from './utils';\n\nexport let executeOp: InternalOpExecutor = (node: Node,\n                                            tensorMap: NamedTensorsMap,\n                                            context: ExecutionContext):\n                                               tfc.Tensor[] => {\n  switch (node.op) {\n    case 'ConcatV2':\n    case 'Concat': {\n      const axis = getParamValue('axis', node, tensorMap, context) as number;\n      const inputs =\n          getParamValue('tensors', node, tensorMap, context) as tfc.Tensor[];\n      return [tfc.concat(inputs, axis)];\n    }\n    case 'GatherV2':\n    case 'Gather': {\n      const axis = getParamValue('axis', node, tensorMap, context) as number;\n      const input = getParamValue('x', node, tensorMap, context) as tfc.Tensor;\n      const indices =\n          getParamValue('indices', node, tensorMap, context) as tfc.Tensor1D;\n      return [tfc.gather(input, indices.asType('int32'), axis)];\n    }\n    case 'ReverseV2':\n    case 'Reverse': {\n      const axis = getParamValue('axis', node, tensorMap, context) as number[];\n      const input = getParamValue('x', node, tensorMap, context) as tfc.Tensor;\n      return [tfc.reverse(input, axis)];\n    }\n    case 'Slice': {\n      // tslint:disable-next-line:no-any\n      const begin = getParamValue('begin', node, tensorMap, context) as any;\n      // tslint:disable-next-line:no-any\n      const size = getParamValue('size', node, tensorMap, context) as any;\n      return [tfc.slice(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor, begin,\n          size)];\n    }\n    case 'StridedSlice': {\n      const begin =\n          getParamValue('begin', node, tensorMap, context) as number[];\n      const end = getParamValue('end', node, tensorMap, context) as number[];\n      const strides =\n          getParamValue('strides', node, tensorMap, context) as number[];\n      const beginMask =\n          getParamValue('beginMask', node, tensorMap, context) as number;\n      const endMask =\n          getParamValue('endMask', node, tensorMap, context) as number;\n      const ellipsisMask =\n          getParamValue('ellipsisMask', node, tensorMap, context) as number;\n      const newAxisMask =\n          getParamValue('newAxisMask', node, tensorMap, context) as number;\n      const shrinkAxisMask =\n          getParamValue('shrinkAxisMask', node, tensorMap, context) as number;\n      const tensor = getParamValue('x', node, tensorMap, context) as tfc.Tensor;\n      if (begin.length === 1 && tensor.shape.length > 1) {\n        for (let i = 1; i < tensor.shape.length; i++) {\n          begin.push(0);\n          end.push(tensor.shape[i]);\n          strides.push(strides[0]);\n        }\n      }\n      return [tfc.stridedSlice(\n          tensor, begin, end, strides, beginMask, endMask, ellipsisMask,\n          newAxisMask, shrinkAxisMask)];\n    }\n    case 'Pack': {\n      return tfc.tidy(() => {\n        const axis = getParamValue('axis', node, tensorMap, context) as number;\n        const tensors =\n            getParamValue('tensors', node, tensorMap, context) as tfc.Tensor[];\n        // Reshape the tensors to the first tensor's shape if they don't match.\n        const shape = tensors[0].shape;\n        const squeezedShape = tensors[0].squeeze().shape;\n        const mapped = tensors.map(tensor => {\n          const sameShape = tfc.util.arraysEqual(tensor.shape, shape);\n          if (!sameShape &&\n              !tfc.util.arraysEqual(tensor.squeeze().shape, squeezedShape)) {\n            throw new Error('the input tensors shape does not match');\n          }\n          return sameShape ? tensor : tensor.reshape(shape);\n        });\n        return [tfc.stack(mapped, axis)];\n      });\n    }\n    case 'Unpack': {\n      return tfc.tidy(() => {\n        const axis = getParamValue('axis', node, tensorMap, context) as number;\n        const tensor =\n            getParamValue('tensor', node, tensorMap, context) as tfc.Tensor;\n        return tfc.unstack(tensor, axis);\n      });\n    }\n    case 'Tile': {\n      const reps = getParamValue('reps', node, tensorMap, context) as number[];\n      return [tfc.tile(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor, reps)];\n    }\n    case 'Split':\n    case 'SplitV': {\n      const axis = getParamValue('axis', node, tensorMap, context) as number;\n      const numOrSizeSplits =\n          getParamValue('numOrSizeSplits', node, tensorMap, context) as number |\n          number[];\n      return tfc.split(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor,\n          numOrSizeSplits, axis);\n    }\n    case 'ScatterNd': {\n      const indices =\n          getParamValue('indices', node, tensorMap, context) as tfc.Tensor;\n      const values =\n          getParamValue('values', node, tensorMap, context) as tfc.Tensor;\n      const shape =\n          getParamValue('shape', node, tensorMap, context) as number[];\n      return [tfc.scatterND(indices, values, shape)];\n    }\n    case 'GatherNd': {\n      const x = getParamValue('x', node, tensorMap, context) as tfc.Tensor;\n      const indices =\n          getParamValue('indices', node, tensorMap, context) as tfc.Tensor;\n      return [tfc.gatherND(x, indices)];\n    }\n    case 'SparseToDense': {\n      const indices =\n          getParamValue('sparseIndices', node, tensorMap, context) as\n          tfc.Tensor;\n      const shape =\n          getParamValue('outputShape', node, tensorMap, context) as number[];\n      const sparseValues =\n          getParamValue('sparseValues', node, tensorMap, context) as tfc.Tensor;\n      const defaultValue =\n          getParamValue('defaultValue', node, tensorMap, context) as tfc.Scalar;\n      return [tfc.sparseToDense(\n          indices, sparseValues, shape,\n          sparseValues.dtype === defaultValue.dtype ?\n              defaultValue :\n              defaultValue.asType(sparseValues.dtype))];\n    }\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\n\nexport const CATEGORY = 'slice_join';\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getParamValue} from './utils';\n\nexport let executeOp: InternalOpExecutor =\n    (node: Node, tensorMap: NamedTensorsMap,\n     context: ExecutionContext): tfc.Tensor[] => {\n      switch (node.op) {\n        case 'FFT': {\n          return [tfc.fft(\n              getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n        }\n        case 'IFFT': {\n          return [tfc.ifft(\n              getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n        }\n        case 'RFFT': {\n          return [tfc.rfft(\n              getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n        }\n        case 'IRFFT': {\n          return [tfc.irfft(\n              getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n        }\n        default:\n          throw TypeError(`Node type ${node.op} is not implemented`);\n      }\n    };\n\nexport const CATEGORY = 'spectral';\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getParamValue, split} from './utils';\n\nexport let executeOp: InternalOpExecutor = (node: Node,\n                                            tensorMap: NamedTensorsMap,\n                                            context: ExecutionContext):\n                                               tfc.Tensor[] => {\n  switch (node.op) {\n    case 'Cast': {\n      return [tfc.cast(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('dtype', node, tensorMap, context) as 'int32' |\n              'float32' | 'bool')];\n    }\n    case 'ExpandDims': {\n      const axis = getParamValue('axis', node, tensorMap, context) as number;\n      return [tfc.expandDims(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor, axis)];\n    }\n    case 'Squeeze': {\n      const axis = getParamValue('axis', node, tensorMap, context) as number[];\n      return [tfc.squeeze(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor, axis)];\n    }\n\n    case 'Reshape': {\n      return [tfc.reshape(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('shape', node, tensorMap, context) as number[])];\n    }\n    case 'PadV2':\n    case 'Pad': {\n      return [tfc.pad(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor,\n          split(\n              getParamValue('padding', node, tensorMap, context) as number[],\n              2) as Array<[number, number]>,\n          getParamValue('constantValue', node, tensorMap, context) as number)];\n    }\n    case 'SpaceToBatchND': {\n      const blockShape =\n          getParamValue('blockShape', node, tensorMap, context) as number[];\n      const paddings = split(\n          getParamValue('paddings', node, tensorMap, context) as number[], 2);\n      return [tfc.spaceToBatchND(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor,\n          blockShape, paddings)];\n    }\n    case 'BatchToSpaceND': {\n      const blockShape =\n          getParamValue('blockShape', node, tensorMap, context) as number[];\n      const crops = split(\n          getParamValue('crops', node, tensorMap, context) as number[], 2);\n      return [tfc.batchToSpaceND(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor,\n          blockShape, crops)];\n    }\n    case 'DepthToSpace': {\n      const blockSize =\n          getParamValue('blockSize', node, tensorMap, context) as number;\n      const dataFormat =\n          (getParamValue('dataFormat', node, tensorMap, context) as\n           string).toUpperCase() as 'NHWC' |\n          'NCHW';\n      return [tfc.depthToSpace(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor4D,\n          blockSize, dataFormat)];\n    }\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\n\nexport const CATEGORY = 'transformation';\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../data/types';\nimport {ExecutionContext} from '../executor/execution_context';\n\nimport {NodeValueImpl} from './custom_op/node_value_impl';\nimport {getRegisteredOp} from './custom_op/register';\nimport * as arithmetic from './executors/arithmetic_executor';\nimport * as basicMath from './executors/basic_math_executor';\nimport * as control from './executors/control_executor';\nimport * as convolution from './executors/convolution_executor';\nimport * as creation from './executors/creation_executor';\nimport * as dynamic from './executors/dynamic_executor';\nimport * as evaluation from './executors/evaluation_executor';\nimport * as graph from './executors/graph_executor';\nimport * as image from './executors/image_executor';\nimport * as logical from './executors/logical_executor';\nimport * as matrices from './executors/matrices_executor';\nimport * as normalization from './executors/normalization_executor';\nimport * as reduction from './executors/reduction_executor';\nimport * as sliceJoin from './executors/slice_join_executor';\nimport * as spectral from './executors/spectral_executor';\nimport * as transformation from './executors/transformation_executor';\nimport {Node} from './types';\n\n/**\n * Executes the op defined by the node object.\n * @param node\n * @param tensorMap contains tensors for executed nodes and weights\n */\nexport function executeOp(\n    node: Node, tensorMap: NamedTensorsMap,\n    context: ExecutionContext): tfc.Tensor[]|Promise<tfc.Tensor[]> {\n  const value =\n      ((node: Node, tensorMap: NamedTensorsMap, context: ExecutionContext) => {\n        switch (node.category) {\n          case 'arithmetic':\n            return arithmetic.executeOp(node, tensorMap, context);\n          case 'basic_math':\n            return basicMath.executeOp(node, tensorMap, context);\n          case 'control':\n            return control.executeOp(node, tensorMap, context);\n          case 'convolution':\n            return convolution.executeOp(node, tensorMap, context);\n          case 'creation':\n            return creation.executeOp(node, tensorMap, context);\n          case 'dynamic':\n            return dynamic.executeOp(node, tensorMap, context);\n          case 'evaluation':\n            return evaluation.executeOp(node, tensorMap, context);\n          case 'image':\n            return image.executeOp(node, tensorMap, context);\n          case 'graph':\n            return graph.executeOp(node, tensorMap, context);\n          case 'logical':\n            return logical.executeOp(node, tensorMap, context);\n          case 'matrices':\n            return matrices.executeOp(node, tensorMap, context);\n          case 'normalization':\n            return normalization.executeOp(node, tensorMap, context);\n          case 'reduction':\n            return reduction.executeOp(node, tensorMap, context);\n          case 'slice_join':\n            return sliceJoin.executeOp(node, tensorMap, context);\n          case 'spectral':\n            return spectral.executeOp(node, tensorMap, context);\n          case 'transformation':\n            return transformation.executeOp(node, tensorMap, context);\n          case 'custom':\n            const opMapper = getRegisteredOp(node.op);\n            if (opMapper && opMapper.customExecutor) {\n              return opMapper.customExecutor(\n                  new NodeValueImpl(node, tensorMap, context));\n            } else {\n              throw TypeError(`Custom op ${node.op} is not registered.`);\n            }\n          default:\n            throw TypeError(\n                `Unknown op '${node.op}'. File an issue at ` +\n                `https://github.com/tensorflow/tfjs/issues so we can add it` +\n                `, or register a custom execution with tf.registerOp()`);\n        }\n      })(node, tensorMap, context);\n  if (value instanceof Promise) {\n    return value.then((data) => [].concat(data));\n  }\n  return [].concat(value);\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {Tensor} from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap, TensorArrayMap} from '../data/types';\n\nimport {TensorArray} from './tensor_array';\n\nexport interface ExecutionContextInfo {\n  id: number;           // the unique id of the context info\n  frameName: string;    // The frame name of the loop, this comes from\n                        // the TensorFlow NodeDef.\n  iterationId: number;  // The iteration id of the loop\n}\n\n/**\n * ExecutionContext captures the runtime environment of the node. It keeps\n * track of the current frame and iteration for the control flow ops.\n *\n * For example, typical Dynamic RNN model may contain loops, for which\n * TensorFlow will generate graphs with Enter/Exit nodes to control the\n * current execution frame, and NextIteration Nodes for iteration id increment.\n * For model with branch logic, TensorFLow will generate Switch/Merge ops.\n */\nexport class ExecutionContext {\n  private rootContext = {id: 0, frameName: '', iterationId: 0};\n  private contexts: ExecutionContextInfo[] = [this.rootContext];\n  private lastId = 0;\n  private _currentContextIds: string[];\n\n  constructor(\n      public readonly weightMap: NamedTensorsMap,\n      public readonly tensorArrayMap: TensorArrayMap) {\n    this.generateCurrentContextIds();\n  }\n\n  private newFrame(id: number, frameName: string) {\n    return {id, frameName, iterationId: 0};\n  }\n\n  /**\n   * Set the current context\n   * @param contexts: ExecutionContextInfo[] the current path of execution\n   * frames\n   */\n  set currentContext(contexts: ExecutionContextInfo[]) {\n    if (this.contexts !== contexts) {\n      this.contexts = contexts;\n      this.generateCurrentContextIds();\n    }\n  }\n\n  get currentContext(): ExecutionContextInfo[] {\n    return this.contexts;\n  }\n\n  /**\n   * Returns the current context in string format.\n   */\n  get currentContextId(): string {\n    return this._currentContextIds[0];\n  }\n\n  /**\n   * Returns the current context and all parent contexts in string format.\n   * This allow access to the nodes in the current and parent frames.\n   */\n  get currentContextIds(): string[] {\n    return this._currentContextIds;\n  }\n\n  private generateCurrentContextIds() {\n    const names = [];\n    for (let i = 0; i < this.contexts.length - 1; i++) {\n      const contexts = this.contexts.slice(0, this.contexts.length - i);\n      names.push(this.contextIdforContexts(contexts));\n    }\n    names.push('');\n    this._currentContextIds = names;\n  }\n\n  private contextIdforContexts(contexts: ExecutionContextInfo[]) {\n    return contexts ?\n        contexts\n            .map(\n                context => (context.id === 0 && context.iterationId === 0) ?\n                    '' :\n                    `${context.frameName}-${context.iterationId}`)\n            .join('/') :\n        '';\n  }\n\n  /**\n   * Enter a new frame, a new context is pushed on the current context list.\n   * @param frameId new frame id\n   */\n  enterFrame(frameId: string) {\n    if (this.contexts) {\n      this.lastId++;\n      this.contexts = this.contexts.slice();\n      this.contexts.push(this.newFrame(this.lastId, frameId));\n      this._currentContextIds.unshift(this.contextIdforContexts(this.contexts));\n    }\n  }\n\n  /**\n   * Exit the current frame, the last context is removed from the current\n   * context list.\n   */\n  exitFrame() {\n    if (this.contexts && this.contexts.length > 1) {\n      this.contexts = this.contexts.slice();\n      this.contexts.splice(-1);\n      this.currentContextIds.shift();\n    } else {\n      throw new Error('Cannot exit frame, the context is empty');\n    }\n  }\n\n  /**\n   * Enter the next iteration of a loop, the iteration id of last context is\n   * increased.\n   */\n  nextIteration() {\n    if (this.contexts && this.contexts.length > 0) {\n      this.contexts = this.contexts.slice();\n      this.lastId++;\n      const context =\n          Object.assign({}, this.contexts[this.contexts.length - 1]);\n      context.iterationId += 1;\n      context.id = this.lastId;\n      this.contexts.splice(-1, 1, context);\n      this._currentContextIds.splice(\n          0, 1, this.contextIdforContexts(this.contexts));\n    } else {\n      throw new Error('Cannot increase frame iteration, the context is empty');\n    }\n  }\n\n  getWeight(name: string): Tensor[] {\n    return this.weightMap[name];\n  }\n\n  addTensorArray(tensorArray: TensorArray) {\n    this.tensorArrayMap[tensorArray.id] = tensorArray;\n  }\n\n  getTensorArray(id: number): TensorArray {\n    return this.tensorArrayMap[id];\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {NamedTensorMap} from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../data/types';\nimport {Graph, Node} from '../operations/types';\n\nexport interface ExecutionInfo {\n  inputs: NamedTensorMap;\n  outputs: Node[];\n  usedNodes: Set<string>;\n  missingInputs: string[];\n  dynamicNode: Node;\n  syncInputs: string[];\n}\n\n/**\n * Given graph inputs and desired outputs, find the minimal set of nodes\n * to execute in order to compute the outputs. In addition return other useful\n * info such:\n * - Missing inputs needed to compute the output.\n * - Whether the subgraph contains dynamic ops (control flow, dynamic shape).\n * - Alternative inputs in order to avoid async (dynamic op) execution.\n */\nexport function getExecutionSubgraph(\n    inputs: NamedTensorMap, outputs: Node[],\n    weightMap: NamedTensorsMap): ExecutionInfo {\n  const usedNodes = new Set<string>();\n  const missingInputs: string[] = [];\n  let dynamicNode: Node = null;\n  let syncInputs: string[] = null;\n\n  // Start with the outputs, going backwards and find all the nodes that are\n  // needed to compute those outputs.\n  const seen = new Set<string>();\n  const frontier = [...outputs];\n  while (frontier.length > 0) {\n    const node = frontier.pop();\n    if (isControlFlow(node) || isDynamicShape(node)) {\n      if (dynamicNode == null) {\n        dynamicNode = node;\n        syncInputs = dynamicNode.children.map(child => child.name)\n                         .filter(name => usedNodes.has(name));\n      }\n    }\n    usedNodes.add(node.name);\n\n    // Weights are dead end since we already have their values.\n    if (weightMap[node.name] != null) {\n      continue;\n    }\n    // This node is a dead end since it's one of the user-provided inputs.\n    if (inputs[node.name] != null) {\n      continue;\n    }\n    if (node.inputs.length === 0) {\n      missingInputs.push(node.name);\n      continue;\n    }\n    node.inputs.forEach(input => {\n      // Don't add to the frontier if it is already there.\n      if (seen.has(input.name)) {\n        return;\n      }\n      seen.add(input.name);\n      frontier.push(input);\n    });\n  }\n  return {inputs, outputs, usedNodes, missingInputs, dynamicNode, syncInputs};\n}\n\n/**\n * Given the execution info, return a list of nodes in topological order that\n * need to be executed to compute the output.\n */\nexport function getNodesInTopologicalOrder(\n    graph: Graph, weightMap: NamedTensorsMap,\n    executionInfo: ExecutionInfo): Node[] {\n  const {usedNodes, inputs} = executionInfo;\n  const frontier: Node[] = [];\n  const inputNodes = Object.keys(inputs).map(name => graph.nodes[name]);\n  inputNodes.forEach(input => {\n    if (usedNodes.has(input.name)) {\n      frontier.push(input);\n    }\n  });\n  graph.weights.forEach(weight => {\n    if (usedNodes.has(weight.name)) {\n      frontier.push(weight);\n    }\n  });\n  const seen = new Set<string>();\n  const orderedNodes: Node[] = [];\n  while (frontier.length > 0) {\n    const node = frontier.pop();\n    seen.add(node.name);\n    if (!weightMap[node.name]) {\n      orderedNodes.push(node);\n    }\n    node.children.forEach(child => {\n      if (!seen.has(child.name) && usedNodes.has(child.name) &&\n          child.inputs.every(input => seen.has(input.name))) {\n        frontier.push(child);\n      }\n    });\n  }\n  return orderedNodes;\n}\n\nconst CONTROL_FLOW_OPS = ['Switch', 'Merge', 'Enter', 'Exit', 'NextIteration'];\nconst DYNAMIC_SHAPE_OPS =\n    ['NonMaxSuppressionV2', 'NonMaxSuppressionV3', 'Where'];\n\nexport function isControlFlow(node: Node) {\n  return CONTROL_FLOW_OPS.indexOf(node.op) >= 0;\n}\n\nexport function isDynamicShape(node: Node) {\n  return DYNAMIC_SHAPE_OPS.indexOf(node.op) >= 0;\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, NamedTensorMap, Tensor, tidy, util} from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap, TensorArrayMap, TensorInfo} from '../data/types';\nimport {getNodeNameAndIndex, getParamValue, getTensor, getTensorsForCurrentContenxt, parseNodeName} from '../operations/executors/utils';\nimport {executeOp} from '../operations/operation_executor';\nimport {Graph, Node} from '../operations/types';\n\nimport {ExecutionContext, ExecutionContextInfo} from './execution_context';\nimport {getExecutionSubgraph, getNodesInTopologicalOrder, isControlFlow} from './model_analysis';\n\ninterface NodeWithContexts {\n  contexts: ExecutionContextInfo[];\n  node: Node;\n}\n\nexport class GraphExecutor {\n  private compiledMap: Map<string, Node[]> = new Map();\n  private _weightMap: NamedTensorsMap = {};\n  private weightIds: number[];\n  private placeholders: Node[];\n  private _outputs: Node[];\n  private SEPERATOR = ',';\n  get weightMap(): NamedTensorsMap {\n    return this._weightMap;\n  }\n  set weightMap(weightMap: NamedTensorsMap) {\n    const weightIds = Object.keys(weightMap).map(\n        key => weightMap[key].map(tensor => tensor.id));\n    this.weightIds = [].concat.apply([], weightIds);\n    this._weightMap = weightMap;\n  }\n\n  get inputs(): TensorInfo[] {\n    return this.placeholders.map(node => {\n      return {\n        name: node.name,\n        shape: node.attrParams['shape'] ?\n            node.attrParams['shape'].value as number[] :\n            undefined,\n        dtype: node.attrParams['dtype'] ?\n            node.attrParams['dtype'].value as DataType :\n            undefined\n      };\n    });\n  }\n\n  get outputs(): TensorInfo[] {\n    return this._outputs.map(node => {\n      return {\n        name: node.name,\n        shape: node.attrParams['shape'] ?\n            node.attrParams['shape'].value as number[] :\n            undefined,\n        dtype: node.attrParams['dtype'] ?\n            node.attrParams['dtype'].value as DataType :\n            undefined\n      };\n    });\n  }\n\n  get inputNodes(): string[] {\n    return this.placeholders.map(node => node.name);\n  }\n\n  get outputNodes(): string[] {\n    return this.outputs.map(node => node.name);\n  }\n\n  constructor(private graph: Graph) {\n    this.placeholders = graph.placeholders;\n    this._outputs = graph.outputs;\n  }\n\n  private getCompilationKey(inputs: Node[], outputs: Node[]): string {\n    const sortedInputs = inputs.map(node => node.name).sort();\n    const sortedOutputs = outputs.map(node => node.name).sort();\n    return sortedInputs.join(this.SEPERATOR) + '--' +\n        sortedOutputs.join(this.SEPERATOR);\n  }\n\n  /**\n   * Compiles the inference graph and returns the minimal set of nodes that are\n   * required for execution, in the correct execution order.\n   */\n  private compile(inputs: NamedTensorMap, outputs: Node[]): Node[] {\n    const executionInfo = getExecutionSubgraph(inputs, outputs, this.weightMap);\n    const {missingInputs, dynamicNode, syncInputs} = executionInfo;\n    if (dynamicNode != null) {\n      throw new Error(\n          `This execution contains the node '${dynamicNode.name}', which has ` +\n          `the dynamic op '${dynamicNode.op}'. Please use ` +\n          `model.executeAsync() instead. Alternatively, to avoid the ` +\n          `dynamic ops, specify the inputs [${syncInputs}]`);\n    }\n\n    if (missingInputs.length > 0) {\n      const outNames = outputs.map(n => n.name);\n      const inNames = Object.keys(inputs);\n      throw new Error(\n          `Cannot compute the outputs [${outNames}] from the provided inputs ` +\n          `[${inNames}]. Missing the following inputs: [${missingInputs}]`);\n    }\n\n    return getNodesInTopologicalOrder(\n        this.graph, this.weightMap, executionInfo);\n  }\n\n  /**\n   * Executes the inference for given input tensors.\n   * @param inputs Tensor map for the model inputs, keyed by the input node\n   * names.\n   * @param outputs output node name from the Tensorflow model, if no outputs\n   * are specified, the default outputs of the model would be used. You can\n   * inspect intermediate nodes of the model by adding them to the outputs\n   * array.\n   */\n  execute(inputs: NamedTensorMap, outputs: string[]): Tensor[] {\n    const names = Object.keys(inputs).sort();\n    this.checkInputs(inputs);\n    this.checkInputShapeAndType(inputs);\n    this.checkOutputs(outputs);\n    const inputNodes = names.map(name => this.graph.nodes[name]);\n    const outputNodes =\n        outputs.map(name => this.graph.nodes[parseNodeName(name)[0]]);\n    const compilationKey = this.getCompilationKey(inputNodes, outputNodes);\n    // Do nothing if the compiled graph cache contains the input.\n    let orderedNodes = this.compiledMap.get(compilationKey);\n    if (orderedNodes == null) {\n      orderedNodes = this.compile(inputs, outputNodes);\n      this.compiledMap.set(compilationKey, orderedNodes);\n    }\n    const tensorArrayMap: TensorArrayMap = {};\n    return tidy(() => {\n      const context = new ExecutionContext(this._weightMap, tensorArrayMap);\n      const tensorsMap: NamedTensorsMap = {...this.weightMap};\n      Object.keys(inputs).forEach(name => {\n        tensorsMap[name] = [inputs[name]];\n      });\n      const tensorsToKeep = this.getFrozenTensorIds(tensorsMap);\n      const intermediateTensorConsumerCount: {[key: number]: number} = {};\n      for (let i = 0; i < orderedNodes.length; i++) {\n        const node = orderedNodes[i];\n        if (!tensorsMap[node.name]) {\n          const tensors = executeOp(node, tensorsMap, context) as Tensor[];\n          if (tensors instanceof Promise) {\n            throw new Error(\n                `The execution of the op '${node.op}' returned a promise. ` +\n                `Please use model.executeAsync() instead.`);\n          }\n          tensorsMap[node.name] = tensors;\n          this.checkTensorForDisposal(\n              node.name, node, tensorsMap, context, tensorsToKeep, outputs,\n              intermediateTensorConsumerCount);\n        }\n      }\n      return outputs.map(name => getTensor(name, tensorsMap, context));\n    });\n  }\n\n  private getFrozenTensorIds(tensorMap: NamedTensorsMap): Set<number> {\n    const ids = [].concat.apply(\n        [],\n        Object.keys(tensorMap)\n            .map(key => tensorMap[key])\n            .map(tensors => tensors.map(tensor => tensor.id)));\n    return new Set(ids);\n  }\n  private checkTensorForDisposal(\n      nodeName: string, node: Node, tensorMap: NamedTensorsMap,\n      context: ExecutionContext, tensorsToKeep: Set<number>,\n      outputNames: string[],\n      intermediateTensorConsumerCount: {[key: string]: number}) {\n    // Skip output nodes and any control flow nodes, since its dependency is\n    // tricky to track correctly.\n    if (node.category === 'control' || outputNames.indexOf(nodeName) !== -1) {\n      return;\n    }\n\n    tensorMap[nodeName].forEach(tensor => {\n      if (tensor != null) {\n        intermediateTensorConsumerCount[tensor.id] =\n            (intermediateTensorConsumerCount[tensor.id] || 0) +\n            node.children.length;\n      }\n    });\n    node.inputs.forEach(input => {\n      // Skip any control flow nodes, since its dependency is tricky to track\n      // correctly.\n      if (input.category !== 'control') {\n        const tensors =\n            getTensorsForCurrentContenxt(input.name, tensorMap, context);\n        if (tensors != null) {\n          tensors.forEach(tensor => {\n            if (tensor && !tensorsToKeep.has(tensor.id)) {\n              const count = intermediateTensorConsumerCount[tensor.id];\n              if (count === 1) {\n                tensor.dispose();\n                delete intermediateTensorConsumerCount[tensor.id];\n              } else if (count != null) {\n                // only intermediate nodes has count set, inputs and weights are\n                // not.\n                intermediateTensorConsumerCount[tensor.id]--;\n              }\n            }\n          });\n        }\n      }\n    });\n  }\n  /**\n   * Executes the inference for given input tensors in Async fashion.\n   * @param inputs Tensor map for the model inputs, keyed by the input node\n   * names.\n   * @param outputs output node name from the Tensorflow model, if no outputs\n   * are specified, the default outputs of the model would be used. You can\n   * inspect intermediate nodes of the model by adding them to the outputs\n   * array.\n   */\n  async executeAsync(inputs: NamedTensorMap, outputs: string[]):\n      Promise<Tensor[]> {\n    this.checkInputs(inputs);\n    this.checkInputShapeAndType(inputs);\n    this.checkOutputs(outputs);\n    const tensorArrayMap: TensorArrayMap = {};\n    const context = new ExecutionContext(this._weightMap, tensorArrayMap);\n    // Graph with control flow op requires runtime evaluation of the execution\n    // order, while without control flow the execution order is pre-determined\n    // in the compile method.\n    const tensorMap =\n        await this.executeWithControlFlow(inputs, context, outputs);\n    const results = outputs.map(name => getTensor(name, tensorMap, context));\n\n    // dispose all the intermediate tensors\n    const outputIds = new Set<number>(results.map(t => t.id));\n    const inputIds =\n        new Set<number>(Object.keys(inputs).map(name => inputs[name].id));\n    Object.keys(tensorMap).forEach(key => {\n      const tensorArray = tensorMap[key];\n      tensorArray.forEach(tensor => {\n        if (tensor && !tensor.isDisposed && !outputIds.has(tensor.id) &&\n            !inputIds.has(tensor.id) &&\n            this.weightIds.indexOf(tensor.id) === -1) {\n          tensor.dispose();\n        }\n      });\n    });\n    return results;\n  }\n\n  /**\n   * When there are control flow nodes in the graph, the graph execution use\n   * ExecutionContext to keep track of the frames and loop iterators.\n   * @param inputs placeholder tensors for the graph.\n   * @param context the execution context object for current execution.\n   */\n  private async executeWithControlFlow(\n      inputs: NamedTensorMap, context: ExecutionContext,\n      outputNames: string[]): Promise<NamedTensorsMap> {\n    const names = Object.keys(inputs);\n    const inputNodes = names.map(name => this.graph.nodes[name]);\n    const outputNodes =\n        outputNames.map(name => this.graph.nodes[parseNodeName(name)[0]]);\n    const {usedNodes, missingInputs, dynamicNode, syncInputs} =\n        getExecutionSubgraph(inputs, outputNodes, this.weightMap);\n\n    const stack: NodeWithContexts[] =\n        [...inputNodes, ...this.graph.weights].map(node => {\n          return {node, contexts: context.currentContext};\n        });\n    const tensorsMap: NamedTensorsMap = {...this.weightMap};\n    Object.keys(inputs).forEach(name => {\n      tensorsMap[name] = [inputs[name]];\n    });\n    const intermediateTensorConsumerCount: {[key: number]: number} = {};\n    const tensorsToKeep = this.getFrozenTensorIds(tensorsMap);\n    const added: {[key: string]: boolean} = {};\n    while (stack.length > 0) {\n      const promises = this.processStack(\n          inputNodes, stack, context, tensorsMap, added, tensorsToKeep,\n          outputNames, intermediateTensorConsumerCount, usedNodes);\n      await Promise.all(promises);\n    }\n    if (dynamicNode == null) {\n      console.warn(\n          `This model execution did not contain any nodes with control flow ` +\n          `or dynamic output shapes. You can use model.execute() instead.`);\n    }\n    const missingOutputs =\n        outputNodes\n            .filter(\n                node => !isControlFlow(node) &&\n                    !getTensor(node.name, tensorsMap, context))\n            .map(node => node.name);\n    if (missingOutputs.length > 0) {\n      let alternativeMsg = '';\n      if (dynamicNode != null) {\n        alternativeMsg =\n            `Alternatively, to avoid the dynamic ops, use model.execute() ` +\n            `and specify the inputs [${syncInputs}]`;\n      }\n      throw new Error(\n          `Cannot compute the outputs [${missingOutputs}] from the provided ` +\n          `inputs [${names}]. Consider providing the following inputs: ` +\n          `[${missingInputs}]. ${alternativeMsg}`);\n    }\n    return tensorsMap;\n  }\n\n  private processStack(\n      inputNodes: Node[], stack: NodeWithContexts[], context: ExecutionContext,\n      tensorMap: NamedTensorsMap, added: {[key: string]: boolean},\n      tensorsToKeep: Set<number>, outputNames: string[],\n      intermediateTensorConsumerCount: {[key: number]: number},\n      usedNodes: Set<string>) {\n    const promises: Array<Promise<Tensor[]>> = [];\n    while (stack.length > 0) {\n      const item = stack.pop();\n      context.currentContext = item.contexts;\n      let nodeName = '';\n      // The tensor of the Enter op with isConstant set should be set\n      // in the parent scope, so it will be available as constant for the\n      // whole loop.\n      if (item.node.op === 'Enter' &&\n          getParamValue('isConstant', item.node, tensorMap, context)) {\n        [nodeName] = getNodeNameAndIndex(item.node.name, context);\n      }\n\n      // only process nodes that are not provided as input nodes.\n      if (inputNodes.indexOf(item.node) === -1) {\n        const tensors = executeOp(item.node, tensorMap, context);\n        if (!nodeName) {\n          [nodeName] = getNodeNameAndIndex(item.node.name, context);\n        }\n        const currentContext = context.currentContext;\n        if (tensors instanceof Promise) {\n          promises.push(tensors.then(t => {\n            tensorMap[nodeName] = t;\n            context.currentContext = currentContext;\n            this.checkTensorForDisposal(\n                nodeName, item.node, tensorMap, context, tensorsToKeep,\n                outputNames, intermediateTensorConsumerCount);\n            this.processChildNodes(\n                item.node, stack, context, tensorMap, added, usedNodes);\n            return t;\n          }));\n        } else {\n          tensorMap[nodeName] = tensors;\n          this.checkTensorForDisposal(\n              nodeName, item.node, tensorMap, context, tensorsToKeep,\n              outputNames, intermediateTensorConsumerCount);\n          this.processChildNodes(\n              item.node, stack, context, tensorMap, added, usedNodes);\n        }\n      } else {\n        this.processChildNodes(\n            item.node, stack, context, tensorMap, added, usedNodes);\n      }\n    }\n    return promises;\n  }\n\n  private processChildNodes(\n      node: Node, stack: NodeWithContexts[], context: ExecutionContext,\n      tensorMap: NamedTensorsMap, added: {[key: string]: boolean},\n      usedNodes: Set<string>) {\n    node.children.forEach((childNode) => {\n      const [nodeName, ] = getNodeNameAndIndex(childNode.name, context);\n      if (added[nodeName] || !usedNodes.has(childNode.name)) {\n        return;\n      }\n      // Merge op can be pushed if any of its inputs has value.\n      if (childNode.op === 'Merge') {\n        if (childNode.inputNames.some(name => {\n              return !!getTensor(name, tensorMap, context);\n            })) {\n          added[nodeName] = true;\n          stack.push({contexts: context.currentContext, node: childNode});\n        }\n      } else  // Otherwise all inputs must to have value.\n          if (childNode.inputNames.every(name => {\n                return !!getTensor(name, tensorMap, context);\n              })) {\n        added[nodeName] = true;\n        stack.push({contexts: context.currentContext, node: childNode});\n      }\n    });\n  }\n\n  /**\n   * Releases the memory used by the weight tensors.\n   */\n  dispose() {\n    Object.keys(this.weightMap)\n        .forEach(\n            key => this.weightMap[key].forEach(tensor => tensor.dispose()));\n  }\n\n  private checkInputShapeAndType(inputs: NamedTensorMap) {\n    Object.keys(inputs).forEach(name => {\n      const input = inputs[name];\n      const node = this.graph.nodes[name];\n      if (node.attrParams['shape'] && node.attrParams['shape'].value) {\n        const shape = node.attrParams['shape'].value as number[];\n        const match = shape.length === input.shape.length &&\n            input.shape.every(\n                (dim, index) => shape[index] === -1 || shape[index] === dim);\n        util.assert(\n            match,\n            () => `The shape of dict['${node.name}'] provided in ` +\n                `model.execute(dict) must be [${shape}], but was ` +\n                `[${input.shape}]`);\n      }\n      if (node.attrParams['dtype'] && node.attrParams['dtype'].value) {\n        util.assert(\n            input.dtype === node.attrParams['dtype'].value as string,\n            () => `The dtype of dict['${node.name}'] provided in ` +\n                `model.execute(dict) must be ` +\n                `${node.attrParams['dtype'].value}, but was ${input.dtype}`);\n      }\n    });\n  }\n\n  private checkInputs(inputs: NamedTensorMap) {\n    const notInGraph =\n        Object.keys(inputs).filter(name => !this.graph.nodes[name]);\n    if (notInGraph.length > 0) {\n      throw new Error(\n          `The dict provided in model.execute(dict) has ` +\n          `keys: [${notInGraph}] that are not part of graph`);\n    }\n  }\n\n  private checkOutputs(outputs: string[]): void {\n    outputs.forEach(name => {\n      const [normalizedName] = parseNodeName(name);\n      if (!this.graph.nodes[normalizedName]) {\n        throw new Error(`The output '${name}' is not found in the graph`);\n      }\n    });\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {InferenceModel, io, ModelPredictConfig, NamedTensorMap, Tensor} from '@tensorflow/tfjs-core';\n\nimport * as tensorflow from '../data/compiled_api';\nimport {NamedTensorsMap, TensorInfo} from '../data/types';\nimport {OperationMapper} from '../operations/operation_mapper';\n\nimport {GraphExecutor} from './graph_executor';\n\nexport const TFHUB_SEARCH_PARAM = '?tfjs-format=file';\nexport const DEFAULT_MODEL_NAME = 'model.json';\n/**\n * A `tf.GraphModel` is a directed, acyclic graph of built from\n * SavedModel GraphDef and allows inference exeuction.\n *\n * A `tf.GraphModel` can only be created by loading from a model converted from\n * a [TensorFlow SavedModel](https://www.tensorflow.org/guide/saved_model) using\n * the command line converter tool and loaded via `tf.loadGraphModel`.\n */\n/** @doc {heading: 'Models', subheading: 'Classes'} */\nexport class GraphModel implements InferenceModel {\n  private executor: GraphExecutor;\n  private version = 'n/a';\n  private handler: io.IOHandler;\n  // Returns the version information for the tensorflow model GraphDef.\n  get modelVersion(): string {\n    return this.version;\n  }\n\n  get inputNodes(): string[] {\n    return this.executor.inputNodes;\n  }\n\n  get outputNodes(): string[] {\n    return this.executor.outputNodes;\n  }\n\n  get inputs(): TensorInfo[] {\n    return this.executor.inputs;\n  }\n\n  get outputs(): TensorInfo[] {\n    return this.executor.outputs;\n  }\n\n  get weights(): NamedTensorsMap {\n    return this.executor.weightMap;\n  }\n\n  /**\n   * @param modelUrl url for the model, or an `io.IOHandler`.\n   * @param weightManifestUrl url for the weight file generated by\n   * scripts/convert.py script.\n   * @param requestOption options for Request, which allows to send credentials\n   * and custom headers.\n   * @param onProgress Optional, progress callback function, fired periodically\n   * before the load is completed.\n   */\n  constructor(\n      private modelUrl: string|io.IOHandler,\n      private loadOptions: io.LoadOptions = {}) {\n    if (loadOptions == null) {\n      this.loadOptions = {};\n    }\n  }\n\n  private findIOHandler() {\n    const path = this.modelUrl;\n    if ((path as io.IOHandler).load != null) {\n      // Path is an IO Handler.\n      this.handler = path as io.IOHandler;\n    } else if (this.loadOptions.requestInit != null) {\n      this.handler = io.browserHTTPRequest(path as string, this.loadOptions);\n    } else {\n      const handlers =\n          io.getLoadHandlers(path as string, this.loadOptions.onProgress);\n      if (handlers.length === 0) {\n        // For backward compatibility: if no load handler can be found,\n        // assume it is a relative http path.\n        handlers.push(io.browserHTTPRequest(path as string, this.loadOptions));\n      } else if (handlers.length > 1) {\n        throw new Error(\n            `Found more than one (${handlers.length}) load handlers for ` +\n            `URL '${[path]}'`);\n      }\n      this.handler = handlers[0];\n    }\n  }\n\n  /**\n   * Loads the model and weight files, construct the in memory weight map and\n   * compile the inference graph.\n   */\n  async load(): Promise<boolean> {\n    this.findIOHandler();\n    if (this.handler.load == null) {\n      throw new Error(\n          'Cannot proceed with model loading because the IOHandler provided ' +\n          'does not have the `load` method implemented.');\n    }\n    const artifacts = await this.handler.load();\n    const graph = artifacts.modelTopology as tensorflow.IGraphDef;\n\n    this.version = `${graph.versions.producer}.${graph.versions.minConsumer}`;\n    const weightMap =\n        io.decodeWeights(artifacts.weightData, artifacts.weightSpecs);\n    this.executor =\n        new GraphExecutor(OperationMapper.Instance.transformGraph(graph));\n    this.executor.weightMap = this.convertTensorMapToTensorsMap(weightMap);\n    return true;\n  }\n\n  /**\n   * Execute the inference for the input tensors.\n   *\n   * @param input The input tensors, when there is single input for the model,\n   * inputs param should be a `tf.Tensor`. For models with mutliple inputs,\n   * inputs params should be in either `tf.Tensor`[] if the input order is\n   * fixed, or otherwise NamedTensorMap format.\n   *\n   * For model with multiple inputs, we recommend you use NamedTensorMap as the\n   * input type, if you use `tf.Tensor`[], the order of the array needs to\n   * follow the\n   * order of inputNodes array. @see {@link GraphModel.inputNodes}\n   *\n   * You can also feed any intermediate nodes using the NamedTensorMap as the\n   * input type. For example, given the graph\n   *    InputNode => Intermediate => OutputNode,\n   * you can execute the subgraph Intermediate => OutputNode by calling\n   *    model.execute('IntermediateNode' : tf.tensor(...));\n   *\n   * This is useful for models that uses tf.dynamic_rnn, where the intermediate\n   * state needs to be fed manually.\n   *\n   * For batch inference execution, the tensors for each input need to be\n   * concatenated together. For example with mobilenet, the required input shape\n   * is [1, 244, 244, 3], which represents the [batch, height, width, channel].\n   * If we are provide a batched data of 100 images, the input tensor should be\n   * in the shape of [100, 244, 244, 3].\n   *\n   * @param config Prediction configuration for specifying the batch size and\n   * output node names. Currently the batch size option is ignored for graph\n   * model.\n   *\n   * @returns Inference result tensors. The output would be single `tf.Tensor`\n   * if model has single output node, otherwise Tensor[] or NamedTensorMap[]\n   * will be returned for model with multiple outputs.\n   */\n  /** @doc {heading: 'Models', subheading: 'Classes'} */\n  predict(inputs: Tensor|Tensor[]|NamedTensorMap, config?: ModelPredictConfig):\n      Tensor|Tensor[]|NamedTensorMap {\n    return this.execute(inputs, this.outputNodes);\n  }\n\n  private normalizeInputs(inputs: Tensor|Tensor[]|\n                          NamedTensorMap): NamedTensorMap {\n    if (!(inputs instanceof Tensor) && !Array.isArray(inputs)) {\n      // The input is already a NamedTensorMap.\n      return inputs;\n    }\n    inputs = Array.isArray(inputs) ? inputs : [inputs];\n    if (inputs.length !== this.inputNodes.length) {\n      throw new Error(\n          'Input tensor count mismatch,' +\n          `the graph model has ${this.inputNodes.length} placeholders, ` +\n          `while there are ${inputs.length} input tensors.`);\n    }\n    return this.inputNodes.reduce((map, inputName, i) => {\n      map[inputName] = (inputs as Tensor[])[i];\n      return map;\n    }, {} as NamedTensorMap);\n  }\n\n  private normalizeOutputs(outputs: string|string[]): string[] {\n    outputs = outputs || this.outputNodes;\n    return !Array.isArray(outputs) ? [outputs] : outputs;\n  }\n\n  /**\n   * Executes inference for the model for given input tensors.\n   * @param inputs tensor, tensor array or tensor map of the inputs for the\n   * model, keyed by the input node names.\n   * @param outputs output node name from the Tensorflow model, if no\n   * outputs are specified, the default outputs of the model would be used.\n   * You can inspect intermediate nodes of the model by adding them to the\n   * outputs array.\n   *\n   * @returns A single tensor if provided with a single output or no outputs\n   * are provided and there is only one default output, otherwise return a\n   * tensor array. The order of the tensor array is the same as the outputs\n   * if provided, otherwise the order of outputNodes attribute of the model.\n   */\n  /** @doc {heading: 'Models', subheading: 'Classes'} */\n  execute(inputs: Tensor|Tensor[]|NamedTensorMap, outputs?: string|string[]):\n      Tensor|Tensor[] {\n    inputs = this.normalizeInputs(inputs);\n    outputs = this.normalizeOutputs(outputs);\n    const result = this.executor.execute(inputs, outputs);\n    return result.length > 1 ? result : result[0];\n  }\n  /**\n   * Executes inference for the model for given input tensors in async\n   * fashion, use this method when your model contains control flow ops.\n   * @param inputs tensor, tensor array or tensor map of the inputs for the\n   * model, keyed by the input node names.\n   * @param outputs output node name from the Tensorflow model, if no outputs\n   * are specified, the default outputs of the model would be used. You can\n   * inspect intermediate nodes of the model by adding them to the outputs\n   * array.\n   *\n   * @returns A Promise of single tensor if provided with a single output or\n   * no outputs are provided and there is only one default output, otherwise\n   * return a tensor map.\n   */\n  /** @doc {heading: 'Models', subheading: 'Classes'} */\n  async executeAsync(\n      inputs: Tensor|Tensor[]|NamedTensorMap,\n      outputs?: string|string[]): Promise<Tensor|Tensor[]> {\n    inputs = this.normalizeInputs(inputs);\n    outputs = this.normalizeOutputs(outputs);\n    const result = await this.executor.executeAsync(inputs, outputs);\n    return result.length > 1 ? result : result[0];\n  }\n\n  private convertTensorMapToTensorsMap(map: NamedTensorMap): NamedTensorsMap {\n    return Object.keys(map).reduce((newMap: NamedTensorsMap, key) => {\n      newMap[key] = [map[key]];\n      return newMap;\n    }, {});\n  }\n\n  /**\n   * Releases the memory used by the weight tensors.\n   */\n  /** @doc {heading: 'Models', subheading: 'Classes'} */\n  dispose() {\n    this.executor.dispose();\n  }\n}\n\n/**\n * Load a graph model given a URL to the model definition.\n *\n * Example of loading MobileNetV2 from a URL and making a prediction with a\n * zeros input:\n *\n * ```js\n * const modelUrl =\n *    'https://storage.googleapis.com/tfjs-models/savedmodel/mobilenet_v2_1.0_224/model.json';\n * const model = await tf.loadGraphModel(modelUrl);\n * const zeros = tf.zeros([1, 224, 224, 3]);\n * model.predict(zeros).print();\n * ```\n *\n * Example of loading MobileNetV2 from a TF Hub URL and making a prediction with\n * a zeros input:\n *\n * ```js\n * const modelUrl =\n *    'https://tfhub.dev/google/imagenet/mobilenet_v2_140_224/classification/2';\n * const model = await tf.loadGraphModel(modelUrl, {fromTFHub: true});\n * const zeros = tf.zeros([1, 224, 224, 3]);\n * model.predict(zeros).print();\n * ```\n * @param modelUrl The url or an `io.IOHandler` that loads the model.\n * @param options Options for the HTTP request, which allows to send credentials\n *    and custom headers.\n */\n/** @doc {heading: 'Models', subheading: 'Loading'} */\nexport async function loadGraphModel(\n    modelUrl: string|io.IOHandler,\n    options: io.LoadOptions = {}): Promise<GraphModel> {\n  if (modelUrl == null) {\n    throw new Error(\n        'modelUrl in loadGraphModel() cannot be null. Please provide a url ' +\n        'or an IOHandler that loads the model');\n  }\n  if (options == null) {\n    options = {};\n  }\n\n  if (options.fromTFHub) {\n    if ((modelUrl as io.IOHandler).load == null) {\n      if (!(modelUrl as string).endsWith('/')) {\n        modelUrl = (modelUrl as string) + '/';\n      }\n      modelUrl = `${modelUrl}${DEFAULT_MODEL_NAME}${TFHUB_SEARCH_PARAM}`;\n    }\n  }\n  const model = new GraphModel(modelUrl, options);\n  await model.load();\n  return model;\n}\n","/** @license See the LICENSE file. */\n\n// This code is auto-generated, do not modify this file!\nconst version = '1.3.1';\nexport {version};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}