{"ast":null,"code":"\"use strict\";\n\n/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function () {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n        case 7:\n          op = _.ops.pop();\n          _.trys.pop();\n          continue;\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n            _.ops.push(op);\n            break;\n          }\n          if (t[2]) _.ops.pop();\n          _.trys.pop();\n          continue;\n      }\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.loadFromFiles = exports.load = exports.loadTruncatedMobileNet = exports.CustomMobileNet = exports.getTopKClasses = exports.IMAGE_SIZE = void 0;\nvar tf = require(\"@tensorflow/tfjs\");\nvar tfjs_1 = require(\"@tensorflow/tfjs\");\nvar tf_1 = require(\"./utils/tf\");\nvar canvas_1 = require(\"./utils/canvas\");\nvar version_1 = require(\"./version\");\nvar DEFAULT_MOBILENET_VERSION = 1;\nvar DEFAULT_TRAINING_LAYER_V1 = 'conv_pw_13_relu';\nvar DEFAULT_TRAINING_LAYER_V2 = \"out_relu\";\nvar DEFAULT_ALPHA_V1 = 0.25;\nvar DEFAULT_ALPHA_V2 = 0.35;\nexports.IMAGE_SIZE = 224;\n/**\n * Receives a Metadata object and fills in the optional fields such as timeStamp\n * @param data a Metadata object\n */\nvar fillMetadata = function (data) {\n  // util.assert(typeof data.tfjsVersion === 'string', () => `metadata.tfjsVersion is invalid`);\n  data.packageVersion = data.packageVersion || version_1.version;\n  data.packageName = data.packageName || '@teachablemachine/image';\n  data.timeStamp = data.timeStamp || new Date().toISOString();\n  data.userMetadata = data.userMetadata || {};\n  data.modelName = data.modelName || 'untitled';\n  data.labels = data.labels || [];\n  data.imageSize = data.imageSize || exports.IMAGE_SIZE;\n  return data;\n};\n// tslint:disable-next-line:no-any\nvar isMetadata = function (c) {\n  return !!c && Array.isArray(c.labels);\n};\nvar isAlphaValid = function (version, alpha) {\n  if (version === 1) {\n    if (alpha !== 0.25 && alpha !== 0.5 && alpha !== 0.75 && alpha !== 1) {\n      console.warn(\"Invalid alpha. Options are: 0.25, 0.50, 0.75 or 1.00.\");\n      console.log(\"Loading model with alpha: \", DEFAULT_ALPHA_V1.toFixed(2));\n      return DEFAULT_ALPHA_V1;\n    }\n  } else {\n    if (alpha !== 0.35 && alpha !== 0.5 && alpha !== 0.75 && alpha !== 1) {\n      console.warn(\"Invalid alpha. Options are: 0.35, 0.50, 0.75 or 1.00.\");\n      console.log(\"Loading model with alpha: \", DEFAULT_ALPHA_V2.toFixed(2));\n      return DEFAULT_ALPHA_V2;\n    }\n  }\n  return alpha;\n};\nvar parseModelOptions = function (options) {\n  options = options || {};\n  if (options.checkpointUrl && options.trainingLayer) {\n    if (options.alpha || options.version) {\n      console.warn(\"Checkpoint URL passed to modelOptions, alpha options are ignored\");\n    }\n    return [options.checkpointUrl, options.trainingLayer];\n  } else {\n    options.version = options.version || DEFAULT_MOBILENET_VERSION;\n    if (options.version === 1) {\n      options.alpha = options.alpha || DEFAULT_ALPHA_V1;\n      options.alpha = isAlphaValid(options.version, options.alpha);\n      console.log(\"Loading mobilenet \" + options.version + \" and alpha \" + options.alpha);\n      // exception is alpha of 1 can only be 1.0\n      var alphaString = options.alpha.toFixed(2);\n      if (alphaString === \"1.00\") {\n        alphaString = \"1.0\";\n      }\n      return [\n      // tslint:disable-next-line:max-line-length        \n      \"https://storage.googleapis.com/tfjs-models/tfjs/mobilenet_v1_\" + alphaString + \"_\" + exports.IMAGE_SIZE + \"/model.json\", DEFAULT_TRAINING_LAYER_V1];\n    } else if (options.version === 2) {\n      options.alpha = options.alpha || DEFAULT_ALPHA_V2;\n      options.alpha = isAlphaValid(options.version, options.alpha);\n      console.log(\"Loading mobilenet \" + options.version + \" and alpha \" + options.alpha);\n      return [\n      // tslint:disable-next-line:max-line-length        \n      \"https://storage.googleapis.com/teachable-machine-models/mobilenet_v2_weights_tf_dim_ordering_tf_kernels_\" + options.alpha.toFixed(2) + \"_\" + exports.IMAGE_SIZE + \"_no_top/model.json\", DEFAULT_TRAINING_LAYER_V2];\n    } else {\n      throw new Error(\"MobileNet V\" + options.version + \" doesn't exist\");\n    }\n  }\n};\n/**\n * process either a URL string or a Metadata object\n * @param metadata a url to load metadata or a Metadata object\n */\nvar processMetadata = function (metadata) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var metadataJSON, metadataResponse;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (!(typeof metadata === 'string')) return [3 /*break*/, 3];\n          return [4 /*yield*/, fetch(metadata)];\n        case 1:\n          metadataResponse = _a.sent();\n          return [4 /*yield*/, metadataResponse.json()];\n        case 2:\n          metadataJSON = _a.sent();\n          return [3 /*break*/, 4];\n        case 3:\n          if (isMetadata(metadata)) {\n            metadataJSON = metadata;\n          } else {\n            throw new Error('Invalid Metadata provided');\n          }\n          _a.label = 4;\n        case 4:\n          return [2 /*return*/, fillMetadata(metadataJSON)];\n      }\n    });\n  });\n};\n/**\n * Computes the probabilities of the topK classes given logits by computing\n * softmax to get probabilities and then sorting the probabilities.\n * @param logits Tensor representing the logits from MobileNet.\n * @param topK The number of top predictions to show.\n */\nfunction getTopKClasses(labels, logits, topK) {\n  if (topK === void 0) {\n    topK = 3;\n  }\n  return __awaiter(this, void 0, void 0, function () {\n    var values;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          return [4 /*yield*/, logits.data()];\n        case 1:\n          values = _a.sent();\n          return [2 /*return*/, tf.tidy(function () {\n            topK = Math.min(topK, values.length);\n            var valuesAndIndices = [];\n            for (var i = 0; i < values.length; i++) {\n              valuesAndIndices.push({\n                value: values[i],\n                index: i\n              });\n            }\n            valuesAndIndices.sort(function (a, b) {\n              return b.value - a.value;\n            });\n            var topkValues = new Float32Array(topK);\n            var topkIndices = new Int32Array(topK);\n            for (var i = 0; i < topK; i++) {\n              topkValues[i] = valuesAndIndices[i].value;\n              topkIndices[i] = valuesAndIndices[i].index;\n            }\n            var topClassesAndProbs = [];\n            for (var i = 0; i < topkIndices.length; i++) {\n              topClassesAndProbs.push({\n                className: labels[topkIndices[i]],\n                probability: topkValues[i]\n              });\n            }\n            return topClassesAndProbs;\n          })];\n      }\n    });\n  });\n}\nexports.getTopKClasses = getTopKClasses;\nvar CustomMobileNet = /** @class */function () {\n  function CustomMobileNet(model, metadata) {\n    this.model = model;\n    this._metadata = fillMetadata(metadata);\n  }\n  Object.defineProperty(CustomMobileNet, \"EXPECTED_IMAGE_SIZE\", {\n    get: function () {\n      return exports.IMAGE_SIZE;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  CustomMobileNet.prototype.getMetadata = function () {\n    return this._metadata;\n  };\n  /**\n   * get the total number of classes existing within model\n   */\n  CustomMobileNet.prototype.getTotalClasses = function () {\n    var output = this.model.output;\n    var totalClasses = output.shape[1];\n    return totalClasses;\n  };\n  /**\n   * get the model labels\n   */\n  CustomMobileNet.prototype.getClassLabels = function () {\n    return this._metadata.labels;\n  };\n  /**\n   * Given an image element, makes a prediction through mobilenet returning the\n   * probabilities of the top K classes.\n   * @param image the image to classify\n   * @param maxPredictions the maximum number of classification predictions\n   */\n  CustomMobileNet.prototype.predictTopK = function (image, maxPredictions, flipped) {\n    if (maxPredictions === void 0) {\n      maxPredictions = 10;\n    }\n    if (flipped === void 0) {\n      flipped = false;\n    }\n    return __awaiter(this, void 0, void 0, function () {\n      var croppedImage, logits, classes;\n      var _this = this;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            croppedImage = canvas_1.cropTo(image, this._metadata.imageSize, flipped);\n            logits = tf.tidy(function () {\n              var captured = tf_1.capture(croppedImage, _this._metadata.grayscale);\n              return _this.model.predict(captured);\n            });\n            return [4 /*yield*/, getTopKClasses(this._metadata.labels, logits, maxPredictions)];\n          case 1:\n            classes = _a.sent();\n            tfjs_1.dispose(logits);\n            return [2 /*return*/, classes];\n        }\n      });\n    });\n  };\n  /**\n   * Given an image element, makes a prediction through mobilenet returning the\n   * probabilities for ALL classes.\n   * @param image the image to classify\n   * @param flipped whether to flip the image on X\n   */\n  CustomMobileNet.prototype.predict = function (image, flipped) {\n    if (flipped === void 0) {\n      flipped = false;\n    }\n    return __awaiter(this, void 0, void 0, function () {\n      var croppedImage, logits, values, classes, i;\n      var _this = this;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            croppedImage = canvas_1.cropTo(image, this._metadata.imageSize, flipped);\n            logits = tf.tidy(function () {\n              var captured = tf_1.capture(croppedImage, _this._metadata.grayscale);\n              return _this.model.predict(captured);\n            });\n            return [4 /*yield*/, logits.data()];\n          case 1:\n            values = _a.sent();\n            classes = [];\n            for (i = 0; i < values.length; i++) {\n              classes.push({\n                className: this._metadata.labels[i],\n                probability: values[i]\n              });\n            }\n            tfjs_1.dispose(logits);\n            return [2 /*return*/, classes];\n        }\n      });\n    });\n  };\n  CustomMobileNet.prototype.dispose = function () {\n    this.truncatedModel.dispose();\n  };\n  return CustomMobileNet;\n}();\nexports.CustomMobileNet = CustomMobileNet;\n/**\n * load the base mobilenet model\n * @param modelOptions options determining what model to load\n */\nfunction loadTruncatedMobileNet(modelOptions) {\n  return __awaiter(this, void 0, void 0, function () {\n    var _a, checkpointUrl, trainingLayer, mobilenet, layer, truncatedModel, model, layer, truncatedModel, model;\n    return __generator(this, function (_b) {\n      switch (_b.label) {\n        case 0:\n          _a = parseModelOptions(modelOptions), checkpointUrl = _a[0], trainingLayer = _a[1];\n          return [4 /*yield*/, tf.loadLayersModel(checkpointUrl)];\n        case 1:\n          mobilenet = _b.sent();\n          if (modelOptions && modelOptions.version === 1) {\n            layer = mobilenet.getLayer(trainingLayer);\n            truncatedModel = tf.model({\n              inputs: mobilenet.inputs,\n              outputs: layer.output\n            });\n            model = tf.sequential();\n            model.add(truncatedModel);\n            model.add(tf.layers.flatten());\n            return [2 /*return*/, model];\n          } else {\n            layer = mobilenet.getLayer(trainingLayer);\n            truncatedModel = tf.model({\n              inputs: mobilenet.inputs,\n              outputs: layer.output\n            });\n            model = tf.sequential();\n            model.add(truncatedModel);\n            model.add(tf.layers.globalAveragePooling2d({})); // go from shape [7, 7, 1280] to [1280]\n            return [2 /*return*/, model];\n          }\n          return [2 /*return*/];\n      }\n    });\n  });\n}\nexports.loadTruncatedMobileNet = loadTruncatedMobileNet;\nfunction load(model, metadata) {\n  return __awaiter(this, void 0, void 0, function () {\n    var customModel, metadataJSON, _a;\n    return __generator(this, function (_b) {\n      switch (_b.label) {\n        case 0:\n          return [4 /*yield*/, tf.loadLayersModel(model)];\n        case 1:\n          customModel = _b.sent();\n          if (!metadata) return [3 /*break*/, 3];\n          return [4 /*yield*/, processMetadata(metadata)];\n        case 2:\n          _a = _b.sent();\n          return [3 /*break*/, 4];\n        case 3:\n          _a = null;\n          _b.label = 4;\n        case 4:\n          metadataJSON = _a;\n          return [2 /*return*/, new CustomMobileNet(customModel, metadataJSON)];\n      }\n    });\n  });\n}\nexports.load = load;\nfunction loadFromFiles(model, weights, metadata) {\n  return __awaiter(this, void 0, void 0, function () {\n    var customModel, metadataFile, metadataJSON, _a;\n    return __generator(this, function (_b) {\n      switch (_b.label) {\n        case 0:\n          return [4 /*yield*/, tf.loadLayersModel(tf.io.browserFiles([model, weights]))];\n        case 1:\n          customModel = _b.sent();\n          return [4 /*yield*/, new Response(metadata).json()];\n        case 2:\n          metadataFile = _b.sent();\n          if (!metadata) return [3 /*break*/, 4];\n          return [4 /*yield*/, processMetadata(metadataFile)];\n        case 3:\n          _a = _b.sent();\n          return [3 /*break*/, 5];\n        case 4:\n          _a = null;\n          _b.label = 5;\n        case 5:\n          metadataJSON = _a;\n          return [2 /*return*/, new CustomMobileNet(customModel, metadataJSON)];\n      }\n    });\n  });\n}\nexports.loadFromFiles = loadFromFiles;","map":{"version":3,"names":["tf","require","tfjs_1","tf_1","canvas_1","version_1","DEFAULT_MOBILENET_VERSION","DEFAULT_TRAINING_LAYER_V1","DEFAULT_TRAINING_LAYER_V2","DEFAULT_ALPHA_V1","DEFAULT_ALPHA_V2","exports","IMAGE_SIZE","fillMetadata","data","packageVersion","version","packageName","timeStamp","Date","toISOString","userMetadata","modelName","labels","imageSize","isMetadata","c","Array","isArray","isAlphaValid","alpha","console","warn","log","toFixed","parseModelOptions","options","checkpointUrl","trainingLayer","alphaString","Error","processMetadata","metadata","__awaiter","fetch","metadataResponse","_a","sent","json","metadataJSON","getTopKClasses","logits","topK","values","tidy","Math","min","length","valuesAndIndices","i","push","value","index","sort","a","b","topkValues","Float32Array","topkIndices","Int32Array","topClassesAndProbs","className","probability","CustomMobileNet","model","_metadata","Object","defineProperty","get","prototype","getMetadata","getTotalClasses","output","totalClasses","shape","getClassLabels","predictTopK","image","maxPredictions","flipped","croppedImage","cropTo","captured","capture","_this","grayscale","predict","classes","dispose","truncatedModel","loadTruncatedMobileNet","modelOptions","loadLayersModel","mobilenet","_b","layer","getLayer","inputs","outputs","sequential","add","layers","flatten","globalAveragePooling2d","load","customModel","loadFromFiles","weights","io","browserFiles","Response","metadataFile"],"sources":["C:\\Users\\Chris Littlejohn\\Downloads\\barcode-matcher-final-project (1)\\node_modules\\@teachablemachine\\image\\src\\custom-mobilenet.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tf from '@tensorflow/tfjs';\nimport { util, SymbolicTensor } from '@tensorflow/tfjs';\nimport { dispose } from '@tensorflow/tfjs';\nimport { capture } from './utils/tf';\nimport { cropTo } from './utils/canvas';\nimport { version } from './version';\n\nconst DEFAULT_MOBILENET_VERSION = 1;\nconst DEFAULT_TRAINING_LAYER_V1 = 'conv_pw_13_relu';\nconst DEFAULT_TRAINING_LAYER_V2 = \"out_relu\"; \nconst DEFAULT_ALPHA_V1 = 0.25;\nconst DEFAULT_ALPHA_V2 = 0.35;\nexport const IMAGE_SIZE = 224;\n\n/**\n * the metadata to describe the model's creation,\n * includes the labels associated with the classes\n * and versioning information from training.\n */\nexport interface Metadata {\n    tfjsVersion: string;\n    tmVersion?: string;\n    packageVersion: string;\n    packageName: string;\n    modelName?: string;\n    timeStamp?: string;\n    labels: string[];\n    userMetadata?: {};\n    grayscale?: boolean;\n    imageSize?: number;\n}\n\nexport interface ModelOptions {\n    version?: number;\n    checkpointUrl?: string;\n    alpha?: number;\n    trainingLayer?: string;\n}\n\n/**\n * Receives a Metadata object and fills in the optional fields such as timeStamp\n * @param data a Metadata object\n */\nconst fillMetadata = (data: Partial<Metadata>) => {\n    // util.assert(typeof data.tfjsVersion === 'string', () => `metadata.tfjsVersion is invalid`);\n    data.packageVersion = data.packageVersion || version;\n    data.packageName = data.packageName || '@teachablemachine/image';\n    data.timeStamp = data.timeStamp || new Date().toISOString();\n    data.userMetadata = data.userMetadata || {};\n    data.modelName = data.modelName || 'untitled';\n    data.labels = data.labels || [];\n    data.imageSize = data.imageSize || IMAGE_SIZE;\n    return data as Metadata;\n};\n\n// tslint:disable-next-line:no-any\nconst isMetadata = (c: any): c is Metadata =>\n    !!c && Array.isArray(c.labels);\n\nconst isAlphaValid = (version: number, alpha: number) => {\n    if (version === 1) {\n        if (alpha !== 0.25 && alpha !== 0.5 && alpha !== 0.75 && alpha !== 1) {\n            console.warn(\"Invalid alpha. Options are: 0.25, 0.50, 0.75 or 1.00.\");\n            console.log(\"Loading model with alpha: \", DEFAULT_ALPHA_V1.toFixed(2)); \n            return DEFAULT_ALPHA_V1;\n        }\n    }\n    else {\n        if (alpha !== 0.35 && alpha !== 0.5 && alpha !== 0.75 && alpha !== 1) {\n            console.warn(\"Invalid alpha. Options are: 0.35, 0.50, 0.75 or 1.00.\");\n            console.log(\"Loading model with alpha: \", DEFAULT_ALPHA_V2.toFixed(2)); \n            return DEFAULT_ALPHA_V2;\n        }\n    }\n\n    return alpha;\n};\n\nconst parseModelOptions = (options?: ModelOptions) => {\n    options = options || {}\n\n    if (options.checkpointUrl && options.trainingLayer) {\n        if (options.alpha || options.version){\n            console.warn(\"Checkpoint URL passed to modelOptions, alpha options are ignored\");\n        }        \n        return [options.checkpointUrl, options.trainingLayer];\n    } else {\n        options.version = options.version || DEFAULT_MOBILENET_VERSION;\n        \n        if(options.version === 1){\n            options.alpha = options.alpha || DEFAULT_ALPHA_V1;  \n            options.alpha = isAlphaValid(options.version, options.alpha);\n\n            console.log(`Loading mobilenet ${options.version} and alpha ${options.alpha}`);\n            // exception is alpha of 1 can only be 1.0\n            let alphaString = options.alpha.toFixed(2);\n            if (alphaString === \"1.00\") { alphaString = \"1.0\"; }\n\n            return [\n                // tslint:disable-next-line:max-line-length        \n                `https://storage.googleapis.com/tfjs-models/tfjs/mobilenet_v1_${alphaString}_${IMAGE_SIZE}/model.json`,\n                DEFAULT_TRAINING_LAYER_V1\n            ];\n        }\n        else if (options.version === 2){\n            options.alpha = options.alpha || DEFAULT_ALPHA_V2;  \n            options.alpha = isAlphaValid(options.version, options.alpha);\n\n            console.log(`Loading mobilenet ${options.version} and alpha ${options.alpha}`);\n            return [\n                // tslint:disable-next-line:max-line-length        \n                `https://storage.googleapis.com/teachable-machine-models/mobilenet_v2_weights_tf_dim_ordering_tf_kernels_${options.alpha.toFixed(2)}_${IMAGE_SIZE}_no_top/model.json`,\n                DEFAULT_TRAINING_LAYER_V2\n            ];\n        } else {\n            throw new Error(`MobileNet V${options.version} doesn't exist`);\n        }   \n    }\n};\n\n/**\n * process either a URL string or a Metadata object\n * @param metadata a url to load metadata or a Metadata object\n */\nconst processMetadata = async (metadata: string | Metadata) => {\n    let metadataJSON: Metadata;\n    if (typeof metadata === 'string') {\n        const metadataResponse = await fetch(metadata);\n        metadataJSON = await metadataResponse.json();\n    } else if (isMetadata(metadata)) {\n        metadataJSON = metadata;\n    } else {\n        throw new Error('Invalid Metadata provided');\n    }\n    return fillMetadata(metadataJSON);\n};\n\nexport type ClassifierInputSource = HTMLImageElement | HTMLCanvasElement | HTMLVideoElement | ImageBitmap;\n\n\n/**\n * Computes the probabilities of the topK classes given logits by computing\n * softmax to get probabilities and then sorting the probabilities.\n * @param logits Tensor representing the logits from MobileNet.\n * @param topK The number of top predictions to show.\n */\nexport async function getTopKClasses(labels: string[], logits: tf.Tensor<tf.Rank>, topK = 3) {\n  const values = await logits.data();\n  return tf.tidy(() => {\n      topK = Math.min(topK, values.length);\n\n      const valuesAndIndices = [];\n      for (let i = 0; i < values.length; i++) {\n          valuesAndIndices.push({value: values[i], index: i});\n      }\n      valuesAndIndices.sort((a, b) => {\n          return b.value - a.value;\n      });\n      const topkValues = new Float32Array(topK);\n      const topkIndices = new Int32Array(topK);\n      for (let i = 0; i < topK; i++) {\n          topkValues[i] = valuesAndIndices[i].value;\n          topkIndices[i] = valuesAndIndices[i].index;\n      }\n\n      const topClassesAndProbs = [];\n      for (let i = 0; i < topkIndices.length; i++) {\n          topClassesAndProbs.push({\n              className: labels[topkIndices[i]], //IMAGENET_CLASSES[topkIndices[i]],\n              probability: topkValues[i]\n          });\n      }\n      return topClassesAndProbs;\n  });\n}\n\n\nexport class CustomMobileNet {\n    /**\n     * the truncated mobilenet model we will train on top of\n     */\n    protected truncatedModel: tf.LayersModel;\n\n    static get EXPECTED_IMAGE_SIZE() {\n        return IMAGE_SIZE;\n    }\n\n    protected _metadata: Metadata;\n    public getMetadata() {\n        return this._metadata;\n    }\n\n    constructor(public model: tf.LayersModel, metadata: Partial<Metadata>) {\n        this._metadata = fillMetadata(metadata);\n    }\n\n    /**\n     * get the total number of classes existing within model\n     */\n    getTotalClasses() {\n        const output = this.model.output as SymbolicTensor;\n        const totalClasses = output.shape[1];\n        return totalClasses;\n    }\n\n    /**\n     * get the model labels\n     */\n    getClassLabels() {\n        return this._metadata.labels;\n    }\n\n    /**\n     * Given an image element, makes a prediction through mobilenet returning the\n     * probabilities of the top K classes.\n     * @param image the image to classify\n     * @param maxPredictions the maximum number of classification predictions\n     */\n    async predictTopK(image: ClassifierInputSource, maxPredictions = 10, flipped = false) {\n        const croppedImage = cropTo(image, this._metadata.imageSize, flipped);\n\n        const logits = tf.tidy(() => {\n            const captured = capture(croppedImage, this._metadata.grayscale);\n            return this.model.predict(captured);\n        });\n\n        // Convert logits to probabilities and class names.\n        const classes = await getTopKClasses(this._metadata.labels, logits as tf.Tensor<tf.Rank>, maxPredictions);\n        dispose(logits);\n\n        return classes;\n    }\n\n    /**\n     * Given an image element, makes a prediction through mobilenet returning the\n     * probabilities for ALL classes.\n     * @param image the image to classify\n     * @param flipped whether to flip the image on X\n     */\n    async predict(image: ClassifierInputSource, flipped = false) {\n        const croppedImage = cropTo(image, this._metadata.imageSize, flipped);\n\n        const logits = tf.tidy(() => {\n            const captured = capture(croppedImage, this._metadata.grayscale);\n            return this.model.predict(captured);\n        });\n\n        const values = await (logits as tf.Tensor<tf.Rank>).data();\n\n        const classes = [];\n        for (let i = 0; i < values.length; i++) {\n            classes.push({\n                className: this._metadata.labels[i],\n                probability: values[i]\n            });\n        }\n\n        dispose(logits);\n\n        return classes;\n    }\n\n    public dispose() {\n        this.truncatedModel.dispose();\n    }\n}\n\n/**\n * load the base mobilenet model\n * @param modelOptions options determining what model to load\n */\nexport async function loadTruncatedMobileNet(modelOptions?: ModelOptions) {\n    const [checkpointUrl, trainingLayer] = parseModelOptions(modelOptions);\n    const mobilenet = await tf.loadLayersModel(checkpointUrl);\n\n    if (modelOptions && modelOptions.version === 1){\n        const layer = mobilenet.getLayer(trainingLayer);\n        const truncatedModel = tf.model({ inputs: mobilenet.inputs, outputs: layer.output });\n        const model = tf.sequential();\n        model.add(truncatedModel);\n        model.add(tf.layers.flatten());\n        return model;\n    }\n    else {\n        const layer = mobilenet.getLayer(trainingLayer);\n        const truncatedModel = tf.model({ inputs: mobilenet.inputs, outputs: layer.output });\n        const model = tf.sequential();\n        model.add(truncatedModel);\n        model.add(tf.layers.globalAveragePooling2d({})); // go from shape [7, 7, 1280] to [1280]\n        return model;\n    }\n}\n\nexport async function load(model: string, metadata?: string | Metadata ) {\n    const customModel = await tf.loadLayersModel(model);\n    const metadataJSON = metadata ? await processMetadata(metadata) : null;\n    return new CustomMobileNet(customModel, metadataJSON);\n}\n\nexport async function loadFromFiles(model: File, weights: File, metadata: File) {\n    const customModel = await tf.loadLayersModel(tf.io.browserFiles([model, weights]));\n    const metadataFile = await new Response(metadata).json();\n    const metadataJSON = metadata ? await processMetadata(metadataFile) : null;\n    return new CustomMobileNet(customModel, metadataJSON);\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}